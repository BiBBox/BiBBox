/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.meduni.liferay.portlet.bbmriat.model.impl;

import at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTable;
import at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTableModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DDLLinkingTable service. Represents a row in the &quot;bbmriat.ddllinkingtable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DDLLinkingTableImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see DDLLinkingTableImpl
 * @see at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTable
 * @see at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTableModel
 * @generated
 */
public class DDLLinkingTableModelImpl extends BaseModelImpl<DDLLinkingTable>
	implements DDLLinkingTableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a d d l linking table model instance should use the {@link at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTable} interface instead.
	 */
	public static final String TABLE_NAME = "bbmriat.ddllinkingtable";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ddllinkingtable", Types.BIGINT },
			{ "recordid", Types.BIGINT },
			{ "recordsetid", Types.BIGINT },
			{ "linkrecordid", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table bbmriat.ddllinkingtable (ddllinkingtable LONG not null primary key,recordid LONG,recordsetid LONG,linkrecordid LONG)";
	public static final String TABLE_SQL_DROP = "drop table bbmriat.ddllinkingtable";
	public static final String ORDER_BY_JPQL = " ORDER BY ddlLinkingTable.recordid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bbmriat.ddllinkingtable.recordid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTable"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTable"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTable"),
			true);
	public static long RECORDID_COLUMN_BITMASK = 1L;
	public static long RECORDSETID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTable"));

	public DDLLinkingTableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ddllinkingtable;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDdllinkingtable(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ddllinkingtable;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DDLLinkingTable.class;
	}

	@Override
	public String getModelClassName() {
		return DDLLinkingTable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ddllinkingtable", getDdllinkingtable());
		attributes.put("recordid", getRecordid());
		attributes.put("recordsetid", getRecordsetid());
		attributes.put("linkrecordid", getLinkrecordid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ddllinkingtable = (Long)attributes.get("ddllinkingtable");

		if (ddllinkingtable != null) {
			setDdllinkingtable(ddllinkingtable);
		}

		Long recordid = (Long)attributes.get("recordid");

		if (recordid != null) {
			setRecordid(recordid);
		}

		Long recordsetid = (Long)attributes.get("recordsetid");

		if (recordsetid != null) {
			setRecordsetid(recordsetid);
		}

		Long linkrecordid = (Long)attributes.get("linkrecordid");

		if (linkrecordid != null) {
			setLinkrecordid(linkrecordid);
		}
	}

	@Override
	public long getDdllinkingtable() {
		return _ddllinkingtable;
	}

	@Override
	public void setDdllinkingtable(long ddllinkingtable) {
		_ddllinkingtable = ddllinkingtable;
	}

	@Override
	public long getRecordid() {
		return _recordid;
	}

	@Override
	public void setRecordid(long recordid) {
		_columnBitmask = -1L;

		if (!_setOriginalRecordid) {
			_setOriginalRecordid = true;

			_originalRecordid = _recordid;
		}

		_recordid = recordid;
	}

	public long getOriginalRecordid() {
		return _originalRecordid;
	}

	@Override
	public long getRecordsetid() {
		return _recordsetid;
	}

	@Override
	public void setRecordsetid(long recordsetid) {
		_columnBitmask |= RECORDSETID_COLUMN_BITMASK;

		if (!_setOriginalRecordsetid) {
			_setOriginalRecordsetid = true;

			_originalRecordsetid = _recordsetid;
		}

		_recordsetid = recordsetid;
	}

	public long getOriginalRecordsetid() {
		return _originalRecordsetid;
	}

	@Override
	public long getLinkrecordid() {
		return _linkrecordid;
	}

	@Override
	public void setLinkrecordid(long linkrecordid) {
		_linkrecordid = linkrecordid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DDLLinkingTable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DDLLinkingTable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DDLLinkingTable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DDLLinkingTableImpl ddlLinkingTableImpl = new DDLLinkingTableImpl();

		ddlLinkingTableImpl.setDdllinkingtable(getDdllinkingtable());
		ddlLinkingTableImpl.setRecordid(getRecordid());
		ddlLinkingTableImpl.setRecordsetid(getRecordsetid());
		ddlLinkingTableImpl.setLinkrecordid(getLinkrecordid());

		ddlLinkingTableImpl.resetOriginalValues();

		return ddlLinkingTableImpl;
	}

	@Override
	public int compareTo(DDLLinkingTable ddlLinkingTable) {
		int value = 0;

		if (getRecordid() < ddlLinkingTable.getRecordid()) {
			value = -1;
		}
		else if (getRecordid() > ddlLinkingTable.getRecordid()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DDLLinkingTable)) {
			return false;
		}

		DDLLinkingTable ddlLinkingTable = (DDLLinkingTable)obj;

		long primaryKey = ddlLinkingTable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DDLLinkingTableModelImpl ddlLinkingTableModelImpl = this;

		ddlLinkingTableModelImpl._originalRecordid = ddlLinkingTableModelImpl._recordid;

		ddlLinkingTableModelImpl._setOriginalRecordid = false;

		ddlLinkingTableModelImpl._originalRecordsetid = ddlLinkingTableModelImpl._recordsetid;

		ddlLinkingTableModelImpl._setOriginalRecordsetid = false;

		ddlLinkingTableModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DDLLinkingTable> toCacheModel() {
		DDLLinkingTableCacheModel ddlLinkingTableCacheModel = new DDLLinkingTableCacheModel();

		ddlLinkingTableCacheModel.ddllinkingtable = getDdllinkingtable();

		ddlLinkingTableCacheModel.recordid = getRecordid();

		ddlLinkingTableCacheModel.recordsetid = getRecordsetid();

		ddlLinkingTableCacheModel.linkrecordid = getLinkrecordid();

		return ddlLinkingTableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{ddllinkingtable=");
		sb.append(getDdllinkingtable());
		sb.append(", recordid=");
		sb.append(getRecordid());
		sb.append(", recordsetid=");
		sb.append(getRecordsetid());
		sb.append(", linkrecordid=");
		sb.append(getLinkrecordid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("at.meduni.liferay.portlet.bbmriat.model.DDLLinkingTable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ddllinkingtable</column-name><column-value><![CDATA[");
		sb.append(getDdllinkingtable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordid</column-name><column-value><![CDATA[");
		sb.append(getRecordid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordsetid</column-name><column-value><![CDATA[");
		sb.append(getRecordsetid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkrecordid</column-name><column-value><![CDATA[");
		sb.append(getLinkrecordid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DDLLinkingTable.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DDLLinkingTable.class
		};
	private long _ddllinkingtable;
	private long _recordid;
	private long _originalRecordid;
	private boolean _setOriginalRecordid;
	private long _recordsetid;
	private long _originalRecordsetid;
	private boolean _setOriginalRecordsetid;
	private long _linkrecordid;
	private long _columnBitmask;
	private DDLLinkingTable _escapedModel;
}