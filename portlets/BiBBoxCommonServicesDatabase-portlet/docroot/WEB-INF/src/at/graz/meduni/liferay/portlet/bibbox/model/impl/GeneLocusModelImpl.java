/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.model.GeneLocus;
import at.graz.meduni.liferay.portlet.bibbox.model.GeneLocusModel;
import at.graz.meduni.liferay.portlet.bibbox.model.GeneLocusSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GeneLocus service. Represents a row in the &quot;ontologies.genelocus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.model.GeneLocusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeneLocusImpl}.
 * </p>
 *
 * @author reihsr
 * @see GeneLocusImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.model.GeneLocus
 * @see at.graz.meduni.liferay.portlet.bibbox.model.GeneLocusModel
 * @generated
 */
@JSON(strict = true)
public class GeneLocusModelImpl extends BaseModelImpl<GeneLocus>
	implements GeneLocusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gene locus model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.model.GeneLocus} interface instead.
	 */
	public static final String TABLE_NAME = "ontologies.genelocus";
	public static final Object[][] TABLE_COLUMNS = {
			{ "genelocusId", Types.BIGINT },
			{ "geneId", Types.BIGINT },
			{ "genelocus", Types.VARCHAR },
			{ "genelocuskey", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ontologies.genelocus (genelocusId LONG not null primary key,geneId LONG,genelocus TEXT null,genelocuskey TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table ontologies.genelocus";
	public static final String ORDER_BY_JPQL = " ORDER BY geneLocus.genelocusId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ontologies.genelocus.genelocusId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.GeneLocus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.GeneLocus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GeneLocus toModel(GeneLocusSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GeneLocus model = new GeneLocusImpl();

		model.setGenelocusId(soapModel.getGenelocusId());
		model.setGeneId(soapModel.getGeneId());
		model.setGenelocus(soapModel.getGenelocus());
		model.setGenelocuskey(soapModel.getGenelocuskey());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GeneLocus> toModels(GeneLocusSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GeneLocus> models = new ArrayList<GeneLocus>(soapModels.length);

		for (GeneLocusSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.model.GeneLocus"));

	public GeneLocusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _genelocusId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGenelocusId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _genelocusId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GeneLocus.class;
	}

	@Override
	public String getModelClassName() {
		return GeneLocus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("genelocusId", getGenelocusId());
		attributes.put("geneId", getGeneId());
		attributes.put("genelocus", getGenelocus());
		attributes.put("genelocuskey", getGenelocuskey());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long genelocusId = (Long)attributes.get("genelocusId");

		if (genelocusId != null) {
			setGenelocusId(genelocusId);
		}

		Long geneId = (Long)attributes.get("geneId");

		if (geneId != null) {
			setGeneId(geneId);
		}

		String genelocus = (String)attributes.get("genelocus");

		if (genelocus != null) {
			setGenelocus(genelocus);
		}

		String genelocuskey = (String)attributes.get("genelocuskey");

		if (genelocuskey != null) {
			setGenelocuskey(genelocuskey);
		}
	}

	@JSON
	@Override
	public long getGenelocusId() {
		return _genelocusId;
	}

	@Override
	public void setGenelocusId(long genelocusId) {
		_genelocusId = genelocusId;
	}

	@JSON
	@Override
	public long getGeneId() {
		return _geneId;
	}

	@Override
	public void setGeneId(long geneId) {
		_geneId = geneId;
	}

	@JSON
	@Override
	public String getGenelocus() {
		if (_genelocus == null) {
			return StringPool.BLANK;
		}
		else {
			return _genelocus;
		}
	}

	@Override
	public void setGenelocus(String genelocus) {
		_genelocus = genelocus;
	}

	@JSON
	@Override
	public String getGenelocuskey() {
		if (_genelocuskey == null) {
			return StringPool.BLANK;
		}
		else {
			return _genelocuskey;
		}
	}

	@Override
	public void setGenelocuskey(String genelocuskey) {
		_genelocuskey = genelocuskey;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GeneLocus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GeneLocus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GeneLocus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeneLocusImpl geneLocusImpl = new GeneLocusImpl();

		geneLocusImpl.setGenelocusId(getGenelocusId());
		geneLocusImpl.setGeneId(getGeneId());
		geneLocusImpl.setGenelocus(getGenelocus());
		geneLocusImpl.setGenelocuskey(getGenelocuskey());

		geneLocusImpl.resetOriginalValues();

		return geneLocusImpl;
	}

	@Override
	public int compareTo(GeneLocus geneLocus) {
		long primaryKey = geneLocus.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GeneLocus)) {
			return false;
		}

		GeneLocus geneLocus = (GeneLocus)obj;

		long primaryKey = geneLocus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GeneLocus> toCacheModel() {
		GeneLocusCacheModel geneLocusCacheModel = new GeneLocusCacheModel();

		geneLocusCacheModel.genelocusId = getGenelocusId();

		geneLocusCacheModel.geneId = getGeneId();

		geneLocusCacheModel.genelocus = getGenelocus();

		String genelocus = geneLocusCacheModel.genelocus;

		if ((genelocus != null) && (genelocus.length() == 0)) {
			geneLocusCacheModel.genelocus = null;
		}

		geneLocusCacheModel.genelocuskey = getGenelocuskey();

		String genelocuskey = geneLocusCacheModel.genelocuskey;

		if ((genelocuskey != null) && (genelocuskey.length() == 0)) {
			geneLocusCacheModel.genelocuskey = null;
		}

		return geneLocusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{genelocusId=");
		sb.append(getGenelocusId());
		sb.append(", geneId=");
		sb.append(getGeneId());
		sb.append(", genelocus=");
		sb.append(getGenelocus());
		sb.append(", genelocuskey=");
		sb.append(getGenelocuskey());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.liferay.portlet.bibbox.model.GeneLocus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>genelocusId</column-name><column-value><![CDATA[");
		sb.append(getGenelocusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geneId</column-name><column-value><![CDATA[");
		sb.append(getGeneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>genelocus</column-name><column-value><![CDATA[");
		sb.append(getGenelocus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>genelocuskey</column-name><column-value><![CDATA[");
		sb.append(getGenelocuskey());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GeneLocus.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GeneLocus.class
		};
	private long _genelocusId;
	private long _geneId;
	private String _genelocus;
	private String _genelocuskey;
	private GeneLocus _escapedModel;
}