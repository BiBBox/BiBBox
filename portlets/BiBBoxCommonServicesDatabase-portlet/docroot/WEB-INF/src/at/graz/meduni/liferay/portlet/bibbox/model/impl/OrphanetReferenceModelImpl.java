/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReference;
import at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReferenceModel;
import at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReferenceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OrphanetReference service. Represents a row in the &quot;ontologies.orphanetreference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReferenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrphanetReferenceImpl}.
 * </p>
 *
 * @author reihsr
 * @see OrphanetReferenceImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReference
 * @see at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReferenceModel
 * @generated
 */
@JSON(strict = true)
public class OrphanetReferenceModelImpl extends BaseModelImpl<OrphanetReference>
	implements OrphanetReferenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a orphanet reference model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReference} interface instead.
	 */
	public static final String TABLE_NAME = "ontologies.orphanetreference";
	public static final Object[][] TABLE_COLUMNS = {
			{ "orphanetreferenceId", Types.BIGINT },
			{ "orphanetdisorderId", Types.BIGINT },
			{ "source", Types.VARCHAR },
			{ "reference", Types.VARCHAR },
			{ "disordermappingrelation", Types.BIGINT },
			{ "disordermappingrelationorphanumber", Types.BIGINT },
			{ "disordermappingrelationname", Types.VARCHAR },
			{ "disordermappingicdrelation", Types.BIGINT },
			{ "disordermappingicdrelationorphanumber", Types.BIGINT },
			{ "disordermappingicdrelationname", Types.VARCHAR },
			{ "disordermappingvalidationstatus", Types.BIGINT },
			{ "disordermappingvalidationstatusorphanumber", Types.BIGINT },
			{ "disordermappingvalidationstatusname", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ontologies.orphanetreference (orphanetreferenceId LONG not null primary key,orphanetdisorderId LONG,source TEXT null,reference TEXT null,disordermappingrelation LONG,disordermappingrelationorphanumber LONG,disordermappingrelationname TEXT null,disordermappingicdrelation LONG,disordermappingicdrelationorphanumber LONG,disordermappingicdrelationname TEXT null,disordermappingvalidationstatus LONG,disordermappingvalidationstatusorphanumber LONG,disordermappingvalidationstatusname TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table ontologies.orphanetreference";
	public static final String ORDER_BY_JPQL = " ORDER BY orphanetReference.orphanetreferenceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ontologies.orphanetreference.orphanetreferenceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReference"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReference"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static OrphanetReference toModel(OrphanetReferenceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OrphanetReference model = new OrphanetReferenceImpl();

		model.setOrphanetreferenceId(soapModel.getOrphanetreferenceId());
		model.setOrphanetdisorderId(soapModel.getOrphanetdisorderId());
		model.setSource(soapModel.getSource());
		model.setReference(soapModel.getReference());
		model.setDisordermappingrelation(soapModel.getDisordermappingrelation());
		model.setDisordermappingrelationorphanumber(soapModel.getDisordermappingrelationorphanumber());
		model.setDisordermappingrelationname(soapModel.getDisordermappingrelationname());
		model.setDisordermappingicdrelation(soapModel.getDisordermappingicdrelation());
		model.setDisordermappingicdrelationorphanumber(soapModel.getDisordermappingicdrelationorphanumber());
		model.setDisordermappingicdrelationname(soapModel.getDisordermappingicdrelationname());
		model.setDisordermappingvalidationstatus(soapModel.getDisordermappingvalidationstatus());
		model.setDisordermappingvalidationstatusorphanumber(soapModel.getDisordermappingvalidationstatusorphanumber());
		model.setDisordermappingvalidationstatusname(soapModel.getDisordermappingvalidationstatusname());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<OrphanetReference> toModels(
		OrphanetReferenceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<OrphanetReference> models = new ArrayList<OrphanetReference>(soapModels.length);

		for (OrphanetReferenceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReference"));

	public OrphanetReferenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _orphanetreferenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOrphanetreferenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _orphanetreferenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OrphanetReference.class;
	}

	@Override
	public String getModelClassName() {
		return OrphanetReference.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("orphanetreferenceId", getOrphanetreferenceId());
		attributes.put("orphanetdisorderId", getOrphanetdisorderId());
		attributes.put("source", getSource());
		attributes.put("reference", getReference());
		attributes.put("disordermappingrelation", getDisordermappingrelation());
		attributes.put("disordermappingrelationorphanumber",
			getDisordermappingrelationorphanumber());
		attributes.put("disordermappingrelationname",
			getDisordermappingrelationname());
		attributes.put("disordermappingicdrelation",
			getDisordermappingicdrelation());
		attributes.put("disordermappingicdrelationorphanumber",
			getDisordermappingicdrelationorphanumber());
		attributes.put("disordermappingicdrelationname",
			getDisordermappingicdrelationname());
		attributes.put("disordermappingvalidationstatus",
			getDisordermappingvalidationstatus());
		attributes.put("disordermappingvalidationstatusorphanumber",
			getDisordermappingvalidationstatusorphanumber());
		attributes.put("disordermappingvalidationstatusname",
			getDisordermappingvalidationstatusname());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long orphanetreferenceId = (Long)attributes.get("orphanetreferenceId");

		if (orphanetreferenceId != null) {
			setOrphanetreferenceId(orphanetreferenceId);
		}

		Long orphanetdisorderId = (Long)attributes.get("orphanetdisorderId");

		if (orphanetdisorderId != null) {
			setOrphanetdisorderId(orphanetdisorderId);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String reference = (String)attributes.get("reference");

		if (reference != null) {
			setReference(reference);
		}

		Long disordermappingrelation = (Long)attributes.get(
				"disordermappingrelation");

		if (disordermappingrelation != null) {
			setDisordermappingrelation(disordermappingrelation);
		}

		Long disordermappingrelationorphanumber = (Long)attributes.get(
				"disordermappingrelationorphanumber");

		if (disordermappingrelationorphanumber != null) {
			setDisordermappingrelationorphanumber(disordermappingrelationorphanumber);
		}

		String disordermappingrelationname = (String)attributes.get(
				"disordermappingrelationname");

		if (disordermappingrelationname != null) {
			setDisordermappingrelationname(disordermappingrelationname);
		}

		Long disordermappingicdrelation = (Long)attributes.get(
				"disordermappingicdrelation");

		if (disordermappingicdrelation != null) {
			setDisordermappingicdrelation(disordermappingicdrelation);
		}

		Long disordermappingicdrelationorphanumber = (Long)attributes.get(
				"disordermappingicdrelationorphanumber");

		if (disordermappingicdrelationorphanumber != null) {
			setDisordermappingicdrelationorphanumber(disordermappingicdrelationorphanumber);
		}

		String disordermappingicdrelationname = (String)attributes.get(
				"disordermappingicdrelationname");

		if (disordermappingicdrelationname != null) {
			setDisordermappingicdrelationname(disordermappingicdrelationname);
		}

		Long disordermappingvalidationstatus = (Long)attributes.get(
				"disordermappingvalidationstatus");

		if (disordermappingvalidationstatus != null) {
			setDisordermappingvalidationstatus(disordermappingvalidationstatus);
		}

		Long disordermappingvalidationstatusorphanumber = (Long)attributes.get(
				"disordermappingvalidationstatusorphanumber");

		if (disordermappingvalidationstatusorphanumber != null) {
			setDisordermappingvalidationstatusorphanumber(disordermappingvalidationstatusorphanumber);
		}

		String disordermappingvalidationstatusname = (String)attributes.get(
				"disordermappingvalidationstatusname");

		if (disordermappingvalidationstatusname != null) {
			setDisordermappingvalidationstatusname(disordermappingvalidationstatusname);
		}
	}

	@JSON
	@Override
	public long getOrphanetreferenceId() {
		return _orphanetreferenceId;
	}

	@Override
	public void setOrphanetreferenceId(long orphanetreferenceId) {
		_orphanetreferenceId = orphanetreferenceId;
	}

	@JSON
	@Override
	public long getOrphanetdisorderId() {
		return _orphanetdisorderId;
	}

	@Override
	public void setOrphanetdisorderId(long orphanetdisorderId) {
		_orphanetdisorderId = orphanetdisorderId;
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@JSON
	@Override
	public String getReference() {
		if (_reference == null) {
			return StringPool.BLANK;
		}
		else {
			return _reference;
		}
	}

	@Override
	public void setReference(String reference) {
		_reference = reference;
	}

	@JSON
	@Override
	public long getDisordermappingrelation() {
		return _disordermappingrelation;
	}

	@Override
	public void setDisordermappingrelation(long disordermappingrelation) {
		_disordermappingrelation = disordermappingrelation;
	}

	@JSON
	@Override
	public long getDisordermappingrelationorphanumber() {
		return _disordermappingrelationorphanumber;
	}

	@Override
	public void setDisordermappingrelationorphanumber(
		long disordermappingrelationorphanumber) {
		_disordermappingrelationorphanumber = disordermappingrelationorphanumber;
	}

	@JSON
	@Override
	public String getDisordermappingrelationname() {
		if (_disordermappingrelationname == null) {
			return StringPool.BLANK;
		}
		else {
			return _disordermappingrelationname;
		}
	}

	@Override
	public void setDisordermappingrelationname(
		String disordermappingrelationname) {
		_disordermappingrelationname = disordermappingrelationname;
	}

	@JSON
	@Override
	public long getDisordermappingicdrelation() {
		return _disordermappingicdrelation;
	}

	@Override
	public void setDisordermappingicdrelation(long disordermappingicdrelation) {
		_disordermappingicdrelation = disordermappingicdrelation;
	}

	@JSON
	@Override
	public long getDisordermappingicdrelationorphanumber() {
		return _disordermappingicdrelationorphanumber;
	}

	@Override
	public void setDisordermappingicdrelationorphanumber(
		long disordermappingicdrelationorphanumber) {
		_disordermappingicdrelationorphanumber = disordermappingicdrelationorphanumber;
	}

	@JSON
	@Override
	public String getDisordermappingicdrelationname() {
		if (_disordermappingicdrelationname == null) {
			return StringPool.BLANK;
		}
		else {
			return _disordermappingicdrelationname;
		}
	}

	@Override
	public void setDisordermappingicdrelationname(
		String disordermappingicdrelationname) {
		_disordermappingicdrelationname = disordermappingicdrelationname;
	}

	@JSON
	@Override
	public long getDisordermappingvalidationstatus() {
		return _disordermappingvalidationstatus;
	}

	@Override
	public void setDisordermappingvalidationstatus(
		long disordermappingvalidationstatus) {
		_disordermappingvalidationstatus = disordermappingvalidationstatus;
	}

	@JSON
	@Override
	public long getDisordermappingvalidationstatusorphanumber() {
		return _disordermappingvalidationstatusorphanumber;
	}

	@Override
	public void setDisordermappingvalidationstatusorphanumber(
		long disordermappingvalidationstatusorphanumber) {
		_disordermappingvalidationstatusorphanumber = disordermappingvalidationstatusorphanumber;
	}

	@JSON
	@Override
	public String getDisordermappingvalidationstatusname() {
		if (_disordermappingvalidationstatusname == null) {
			return StringPool.BLANK;
		}
		else {
			return _disordermappingvalidationstatusname;
		}
	}

	@Override
	public void setDisordermappingvalidationstatusname(
		String disordermappingvalidationstatusname) {
		_disordermappingvalidationstatusname = disordermappingvalidationstatusname;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			OrphanetReference.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OrphanetReference toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OrphanetReference)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OrphanetReferenceImpl orphanetReferenceImpl = new OrphanetReferenceImpl();

		orphanetReferenceImpl.setOrphanetreferenceId(getOrphanetreferenceId());
		orphanetReferenceImpl.setOrphanetdisorderId(getOrphanetdisorderId());
		orphanetReferenceImpl.setSource(getSource());
		orphanetReferenceImpl.setReference(getReference());
		orphanetReferenceImpl.setDisordermappingrelation(getDisordermappingrelation());
		orphanetReferenceImpl.setDisordermappingrelationorphanumber(getDisordermappingrelationorphanumber());
		orphanetReferenceImpl.setDisordermappingrelationname(getDisordermappingrelationname());
		orphanetReferenceImpl.setDisordermappingicdrelation(getDisordermappingicdrelation());
		orphanetReferenceImpl.setDisordermappingicdrelationorphanumber(getDisordermappingicdrelationorphanumber());
		orphanetReferenceImpl.setDisordermappingicdrelationname(getDisordermappingicdrelationname());
		orphanetReferenceImpl.setDisordermappingvalidationstatus(getDisordermappingvalidationstatus());
		orphanetReferenceImpl.setDisordermappingvalidationstatusorphanumber(getDisordermappingvalidationstatusorphanumber());
		orphanetReferenceImpl.setDisordermappingvalidationstatusname(getDisordermappingvalidationstatusname());

		orphanetReferenceImpl.resetOriginalValues();

		return orphanetReferenceImpl;
	}

	@Override
	public int compareTo(OrphanetReference orphanetReference) {
		long primaryKey = orphanetReference.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OrphanetReference)) {
			return false;
		}

		OrphanetReference orphanetReference = (OrphanetReference)obj;

		long primaryKey = orphanetReference.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<OrphanetReference> toCacheModel() {
		OrphanetReferenceCacheModel orphanetReferenceCacheModel = new OrphanetReferenceCacheModel();

		orphanetReferenceCacheModel.orphanetreferenceId = getOrphanetreferenceId();

		orphanetReferenceCacheModel.orphanetdisorderId = getOrphanetdisorderId();

		orphanetReferenceCacheModel.source = getSource();

		String source = orphanetReferenceCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			orphanetReferenceCacheModel.source = null;
		}

		orphanetReferenceCacheModel.reference = getReference();

		String reference = orphanetReferenceCacheModel.reference;

		if ((reference != null) && (reference.length() == 0)) {
			orphanetReferenceCacheModel.reference = null;
		}

		orphanetReferenceCacheModel.disordermappingrelation = getDisordermappingrelation();

		orphanetReferenceCacheModel.disordermappingrelationorphanumber = getDisordermappingrelationorphanumber();

		orphanetReferenceCacheModel.disordermappingrelationname = getDisordermappingrelationname();

		String disordermappingrelationname = orphanetReferenceCacheModel.disordermappingrelationname;

		if ((disordermappingrelationname != null) &&
				(disordermappingrelationname.length() == 0)) {
			orphanetReferenceCacheModel.disordermappingrelationname = null;
		}

		orphanetReferenceCacheModel.disordermappingicdrelation = getDisordermappingicdrelation();

		orphanetReferenceCacheModel.disordermappingicdrelationorphanumber = getDisordermappingicdrelationorphanumber();

		orphanetReferenceCacheModel.disordermappingicdrelationname = getDisordermappingicdrelationname();

		String disordermappingicdrelationname = orphanetReferenceCacheModel.disordermappingicdrelationname;

		if ((disordermappingicdrelationname != null) &&
				(disordermappingicdrelationname.length() == 0)) {
			orphanetReferenceCacheModel.disordermappingicdrelationname = null;
		}

		orphanetReferenceCacheModel.disordermappingvalidationstatus = getDisordermappingvalidationstatus();

		orphanetReferenceCacheModel.disordermappingvalidationstatusorphanumber = getDisordermappingvalidationstatusorphanumber();

		orphanetReferenceCacheModel.disordermappingvalidationstatusname = getDisordermappingvalidationstatusname();

		String disordermappingvalidationstatusname = orphanetReferenceCacheModel.disordermappingvalidationstatusname;

		if ((disordermappingvalidationstatusname != null) &&
				(disordermappingvalidationstatusname.length() == 0)) {
			orphanetReferenceCacheModel.disordermappingvalidationstatusname = null;
		}

		return orphanetReferenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{orphanetreferenceId=");
		sb.append(getOrphanetreferenceId());
		sb.append(", orphanetdisorderId=");
		sb.append(getOrphanetdisorderId());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", reference=");
		sb.append(getReference());
		sb.append(", disordermappingrelation=");
		sb.append(getDisordermappingrelation());
		sb.append(", disordermappingrelationorphanumber=");
		sb.append(getDisordermappingrelationorphanumber());
		sb.append(", disordermappingrelationname=");
		sb.append(getDisordermappingrelationname());
		sb.append(", disordermappingicdrelation=");
		sb.append(getDisordermappingicdrelation());
		sb.append(", disordermappingicdrelationorphanumber=");
		sb.append(getDisordermappingicdrelationorphanumber());
		sb.append(", disordermappingicdrelationname=");
		sb.append(getDisordermappingicdrelationname());
		sb.append(", disordermappingvalidationstatus=");
		sb.append(getDisordermappingvalidationstatus());
		sb.append(", disordermappingvalidationstatusorphanumber=");
		sb.append(getDisordermappingvalidationstatusorphanumber());
		sb.append(", disordermappingvalidationstatusname=");
		sb.append(getDisordermappingvalidationstatusname());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.model.OrphanetReference");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>orphanetreferenceId</column-name><column-value><![CDATA[");
		sb.append(getOrphanetreferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orphanetdisorderId</column-name><column-value><![CDATA[");
		sb.append(getOrphanetdisorderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reference</column-name><column-value><![CDATA[");
		sb.append(getReference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordermappingrelation</column-name><column-value><![CDATA[");
		sb.append(getDisordermappingrelation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordermappingrelationorphanumber</column-name><column-value><![CDATA[");
		sb.append(getDisordermappingrelationorphanumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordermappingrelationname</column-name><column-value><![CDATA[");
		sb.append(getDisordermappingrelationname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordermappingicdrelation</column-name><column-value><![CDATA[");
		sb.append(getDisordermappingicdrelation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordermappingicdrelationorphanumber</column-name><column-value><![CDATA[");
		sb.append(getDisordermappingicdrelationorphanumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordermappingicdrelationname</column-name><column-value><![CDATA[");
		sb.append(getDisordermappingicdrelationname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordermappingvalidationstatus</column-name><column-value><![CDATA[");
		sb.append(getDisordermappingvalidationstatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordermappingvalidationstatusorphanumber</column-name><column-value><![CDATA[");
		sb.append(getDisordermappingvalidationstatusorphanumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordermappingvalidationstatusname</column-name><column-value><![CDATA[");
		sb.append(getDisordermappingvalidationstatusname());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OrphanetReference.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OrphanetReference.class
		};
	private long _orphanetreferenceId;
	private long _orphanetdisorderId;
	private String _source;
	private String _reference;
	private long _disordermappingrelation;
	private long _disordermappingrelationorphanumber;
	private String _disordermappingrelationname;
	private long _disordermappingicdrelation;
	private long _disordermappingicdrelationorphanumber;
	private String _disordermappingicdrelationname;
	private long _disordermappingvalidationstatus;
	private long _disordermappingvalidationstatusorphanumber;
	private String _disordermappingvalidationstatusname;
	private OrphanetReference _escapedModel;
}