/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.model.Gene;
import at.graz.meduni.liferay.portlet.bibbox.model.GeneModel;
import at.graz.meduni.liferay.portlet.bibbox.model.GeneSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Gene service. Represents a row in the &quot;ontologies.gene&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.model.GeneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeneImpl}.
 * </p>
 *
 * @author reihsr
 * @see GeneImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.model.Gene
 * @see at.graz.meduni.liferay.portlet.bibbox.model.GeneModel
 * @generated
 */
@JSON(strict = true)
public class GeneModelImpl extends BaseModelImpl<Gene> implements GeneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gene model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.model.Gene} interface instead.
	 */
	public static final String TABLE_NAME = "ontologies.gene";
	public static final Object[][] TABLE_COLUMNS = {
			{ "geneId", Types.BIGINT },
			{ "orphanetdisorderId", Types.BIGINT },
			{ "symbol", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "geneorphanumber", Types.BIGINT },
			{ "genetype", Types.BIGINT },
			{ "genetypeorphanumber", Types.BIGINT },
			{ "genetypename", Types.VARCHAR },
			{ "disordergeneassociationtype", Types.BIGINT },
			{ "disordergeneassociationtypename", Types.VARCHAR },
			{ "disordergeneassociationstatus", Types.BIGINT },
			{ "disordergeneassociationstatusname", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ontologies.gene (geneId LONG not null primary key,orphanetdisorderId LONG,symbol TEXT null,description TEXT null,geneorphanumber LONG,genetype LONG,genetypeorphanumber LONG,genetypename VARCHAR(75) null,disordergeneassociationtype LONG,disordergeneassociationtypename TEXT null,disordergeneassociationstatus LONG,disordergeneassociationstatusname TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table ontologies.gene";
	public static final String ORDER_BY_JPQL = " ORDER BY gene.geneId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ontologies.gene.geneId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.Gene"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.Gene"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Gene toModel(GeneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Gene model = new GeneImpl();

		model.setGeneId(soapModel.getGeneId());
		model.setOrphanetdisorderId(soapModel.getOrphanetdisorderId());
		model.setSymbol(soapModel.getSymbol());
		model.setDescription(soapModel.getDescription());
		model.setGeneorphanumber(soapModel.getGeneorphanumber());
		model.setGenetype(soapModel.getGenetype());
		model.setGenetypeorphanumber(soapModel.getGenetypeorphanumber());
		model.setGenetypename(soapModel.getGenetypename());
		model.setDisordergeneassociationtype(soapModel.getDisordergeneassociationtype());
		model.setDisordergeneassociationtypename(soapModel.getDisordergeneassociationtypename());
		model.setDisordergeneassociationstatus(soapModel.getDisordergeneassociationstatus());
		model.setDisordergeneassociationstatusname(soapModel.getDisordergeneassociationstatusname());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Gene> toModels(GeneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Gene> models = new ArrayList<Gene>(soapModels.length);

		for (GeneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.model.Gene"));

	public GeneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _geneId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGeneId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _geneId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Gene.class;
	}

	@Override
	public String getModelClassName() {
		return Gene.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("geneId", getGeneId());
		attributes.put("orphanetdisorderId", getOrphanetdisorderId());
		attributes.put("symbol", getSymbol());
		attributes.put("description", getDescription());
		attributes.put("geneorphanumber", getGeneorphanumber());
		attributes.put("genetype", getGenetype());
		attributes.put("genetypeorphanumber", getGenetypeorphanumber());
		attributes.put("genetypename", getGenetypename());
		attributes.put("disordergeneassociationtype",
			getDisordergeneassociationtype());
		attributes.put("disordergeneassociationtypename",
			getDisordergeneassociationtypename());
		attributes.put("disordergeneassociationstatus",
			getDisordergeneassociationstatus());
		attributes.put("disordergeneassociationstatusname",
			getDisordergeneassociationstatusname());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long geneId = (Long)attributes.get("geneId");

		if (geneId != null) {
			setGeneId(geneId);
		}

		Long orphanetdisorderId = (Long)attributes.get("orphanetdisorderId");

		if (orphanetdisorderId != null) {
			setOrphanetdisorderId(orphanetdisorderId);
		}

		String symbol = (String)attributes.get("symbol");

		if (symbol != null) {
			setSymbol(symbol);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long geneorphanumber = (Long)attributes.get("geneorphanumber");

		if (geneorphanumber != null) {
			setGeneorphanumber(geneorphanumber);
		}

		Long genetype = (Long)attributes.get("genetype");

		if (genetype != null) {
			setGenetype(genetype);
		}

		Long genetypeorphanumber = (Long)attributes.get("genetypeorphanumber");

		if (genetypeorphanumber != null) {
			setGenetypeorphanumber(genetypeorphanumber);
		}

		String genetypename = (String)attributes.get("genetypename");

		if (genetypename != null) {
			setGenetypename(genetypename);
		}

		Long disordergeneassociationtype = (Long)attributes.get(
				"disordergeneassociationtype");

		if (disordergeneassociationtype != null) {
			setDisordergeneassociationtype(disordergeneassociationtype);
		}

		String disordergeneassociationtypename = (String)attributes.get(
				"disordergeneassociationtypename");

		if (disordergeneassociationtypename != null) {
			setDisordergeneassociationtypename(disordergeneassociationtypename);
		}

		Long disordergeneassociationstatus = (Long)attributes.get(
				"disordergeneassociationstatus");

		if (disordergeneassociationstatus != null) {
			setDisordergeneassociationstatus(disordergeneassociationstatus);
		}

		String disordergeneassociationstatusname = (String)attributes.get(
				"disordergeneassociationstatusname");

		if (disordergeneassociationstatusname != null) {
			setDisordergeneassociationstatusname(disordergeneassociationstatusname);
		}
	}

	@JSON
	@Override
	public long getGeneId() {
		return _geneId;
	}

	@Override
	public void setGeneId(long geneId) {
		_geneId = geneId;
	}

	@JSON
	@Override
	public long getOrphanetdisorderId() {
		return _orphanetdisorderId;
	}

	@Override
	public void setOrphanetdisorderId(long orphanetdisorderId) {
		_orphanetdisorderId = orphanetdisorderId;
	}

	@JSON
	@Override
	public String getSymbol() {
		if (_symbol == null) {
			return StringPool.BLANK;
		}
		else {
			return _symbol;
		}
	}

	@Override
	public void setSymbol(String symbol) {
		_symbol = symbol;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public long getGeneorphanumber() {
		return _geneorphanumber;
	}

	@Override
	public void setGeneorphanumber(long geneorphanumber) {
		_geneorphanumber = geneorphanumber;
	}

	@JSON
	@Override
	public long getGenetype() {
		return _genetype;
	}

	@Override
	public void setGenetype(long genetype) {
		_genetype = genetype;
	}

	@JSON
	@Override
	public long getGenetypeorphanumber() {
		return _genetypeorphanumber;
	}

	@Override
	public void setGenetypeorphanumber(long genetypeorphanumber) {
		_genetypeorphanumber = genetypeorphanumber;
	}

	@JSON
	@Override
	public String getGenetypename() {
		if (_genetypename == null) {
			return StringPool.BLANK;
		}
		else {
			return _genetypename;
		}
	}

	@Override
	public void setGenetypename(String genetypename) {
		_genetypename = genetypename;
	}

	@JSON
	@Override
	public long getDisordergeneassociationtype() {
		return _disordergeneassociationtype;
	}

	@Override
	public void setDisordergeneassociationtype(long disordergeneassociationtype) {
		_disordergeneassociationtype = disordergeneassociationtype;
	}

	@JSON
	@Override
	public String getDisordergeneassociationtypename() {
		if (_disordergeneassociationtypename == null) {
			return StringPool.BLANK;
		}
		else {
			return _disordergeneassociationtypename;
		}
	}

	@Override
	public void setDisordergeneassociationtypename(
		String disordergeneassociationtypename) {
		_disordergeneassociationtypename = disordergeneassociationtypename;
	}

	@JSON
	@Override
	public long getDisordergeneassociationstatus() {
		return _disordergeneassociationstatus;
	}

	@Override
	public void setDisordergeneassociationstatus(
		long disordergeneassociationstatus) {
		_disordergeneassociationstatus = disordergeneassociationstatus;
	}

	@JSON
	@Override
	public String getDisordergeneassociationstatusname() {
		if (_disordergeneassociationstatusname == null) {
			return StringPool.BLANK;
		}
		else {
			return _disordergeneassociationstatusname;
		}
	}

	@Override
	public void setDisordergeneassociationstatusname(
		String disordergeneassociationstatusname) {
		_disordergeneassociationstatusname = disordergeneassociationstatusname;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Gene.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Gene toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Gene)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeneImpl geneImpl = new GeneImpl();

		geneImpl.setGeneId(getGeneId());
		geneImpl.setOrphanetdisorderId(getOrphanetdisorderId());
		geneImpl.setSymbol(getSymbol());
		geneImpl.setDescription(getDescription());
		geneImpl.setGeneorphanumber(getGeneorphanumber());
		geneImpl.setGenetype(getGenetype());
		geneImpl.setGenetypeorphanumber(getGenetypeorphanumber());
		geneImpl.setGenetypename(getGenetypename());
		geneImpl.setDisordergeneassociationtype(getDisordergeneassociationtype());
		geneImpl.setDisordergeneassociationtypename(getDisordergeneassociationtypename());
		geneImpl.setDisordergeneassociationstatus(getDisordergeneassociationstatus());
		geneImpl.setDisordergeneassociationstatusname(getDisordergeneassociationstatusname());

		geneImpl.resetOriginalValues();

		return geneImpl;
	}

	@Override
	public int compareTo(Gene gene) {
		long primaryKey = gene.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Gene)) {
			return false;
		}

		Gene gene = (Gene)obj;

		long primaryKey = gene.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Gene> toCacheModel() {
		GeneCacheModel geneCacheModel = new GeneCacheModel();

		geneCacheModel.geneId = getGeneId();

		geneCacheModel.orphanetdisorderId = getOrphanetdisorderId();

		geneCacheModel.symbol = getSymbol();

		String symbol = geneCacheModel.symbol;

		if ((symbol != null) && (symbol.length() == 0)) {
			geneCacheModel.symbol = null;
		}

		geneCacheModel.description = getDescription();

		String description = geneCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			geneCacheModel.description = null;
		}

		geneCacheModel.geneorphanumber = getGeneorphanumber();

		geneCacheModel.genetype = getGenetype();

		geneCacheModel.genetypeorphanumber = getGenetypeorphanumber();

		geneCacheModel.genetypename = getGenetypename();

		String genetypename = geneCacheModel.genetypename;

		if ((genetypename != null) && (genetypename.length() == 0)) {
			geneCacheModel.genetypename = null;
		}

		geneCacheModel.disordergeneassociationtype = getDisordergeneassociationtype();

		geneCacheModel.disordergeneassociationtypename = getDisordergeneassociationtypename();

		String disordergeneassociationtypename = geneCacheModel.disordergeneassociationtypename;

		if ((disordergeneassociationtypename != null) &&
				(disordergeneassociationtypename.length() == 0)) {
			geneCacheModel.disordergeneassociationtypename = null;
		}

		geneCacheModel.disordergeneassociationstatus = getDisordergeneassociationstatus();

		geneCacheModel.disordergeneassociationstatusname = getDisordergeneassociationstatusname();

		String disordergeneassociationstatusname = geneCacheModel.disordergeneassociationstatusname;

		if ((disordergeneassociationstatusname != null) &&
				(disordergeneassociationstatusname.length() == 0)) {
			geneCacheModel.disordergeneassociationstatusname = null;
		}

		return geneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{geneId=");
		sb.append(getGeneId());
		sb.append(", orphanetdisorderId=");
		sb.append(getOrphanetdisorderId());
		sb.append(", symbol=");
		sb.append(getSymbol());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", geneorphanumber=");
		sb.append(getGeneorphanumber());
		sb.append(", genetype=");
		sb.append(getGenetype());
		sb.append(", genetypeorphanumber=");
		sb.append(getGenetypeorphanumber());
		sb.append(", genetypename=");
		sb.append(getGenetypename());
		sb.append(", disordergeneassociationtype=");
		sb.append(getDisordergeneassociationtype());
		sb.append(", disordergeneassociationtypename=");
		sb.append(getDisordergeneassociationtypename());
		sb.append(", disordergeneassociationstatus=");
		sb.append(getDisordergeneassociationstatus());
		sb.append(", disordergeneassociationstatusname=");
		sb.append(getDisordergeneassociationstatusname());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.liferay.portlet.bibbox.model.Gene");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>geneId</column-name><column-value><![CDATA[");
		sb.append(getGeneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orphanetdisorderId</column-name><column-value><![CDATA[");
		sb.append(getOrphanetdisorderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>symbol</column-name><column-value><![CDATA[");
		sb.append(getSymbol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geneorphanumber</column-name><column-value><![CDATA[");
		sb.append(getGeneorphanumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>genetype</column-name><column-value><![CDATA[");
		sb.append(getGenetype());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>genetypeorphanumber</column-name><column-value><![CDATA[");
		sb.append(getGenetypeorphanumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>genetypename</column-name><column-value><![CDATA[");
		sb.append(getGenetypename());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordergeneassociationtype</column-name><column-value><![CDATA[");
		sb.append(getDisordergeneassociationtype());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordergeneassociationtypename</column-name><column-value><![CDATA[");
		sb.append(getDisordergeneassociationtypename());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordergeneassociationstatus</column-name><column-value><![CDATA[");
		sb.append(getDisordergeneassociationstatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disordergeneassociationstatusname</column-name><column-value><![CDATA[");
		sb.append(getDisordergeneassociationstatusname());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Gene.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Gene.class };
	private long _geneId;
	private long _orphanetdisorderId;
	private String _symbol;
	private String _description;
	private long _geneorphanumber;
	private long _genetype;
	private long _genetypeorphanumber;
	private String _genetypename;
	private long _disordergeneassociationtype;
	private String _disordergeneassociationtypename;
	private long _disordergeneassociationstatus;
	private String _disordergeneassociationstatusname;
	private Gene _escapedModel;
}