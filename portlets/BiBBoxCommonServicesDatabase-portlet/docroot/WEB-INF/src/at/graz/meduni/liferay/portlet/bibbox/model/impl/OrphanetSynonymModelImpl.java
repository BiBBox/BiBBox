/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonym;
import at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonymModel;
import at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonymSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OrphanetSynonym service. Represents a row in the &quot;ontologies.orphanetsynonym&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonymModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrphanetSynonymImpl}.
 * </p>
 *
 * @author reihsr
 * @see OrphanetSynonymImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonym
 * @see at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonymModel
 * @generated
 */
@JSON(strict = true)
public class OrphanetSynonymModelImpl extends BaseModelImpl<OrphanetSynonym>
	implements OrphanetSynonymModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a orphanet synonym model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonym} interface instead.
	 */
	public static final String TABLE_NAME = "ontologies.orphanetsynonym";
	public static final Object[][] TABLE_COLUMNS = {
			{ "orphanetsynonymId", Types.BIGINT },
			{ "orphanetdisorderId", Types.BIGINT },
			{ "synonym", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ontologies.orphanetsynonym (orphanetsynonymId LONG not null primary key,orphanetdisorderId LONG,synonym TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table ontologies.orphanetsynonym";
	public static final String ORDER_BY_JPQL = " ORDER BY orphanetSynonym.orphanetsynonymId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ontologies.orphanetsynonym.orphanetsynonymId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonym"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonym"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonym"),
			true);
	public static long ORPHANETDISORDERID_COLUMN_BITMASK = 1L;
	public static long ORPHANETSYNONYMID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static OrphanetSynonym toModel(OrphanetSynonymSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OrphanetSynonym model = new OrphanetSynonymImpl();

		model.setOrphanetsynonymId(soapModel.getOrphanetsynonymId());
		model.setOrphanetdisorderId(soapModel.getOrphanetdisorderId());
		model.setSynonym(soapModel.getSynonym());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<OrphanetSynonym> toModels(
		OrphanetSynonymSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<OrphanetSynonym> models = new ArrayList<OrphanetSynonym>(soapModels.length);

		for (OrphanetSynonymSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonym"));

	public OrphanetSynonymModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _orphanetsynonymId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOrphanetsynonymId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _orphanetsynonymId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OrphanetSynonym.class;
	}

	@Override
	public String getModelClassName() {
		return OrphanetSynonym.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("orphanetsynonymId", getOrphanetsynonymId());
		attributes.put("orphanetdisorderId", getOrphanetdisorderId());
		attributes.put("synonym", getSynonym());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long orphanetsynonymId = (Long)attributes.get("orphanetsynonymId");

		if (orphanetsynonymId != null) {
			setOrphanetsynonymId(orphanetsynonymId);
		}

		Long orphanetdisorderId = (Long)attributes.get("orphanetdisorderId");

		if (orphanetdisorderId != null) {
			setOrphanetdisorderId(orphanetdisorderId);
		}

		String synonym = (String)attributes.get("synonym");

		if (synonym != null) {
			setSynonym(synonym);
		}
	}

	@JSON
	@Override
	public long getOrphanetsynonymId() {
		return _orphanetsynonymId;
	}

	@Override
	public void setOrphanetsynonymId(long orphanetsynonymId) {
		_orphanetsynonymId = orphanetsynonymId;
	}

	@JSON
	@Override
	public long getOrphanetdisorderId() {
		return _orphanetdisorderId;
	}

	@Override
	public void setOrphanetdisorderId(long orphanetdisorderId) {
		_columnBitmask |= ORPHANETDISORDERID_COLUMN_BITMASK;

		if (!_setOriginalOrphanetdisorderId) {
			_setOriginalOrphanetdisorderId = true;

			_originalOrphanetdisorderId = _orphanetdisorderId;
		}

		_orphanetdisorderId = orphanetdisorderId;
	}

	public long getOriginalOrphanetdisorderId() {
		return _originalOrphanetdisorderId;
	}

	@JSON
	@Override
	public String getSynonym() {
		if (_synonym == null) {
			return StringPool.BLANK;
		}
		else {
			return _synonym;
		}
	}

	@Override
	public void setSynonym(String synonym) {
		_synonym = synonym;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			OrphanetSynonym.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OrphanetSynonym toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OrphanetSynonym)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OrphanetSynonymImpl orphanetSynonymImpl = new OrphanetSynonymImpl();

		orphanetSynonymImpl.setOrphanetsynonymId(getOrphanetsynonymId());
		orphanetSynonymImpl.setOrphanetdisorderId(getOrphanetdisorderId());
		orphanetSynonymImpl.setSynonym(getSynonym());

		orphanetSynonymImpl.resetOriginalValues();

		return orphanetSynonymImpl;
	}

	@Override
	public int compareTo(OrphanetSynonym orphanetSynonym) {
		long primaryKey = orphanetSynonym.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OrphanetSynonym)) {
			return false;
		}

		OrphanetSynonym orphanetSynonym = (OrphanetSynonym)obj;

		long primaryKey = orphanetSynonym.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OrphanetSynonymModelImpl orphanetSynonymModelImpl = this;

		orphanetSynonymModelImpl._originalOrphanetdisorderId = orphanetSynonymModelImpl._orphanetdisorderId;

		orphanetSynonymModelImpl._setOriginalOrphanetdisorderId = false;

		orphanetSynonymModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OrphanetSynonym> toCacheModel() {
		OrphanetSynonymCacheModel orphanetSynonymCacheModel = new OrphanetSynonymCacheModel();

		orphanetSynonymCacheModel.orphanetsynonymId = getOrphanetsynonymId();

		orphanetSynonymCacheModel.orphanetdisorderId = getOrphanetdisorderId();

		orphanetSynonymCacheModel.synonym = getSynonym();

		String synonym = orphanetSynonymCacheModel.synonym;

		if ((synonym != null) && (synonym.length() == 0)) {
			orphanetSynonymCacheModel.synonym = null;
		}

		return orphanetSynonymCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{orphanetsynonymId=");
		sb.append(getOrphanetsynonymId());
		sb.append(", orphanetdisorderId=");
		sb.append(getOrphanetdisorderId());
		sb.append(", synonym=");
		sb.append(getSynonym());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.liferay.portlet.bibbox.model.OrphanetSynonym");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>orphanetsynonymId</column-name><column-value><![CDATA[");
		sb.append(getOrphanetsynonymId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orphanetdisorderId</column-name><column-value><![CDATA[");
		sb.append(getOrphanetdisorderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synonym</column-name><column-value><![CDATA[");
		sb.append(getSynonym());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OrphanetSynonym.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OrphanetSynonym.class
		};
	private long _orphanetsynonymId;
	private long _orphanetdisorderId;
	private long _originalOrphanetdisorderId;
	private boolean _setOriginalOrphanetdisorderId;
	private String _synonym;
	private long _columnBitmask;
	private OrphanetSynonym _escapedModel;
}