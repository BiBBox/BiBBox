/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonym;
import at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonymModel;
import at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonymSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GeneSynonym service. Represents a row in the &quot;ontologies.genesynonym&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonymModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeneSynonymImpl}.
 * </p>
 *
 * @author reihsr
 * @see GeneSynonymImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonym
 * @see at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonymModel
 * @generated
 */
@JSON(strict = true)
public class GeneSynonymModelImpl extends BaseModelImpl<GeneSynonym>
	implements GeneSynonymModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gene synonym model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonym} interface instead.
	 */
	public static final String TABLE_NAME = "ontologies.genesynonym";
	public static final Object[][] TABLE_COLUMNS = {
			{ "genesynonymId", Types.BIGINT },
			{ "geneId", Types.BIGINT },
			{ "synonym", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ontologies.genesynonym (genesynonymId LONG not null primary key,geneId LONG,synonym TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table ontologies.genesynonym";
	public static final String ORDER_BY_JPQL = " ORDER BY geneSynonym.genesynonymId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ontologies.genesynonym.genesynonymId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonym"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonym"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GeneSynonym toModel(GeneSynonymSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GeneSynonym model = new GeneSynonymImpl();

		model.setGenesynonymId(soapModel.getGenesynonymId());
		model.setGeneId(soapModel.getGeneId());
		model.setSynonym(soapModel.getSynonym());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GeneSynonym> toModels(GeneSynonymSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GeneSynonym> models = new ArrayList<GeneSynonym>(soapModels.length);

		for (GeneSynonymSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonym"));

	public GeneSynonymModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _genesynonymId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGenesynonymId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _genesynonymId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GeneSynonym.class;
	}

	@Override
	public String getModelClassName() {
		return GeneSynonym.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("genesynonymId", getGenesynonymId());
		attributes.put("geneId", getGeneId());
		attributes.put("synonym", getSynonym());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long genesynonymId = (Long)attributes.get("genesynonymId");

		if (genesynonymId != null) {
			setGenesynonymId(genesynonymId);
		}

		Long geneId = (Long)attributes.get("geneId");

		if (geneId != null) {
			setGeneId(geneId);
		}

		String synonym = (String)attributes.get("synonym");

		if (synonym != null) {
			setSynonym(synonym);
		}
	}

	@JSON
	@Override
	public long getGenesynonymId() {
		return _genesynonymId;
	}

	@Override
	public void setGenesynonymId(long genesynonymId) {
		_genesynonymId = genesynonymId;
	}

	@JSON
	@Override
	public long getGeneId() {
		return _geneId;
	}

	@Override
	public void setGeneId(long geneId) {
		_geneId = geneId;
	}

	@JSON
	@Override
	public String getSynonym() {
		if (_synonym == null) {
			return StringPool.BLANK;
		}
		else {
			return _synonym;
		}
	}

	@Override
	public void setSynonym(String synonym) {
		_synonym = synonym;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GeneSynonym.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GeneSynonym toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GeneSynonym)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeneSynonymImpl geneSynonymImpl = new GeneSynonymImpl();

		geneSynonymImpl.setGenesynonymId(getGenesynonymId());
		geneSynonymImpl.setGeneId(getGeneId());
		geneSynonymImpl.setSynonym(getSynonym());

		geneSynonymImpl.resetOriginalValues();

		return geneSynonymImpl;
	}

	@Override
	public int compareTo(GeneSynonym geneSynonym) {
		long primaryKey = geneSynonym.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GeneSynonym)) {
			return false;
		}

		GeneSynonym geneSynonym = (GeneSynonym)obj;

		long primaryKey = geneSynonym.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GeneSynonym> toCacheModel() {
		GeneSynonymCacheModel geneSynonymCacheModel = new GeneSynonymCacheModel();

		geneSynonymCacheModel.genesynonymId = getGenesynonymId();

		geneSynonymCacheModel.geneId = getGeneId();

		geneSynonymCacheModel.synonym = getSynonym();

		String synonym = geneSynonymCacheModel.synonym;

		if ((synonym != null) && (synonym.length() == 0)) {
			geneSynonymCacheModel.synonym = null;
		}

		return geneSynonymCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{genesynonymId=");
		sb.append(getGenesynonymId());
		sb.append(", geneId=");
		sb.append(getGeneId());
		sb.append(", synonym=");
		sb.append(getSynonym());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.liferay.portlet.bibbox.model.GeneSynonym");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>genesynonymId</column-name><column-value><![CDATA[");
		sb.append(getGenesynonymId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geneId</column-name><column-value><![CDATA[");
		sb.append(getGeneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>synonym</column-name><column-value><![CDATA[");
		sb.append(getSynonym());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GeneSynonym.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GeneSynonym.class
		};
	private long _genesynonymId;
	private long _geneId;
	private String _synonym;
	private GeneSynonym _escapedModel;
}