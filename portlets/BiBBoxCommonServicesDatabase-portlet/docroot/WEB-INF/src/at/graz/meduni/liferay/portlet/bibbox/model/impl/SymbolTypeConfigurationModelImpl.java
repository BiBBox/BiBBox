/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfiguration;
import at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfigurationModel;
import at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfigurationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SymbolTypeConfiguration service. Represents a row in the &quot;bibboxcs.symboltypeconfiguration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SymbolTypeConfigurationImpl}.
 * </p>
 *
 * @author reihsr
 * @see SymbolTypeConfigurationImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfiguration
 * @see at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfigurationModel
 * @generated
 */
@JSON(strict = true)
public class SymbolTypeConfigurationModelImpl extends BaseModelImpl<SymbolTypeConfiguration>
	implements SymbolTypeConfigurationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a symbol type configuration model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfiguration} interface instead.
	 */
	public static final String TABLE_NAME = "bibboxcs.symboltypeconfiguration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "symboltypeconfigurationId", Types.BIGINT },
			{ "symboltype", Types.VARCHAR },
			{ "template", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table bibboxcs.symboltypeconfiguration (symboltypeconfigurationId LONG not null primary key,symboltype VARCHAR(75) null,template TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table bibboxcs.symboltypeconfiguration";
	public static final String ORDER_BY_JPQL = " ORDER BY symbolTypeConfiguration.symboltypeconfigurationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bibboxcs.symboltypeconfiguration.symboltypeconfigurationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfiguration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfiguration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfiguration"),
			true);
	public static long SYMBOLTYPE_COLUMN_BITMASK = 1L;
	public static long SYMBOLTYPECONFIGURATIONID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SymbolTypeConfiguration toModel(
		SymbolTypeConfigurationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SymbolTypeConfiguration model = new SymbolTypeConfigurationImpl();

		model.setSymboltypeconfigurationId(soapModel.getSymboltypeconfigurationId());
		model.setSymboltype(soapModel.getSymboltype());
		model.setTemplate(soapModel.getTemplate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SymbolTypeConfiguration> toModels(
		SymbolTypeConfigurationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SymbolTypeConfiguration> models = new ArrayList<SymbolTypeConfiguration>(soapModels.length);

		for (SymbolTypeConfigurationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfiguration"));

	public SymbolTypeConfigurationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _symboltypeconfigurationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSymboltypeconfigurationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _symboltypeconfigurationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SymbolTypeConfiguration.class;
	}

	@Override
	public String getModelClassName() {
		return SymbolTypeConfiguration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("symboltypeconfigurationId",
			getSymboltypeconfigurationId());
		attributes.put("symboltype", getSymboltype());
		attributes.put("template", getTemplate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long symboltypeconfigurationId = (Long)attributes.get(
				"symboltypeconfigurationId");

		if (symboltypeconfigurationId != null) {
			setSymboltypeconfigurationId(symboltypeconfigurationId);
		}

		String symboltype = (String)attributes.get("symboltype");

		if (symboltype != null) {
			setSymboltype(symboltype);
		}

		String template = (String)attributes.get("template");

		if (template != null) {
			setTemplate(template);
		}
	}

	@JSON
	@Override
	public long getSymboltypeconfigurationId() {
		return _symboltypeconfigurationId;
	}

	@Override
	public void setSymboltypeconfigurationId(long symboltypeconfigurationId) {
		_symboltypeconfigurationId = symboltypeconfigurationId;
	}

	@JSON
	@Override
	public String getSymboltype() {
		if (_symboltype == null) {
			return StringPool.BLANK;
		}
		else {
			return _symboltype;
		}
	}

	@Override
	public void setSymboltype(String symboltype) {
		_columnBitmask |= SYMBOLTYPE_COLUMN_BITMASK;

		if (_originalSymboltype == null) {
			_originalSymboltype = _symboltype;
		}

		_symboltype = symboltype;
	}

	public String getOriginalSymboltype() {
		return GetterUtil.getString(_originalSymboltype);
	}

	@JSON
	@Override
	public String getTemplate() {
		if (_template == null) {
			return StringPool.BLANK;
		}
		else {
			return _template;
		}
	}

	@Override
	public void setTemplate(String template) {
		_template = template;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SymbolTypeConfiguration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SymbolTypeConfiguration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SymbolTypeConfiguration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SymbolTypeConfigurationImpl symbolTypeConfigurationImpl = new SymbolTypeConfigurationImpl();

		symbolTypeConfigurationImpl.setSymboltypeconfigurationId(getSymboltypeconfigurationId());
		symbolTypeConfigurationImpl.setSymboltype(getSymboltype());
		symbolTypeConfigurationImpl.setTemplate(getTemplate());

		symbolTypeConfigurationImpl.resetOriginalValues();

		return symbolTypeConfigurationImpl;
	}

	@Override
	public int compareTo(SymbolTypeConfiguration symbolTypeConfiguration) {
		long primaryKey = symbolTypeConfiguration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SymbolTypeConfiguration)) {
			return false;
		}

		SymbolTypeConfiguration symbolTypeConfiguration = (SymbolTypeConfiguration)obj;

		long primaryKey = symbolTypeConfiguration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SymbolTypeConfigurationModelImpl symbolTypeConfigurationModelImpl = this;

		symbolTypeConfigurationModelImpl._originalSymboltype = symbolTypeConfigurationModelImpl._symboltype;

		symbolTypeConfigurationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SymbolTypeConfiguration> toCacheModel() {
		SymbolTypeConfigurationCacheModel symbolTypeConfigurationCacheModel = new SymbolTypeConfigurationCacheModel();

		symbolTypeConfigurationCacheModel.symboltypeconfigurationId = getSymboltypeconfigurationId();

		symbolTypeConfigurationCacheModel.symboltype = getSymboltype();

		String symboltype = symbolTypeConfigurationCacheModel.symboltype;

		if ((symboltype != null) && (symboltype.length() == 0)) {
			symbolTypeConfigurationCacheModel.symboltype = null;
		}

		symbolTypeConfigurationCacheModel.template = getTemplate();

		String template = symbolTypeConfigurationCacheModel.template;

		if ((template != null) && (template.length() == 0)) {
			symbolTypeConfigurationCacheModel.template = null;
		}

		return symbolTypeConfigurationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{symboltypeconfigurationId=");
		sb.append(getSymboltypeconfigurationId());
		sb.append(", symboltype=");
		sb.append(getSymboltype());
		sb.append(", template=");
		sb.append(getTemplate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.model.SymbolTypeConfiguration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>symboltypeconfigurationId</column-name><column-value><![CDATA[");
		sb.append(getSymboltypeconfigurationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>symboltype</column-name><column-value><![CDATA[");
		sb.append(getSymboltype());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>template</column-name><column-value><![CDATA[");
		sb.append(getTemplate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SymbolTypeConfiguration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SymbolTypeConfiguration.class
		};
	private long _symboltypeconfigurationId;
	private String _symboltype;
	private String _originalSymboltype;
	private String _template;
	private long _columnBitmask;
	private SymbolTypeConfiguration _escapedModel;
}