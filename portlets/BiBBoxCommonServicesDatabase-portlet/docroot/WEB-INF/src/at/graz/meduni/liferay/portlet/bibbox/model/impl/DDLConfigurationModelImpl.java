/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.model.DDLConfiguration;
import at.graz.meduni.liferay.portlet.bibbox.model.DDLConfigurationModel;
import at.graz.meduni.liferay.portlet.bibbox.model.DDLConfigurationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DDLConfiguration service. Represents a row in the &quot;bibboxcs.ddlconfiguration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.model.DDLConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DDLConfigurationImpl}.
 * </p>
 *
 * @author reihsr
 * @see DDLConfigurationImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.model.DDLConfiguration
 * @see at.graz.meduni.liferay.portlet.bibbox.model.DDLConfigurationModel
 * @generated
 */
@JSON(strict = true)
public class DDLConfigurationModelImpl extends BaseModelImpl<DDLConfiguration>
	implements DDLConfigurationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a d d l configuration model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.model.DDLConfiguration} interface instead.
	 */
	public static final String TABLE_NAME = "bibboxcs.ddlconfiguration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ddlconfigurationId", Types.BIGINT },
			{ "ddmstructureId", Types.BIGINT },
			{ "fieldname", Types.VARCHAR },
			{ "group_", Types.VARCHAR },
			{ "display", Types.BOOLEAN },
			{ "viewscript", Types.VARCHAR },
			{ "displaytip", Types.VARCHAR },
			{ "viewtitlecss", Types.VARCHAR },
			{ "viewvaluecss", Types.VARCHAR },
			{ "columwidth", Types.BIGINT },
			{ "editscript", Types.VARCHAR },
			{ "edittip", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table bibboxcs.ddlconfiguration (ddlconfigurationId LONG not null primary key,ddmstructureId LONG,fieldname VARCHAR(75) null,group_ VARCHAR(75) null,display BOOLEAN,viewscript TEXT null,displaytip TEXT null,viewtitlecss TEXT null,viewvaluecss TEXT null,columwidth LONG,editscript TEXT null,edittip TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table bibboxcs.ddlconfiguration";
	public static final String ORDER_BY_JPQL = " ORDER BY ddlConfiguration.ddlconfigurationId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY bibboxcs.ddlconfiguration.ddlconfigurationId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.DDLConfiguration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.DDLConfiguration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.bibbox.model.DDLConfiguration"),
			true);
	public static long DDMSTRUCTUREID_COLUMN_BITMASK = 1L;
	public static long FIELDNAME_COLUMN_BITMASK = 2L;
	public static long DDLCONFIGURATIONID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DDLConfiguration toModel(DDLConfigurationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DDLConfiguration model = new DDLConfigurationImpl();

		model.setDdlconfigurationId(soapModel.getDdlconfigurationId());
		model.setDdmstructureId(soapModel.getDdmstructureId());
		model.setFieldname(soapModel.getFieldname());
		model.setGroup(soapModel.getGroup());
		model.setDisplay(soapModel.getDisplay());
		model.setViewscript(soapModel.getViewscript());
		model.setDisplaytip(soapModel.getDisplaytip());
		model.setViewtitlecss(soapModel.getViewtitlecss());
		model.setViewvaluecss(soapModel.getViewvaluecss());
		model.setColumwidth(soapModel.getColumwidth());
		model.setEditscript(soapModel.getEditscript());
		model.setEdittip(soapModel.getEdittip());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DDLConfiguration> toModels(
		DDLConfigurationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DDLConfiguration> models = new ArrayList<DDLConfiguration>(soapModels.length);

		for (DDLConfigurationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.model.DDLConfiguration"));

	public DDLConfigurationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ddlconfigurationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDdlconfigurationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ddlconfigurationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DDLConfiguration.class;
	}

	@Override
	public String getModelClassName() {
		return DDLConfiguration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ddlconfigurationId", getDdlconfigurationId());
		attributes.put("ddmstructureId", getDdmstructureId());
		attributes.put("fieldname", getFieldname());
		attributes.put("group", getGroup());
		attributes.put("display", getDisplay());
		attributes.put("viewscript", getViewscript());
		attributes.put("displaytip", getDisplaytip());
		attributes.put("viewtitlecss", getViewtitlecss());
		attributes.put("viewvaluecss", getViewvaluecss());
		attributes.put("columwidth", getColumwidth());
		attributes.put("editscript", getEditscript());
		attributes.put("edittip", getEdittip());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ddlconfigurationId = (Long)attributes.get("ddlconfigurationId");

		if (ddlconfigurationId != null) {
			setDdlconfigurationId(ddlconfigurationId);
		}

		Long ddmstructureId = (Long)attributes.get("ddmstructureId");

		if (ddmstructureId != null) {
			setDdmstructureId(ddmstructureId);
		}

		String fieldname = (String)attributes.get("fieldname");

		if (fieldname != null) {
			setFieldname(fieldname);
		}

		String group = (String)attributes.get("group");

		if (group != null) {
			setGroup(group);
		}

		Boolean display = (Boolean)attributes.get("display");

		if (display != null) {
			setDisplay(display);
		}

		String viewscript = (String)attributes.get("viewscript");

		if (viewscript != null) {
			setViewscript(viewscript);
		}

		String displaytip = (String)attributes.get("displaytip");

		if (displaytip != null) {
			setDisplaytip(displaytip);
		}

		String viewtitlecss = (String)attributes.get("viewtitlecss");

		if (viewtitlecss != null) {
			setViewtitlecss(viewtitlecss);
		}

		String viewvaluecss = (String)attributes.get("viewvaluecss");

		if (viewvaluecss != null) {
			setViewvaluecss(viewvaluecss);
		}

		Long columwidth = (Long)attributes.get("columwidth");

		if (columwidth != null) {
			setColumwidth(columwidth);
		}

		String editscript = (String)attributes.get("editscript");

		if (editscript != null) {
			setEditscript(editscript);
		}

		String edittip = (String)attributes.get("edittip");

		if (edittip != null) {
			setEdittip(edittip);
		}
	}

	@JSON
	@Override
	public long getDdlconfigurationId() {
		return _ddlconfigurationId;
	}

	@Override
	public void setDdlconfigurationId(long ddlconfigurationId) {
		_columnBitmask = -1L;

		_ddlconfigurationId = ddlconfigurationId;
	}

	@JSON
	@Override
	public long getDdmstructureId() {
		return _ddmstructureId;
	}

	@Override
	public void setDdmstructureId(long ddmstructureId) {
		_columnBitmask |= DDMSTRUCTUREID_COLUMN_BITMASK;

		if (!_setOriginalDdmstructureId) {
			_setOriginalDdmstructureId = true;

			_originalDdmstructureId = _ddmstructureId;
		}

		_ddmstructureId = ddmstructureId;
	}

	public long getOriginalDdmstructureId() {
		return _originalDdmstructureId;
	}

	@JSON
	@Override
	public String getFieldname() {
		if (_fieldname == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldname;
		}
	}

	@Override
	public void setFieldname(String fieldname) {
		_columnBitmask |= FIELDNAME_COLUMN_BITMASK;

		if (_originalFieldname == null) {
			_originalFieldname = _fieldname;
		}

		_fieldname = fieldname;
	}

	public String getOriginalFieldname() {
		return GetterUtil.getString(_originalFieldname);
	}

	@JSON
	@Override
	public String getGroup() {
		if (_group == null) {
			return StringPool.BLANK;
		}
		else {
			return _group;
		}
	}

	@Override
	public void setGroup(String group) {
		_group = group;
	}

	@JSON
	@Override
	public boolean getDisplay() {
		return _display;
	}

	@Override
	public boolean isDisplay() {
		return _display;
	}

	@Override
	public void setDisplay(boolean display) {
		_display = display;
	}

	@JSON
	@Override
	public String getViewscript() {
		if (_viewscript == null) {
			return StringPool.BLANK;
		}
		else {
			return _viewscript;
		}
	}

	@Override
	public void setViewscript(String viewscript) {
		_viewscript = viewscript;
	}

	@JSON
	@Override
	public String getDisplaytip() {
		if (_displaytip == null) {
			return StringPool.BLANK;
		}
		else {
			return _displaytip;
		}
	}

	@Override
	public void setDisplaytip(String displaytip) {
		_displaytip = displaytip;
	}

	@JSON
	@Override
	public String getViewtitlecss() {
		if (_viewtitlecss == null) {
			return StringPool.BLANK;
		}
		else {
			return _viewtitlecss;
		}
	}

	@Override
	public void setViewtitlecss(String viewtitlecss) {
		_viewtitlecss = viewtitlecss;
	}

	@JSON
	@Override
	public String getViewvaluecss() {
		if (_viewvaluecss == null) {
			return StringPool.BLANK;
		}
		else {
			return _viewvaluecss;
		}
	}

	@Override
	public void setViewvaluecss(String viewvaluecss) {
		_viewvaluecss = viewvaluecss;
	}

	@JSON
	@Override
	public long getColumwidth() {
		return _columwidth;
	}

	@Override
	public void setColumwidth(long columwidth) {
		_columwidth = columwidth;
	}

	@JSON
	@Override
	public String getEditscript() {
		if (_editscript == null) {
			return StringPool.BLANK;
		}
		else {
			return _editscript;
		}
	}

	@Override
	public void setEditscript(String editscript) {
		_editscript = editscript;
	}

	@JSON
	@Override
	public String getEdittip() {
		if (_edittip == null) {
			return StringPool.BLANK;
		}
		else {
			return _edittip;
		}
	}

	@Override
	public void setEdittip(String edittip) {
		_edittip = edittip;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DDLConfiguration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DDLConfiguration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DDLConfiguration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DDLConfigurationImpl ddlConfigurationImpl = new DDLConfigurationImpl();

		ddlConfigurationImpl.setDdlconfigurationId(getDdlconfigurationId());
		ddlConfigurationImpl.setDdmstructureId(getDdmstructureId());
		ddlConfigurationImpl.setFieldname(getFieldname());
		ddlConfigurationImpl.setGroup(getGroup());
		ddlConfigurationImpl.setDisplay(getDisplay());
		ddlConfigurationImpl.setViewscript(getViewscript());
		ddlConfigurationImpl.setDisplaytip(getDisplaytip());
		ddlConfigurationImpl.setViewtitlecss(getViewtitlecss());
		ddlConfigurationImpl.setViewvaluecss(getViewvaluecss());
		ddlConfigurationImpl.setColumwidth(getColumwidth());
		ddlConfigurationImpl.setEditscript(getEditscript());
		ddlConfigurationImpl.setEdittip(getEdittip());

		ddlConfigurationImpl.resetOriginalValues();

		return ddlConfigurationImpl;
	}

	@Override
	public int compareTo(DDLConfiguration ddlConfiguration) {
		int value = 0;

		if (getDdlconfigurationId() < ddlConfiguration.getDdlconfigurationId()) {
			value = -1;
		}
		else if (getDdlconfigurationId() > ddlConfiguration.getDdlconfigurationId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DDLConfiguration)) {
			return false;
		}

		DDLConfiguration ddlConfiguration = (DDLConfiguration)obj;

		long primaryKey = ddlConfiguration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DDLConfigurationModelImpl ddlConfigurationModelImpl = this;

		ddlConfigurationModelImpl._originalDdmstructureId = ddlConfigurationModelImpl._ddmstructureId;

		ddlConfigurationModelImpl._setOriginalDdmstructureId = false;

		ddlConfigurationModelImpl._originalFieldname = ddlConfigurationModelImpl._fieldname;

		ddlConfigurationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DDLConfiguration> toCacheModel() {
		DDLConfigurationCacheModel ddlConfigurationCacheModel = new DDLConfigurationCacheModel();

		ddlConfigurationCacheModel.ddlconfigurationId = getDdlconfigurationId();

		ddlConfigurationCacheModel.ddmstructureId = getDdmstructureId();

		ddlConfigurationCacheModel.fieldname = getFieldname();

		String fieldname = ddlConfigurationCacheModel.fieldname;

		if ((fieldname != null) && (fieldname.length() == 0)) {
			ddlConfigurationCacheModel.fieldname = null;
		}

		ddlConfigurationCacheModel.group = getGroup();

		String group = ddlConfigurationCacheModel.group;

		if ((group != null) && (group.length() == 0)) {
			ddlConfigurationCacheModel.group = null;
		}

		ddlConfigurationCacheModel.display = getDisplay();

		ddlConfigurationCacheModel.viewscript = getViewscript();

		String viewscript = ddlConfigurationCacheModel.viewscript;

		if ((viewscript != null) && (viewscript.length() == 0)) {
			ddlConfigurationCacheModel.viewscript = null;
		}

		ddlConfigurationCacheModel.displaytip = getDisplaytip();

		String displaytip = ddlConfigurationCacheModel.displaytip;

		if ((displaytip != null) && (displaytip.length() == 0)) {
			ddlConfigurationCacheModel.displaytip = null;
		}

		ddlConfigurationCacheModel.viewtitlecss = getViewtitlecss();

		String viewtitlecss = ddlConfigurationCacheModel.viewtitlecss;

		if ((viewtitlecss != null) && (viewtitlecss.length() == 0)) {
			ddlConfigurationCacheModel.viewtitlecss = null;
		}

		ddlConfigurationCacheModel.viewvaluecss = getViewvaluecss();

		String viewvaluecss = ddlConfigurationCacheModel.viewvaluecss;

		if ((viewvaluecss != null) && (viewvaluecss.length() == 0)) {
			ddlConfigurationCacheModel.viewvaluecss = null;
		}

		ddlConfigurationCacheModel.columwidth = getColumwidth();

		ddlConfigurationCacheModel.editscript = getEditscript();

		String editscript = ddlConfigurationCacheModel.editscript;

		if ((editscript != null) && (editscript.length() == 0)) {
			ddlConfigurationCacheModel.editscript = null;
		}

		ddlConfigurationCacheModel.edittip = getEdittip();

		String edittip = ddlConfigurationCacheModel.edittip;

		if ((edittip != null) && (edittip.length() == 0)) {
			ddlConfigurationCacheModel.edittip = null;
		}

		return ddlConfigurationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{ddlconfigurationId=");
		sb.append(getDdlconfigurationId());
		sb.append(", ddmstructureId=");
		sb.append(getDdmstructureId());
		sb.append(", fieldname=");
		sb.append(getFieldname());
		sb.append(", group=");
		sb.append(getGroup());
		sb.append(", display=");
		sb.append(getDisplay());
		sb.append(", viewscript=");
		sb.append(getViewscript());
		sb.append(", displaytip=");
		sb.append(getDisplaytip());
		sb.append(", viewtitlecss=");
		sb.append(getViewtitlecss());
		sb.append(", viewvaluecss=");
		sb.append(getViewvaluecss());
		sb.append(", columwidth=");
		sb.append(getColumwidth());
		sb.append(", editscript=");
		sb.append(getEditscript());
		sb.append(", edittip=");
		sb.append(getEdittip());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.model.DDLConfiguration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ddlconfigurationId</column-name><column-value><![CDATA[");
		sb.append(getDdlconfigurationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ddmstructureId</column-name><column-value><![CDATA[");
		sb.append(getDdmstructureId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldname</column-name><column-value><![CDATA[");
		sb.append(getFieldname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>group</column-name><column-value><![CDATA[");
		sb.append(getGroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>display</column-name><column-value><![CDATA[");
		sb.append(getDisplay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewscript</column-name><column-value><![CDATA[");
		sb.append(getViewscript());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displaytip</column-name><column-value><![CDATA[");
		sb.append(getDisplaytip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewtitlecss</column-name><column-value><![CDATA[");
		sb.append(getViewtitlecss());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewvaluecss</column-name><column-value><![CDATA[");
		sb.append(getViewvaluecss());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>columwidth</column-name><column-value><![CDATA[");
		sb.append(getColumwidth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editscript</column-name><column-value><![CDATA[");
		sb.append(getEditscript());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>edittip</column-name><column-value><![CDATA[");
		sb.append(getEdittip());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DDLConfiguration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DDLConfiguration.class
		};
	private long _ddlconfigurationId;
	private long _ddmstructureId;
	private long _originalDdmstructureId;
	private boolean _setOriginalDdmstructureId;
	private String _fieldname;
	private String _originalFieldname;
	private String _group;
	private boolean _display;
	private String _viewscript;
	private String _displaytip;
	private String _viewtitlecss;
	private String _viewvaluecss;
	private long _columwidth;
	private String _editscript;
	private String _edittip;
	private long _columnBitmask;
	private DDLConfiguration _escapedModel;
}