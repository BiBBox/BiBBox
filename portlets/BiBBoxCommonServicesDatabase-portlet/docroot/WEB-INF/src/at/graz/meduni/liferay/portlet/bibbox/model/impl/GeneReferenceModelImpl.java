/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.model.GeneReference;
import at.graz.meduni.liferay.portlet.bibbox.model.GeneReferenceModel;
import at.graz.meduni.liferay.portlet.bibbox.model.GeneReferenceSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GeneReference service. Represents a row in the &quot;ontologies.genereference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.model.GeneReferenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeneReferenceImpl}.
 * </p>
 *
 * @author reihsr
 * @see GeneReferenceImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.model.GeneReference
 * @see at.graz.meduni.liferay.portlet.bibbox.model.GeneReferenceModel
 * @generated
 */
@JSON(strict = true)
public class GeneReferenceModelImpl extends BaseModelImpl<GeneReference>
	implements GeneReferenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gene reference model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.model.GeneReference} interface instead.
	 */
	public static final String TABLE_NAME = "ontologies.genereference";
	public static final Object[][] TABLE_COLUMNS = {
			{ "genereferenceId", Types.BIGINT },
			{ "geneId", Types.BIGINT },
			{ "source", Types.VARCHAR },
			{ "reference", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ontologies.genereference (genereferenceId LONG not null primary key,geneId LONG,source VARCHAR(75) null,reference VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ontologies.genereference";
	public static final String ORDER_BY_JPQL = " ORDER BY geneReference.genereferenceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ontologies.genereference.genereferenceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.GeneReference"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.model.GeneReference"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GeneReference toModel(GeneReferenceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GeneReference model = new GeneReferenceImpl();

		model.setGenereferenceId(soapModel.getGenereferenceId());
		model.setGeneId(soapModel.getGeneId());
		model.setSource(soapModel.getSource());
		model.setReference(soapModel.getReference());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GeneReference> toModels(GeneReferenceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GeneReference> models = new ArrayList<GeneReference>(soapModels.length);

		for (GeneReferenceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.model.GeneReference"));

	public GeneReferenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _genereferenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGenereferenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _genereferenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GeneReference.class;
	}

	@Override
	public String getModelClassName() {
		return GeneReference.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("genereferenceId", getGenereferenceId());
		attributes.put("geneId", getGeneId());
		attributes.put("source", getSource());
		attributes.put("reference", getReference());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long genereferenceId = (Long)attributes.get("genereferenceId");

		if (genereferenceId != null) {
			setGenereferenceId(genereferenceId);
		}

		Long geneId = (Long)attributes.get("geneId");

		if (geneId != null) {
			setGeneId(geneId);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String reference = (String)attributes.get("reference");

		if (reference != null) {
			setReference(reference);
		}
	}

	@JSON
	@Override
	public long getGenereferenceId() {
		return _genereferenceId;
	}

	@Override
	public void setGenereferenceId(long genereferenceId) {
		_genereferenceId = genereferenceId;
	}

	@JSON
	@Override
	public long getGeneId() {
		return _geneId;
	}

	@Override
	public void setGeneId(long geneId) {
		_geneId = geneId;
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@JSON
	@Override
	public String getReference() {
		if (_reference == null) {
			return StringPool.BLANK;
		}
		else {
			return _reference;
		}
	}

	@Override
	public void setReference(String reference) {
		_reference = reference;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GeneReference.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GeneReference toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GeneReference)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeneReferenceImpl geneReferenceImpl = new GeneReferenceImpl();

		geneReferenceImpl.setGenereferenceId(getGenereferenceId());
		geneReferenceImpl.setGeneId(getGeneId());
		geneReferenceImpl.setSource(getSource());
		geneReferenceImpl.setReference(getReference());

		geneReferenceImpl.resetOriginalValues();

		return geneReferenceImpl;
	}

	@Override
	public int compareTo(GeneReference geneReference) {
		long primaryKey = geneReference.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GeneReference)) {
			return false;
		}

		GeneReference geneReference = (GeneReference)obj;

		long primaryKey = geneReference.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GeneReference> toCacheModel() {
		GeneReferenceCacheModel geneReferenceCacheModel = new GeneReferenceCacheModel();

		geneReferenceCacheModel.genereferenceId = getGenereferenceId();

		geneReferenceCacheModel.geneId = getGeneId();

		geneReferenceCacheModel.source = getSource();

		String source = geneReferenceCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			geneReferenceCacheModel.source = null;
		}

		geneReferenceCacheModel.reference = getReference();

		String reference = geneReferenceCacheModel.reference;

		if ((reference != null) && (reference.length() == 0)) {
			geneReferenceCacheModel.reference = null;
		}

		return geneReferenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{genereferenceId=");
		sb.append(getGenereferenceId());
		sb.append(", geneId=");
		sb.append(getGeneId());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", reference=");
		sb.append(getReference());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.liferay.portlet.bibbox.model.GeneReference");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>genereferenceId</column-name><column-value><![CDATA[");
		sb.append(getGenereferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geneId</column-name><column-value><![CDATA[");
		sb.append(getGeneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reference</column-name><column-value><![CDATA[");
		sb.append(getReference());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GeneReference.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GeneReference.class
		};
	private long _genereferenceId;
	private long _geneId;
	private String _source;
	private String _reference;
	private GeneReference _escapedModel;
}