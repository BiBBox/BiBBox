/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotification;
import at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotificationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RDConnectEventNotification service. Represents a row in the &quot;rdconnect.eventnotification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RDConnectEventNotificationImpl}.
 * </p>
 *
 * @author reihsr
 * @see RDConnectEventNotificationImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotification
 * @see at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotificationModel
 * @generated
 */
public class RDConnectEventNotificationModelImpl extends BaseModelImpl<RDConnectEventNotification>
	implements RDConnectEventNotificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a r d connect event notification model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotification} interface instead.
	 */
	public static final String TABLE_NAME = "rdconnect.eventnotification";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventnotificationId", Types.BIGINT },
			{ "notificationtype", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "notificationselected", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table rdconnect.eventnotification (eventnotificationId LONG not null primary key,notificationtype VARCHAR(75) null,userId LONG,notificationselected BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table rdconnect.eventnotification";
	public static final String ORDER_BY_JPQL = " ORDER BY rdConnectEventNotification.eventnotificationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rdconnect.eventnotification.eventnotificationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotification"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotification"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotification"),
			true);
	public static long NOTIFICATIONTYPE_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long EVENTNOTIFICATIONID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotification"));

	public RDConnectEventNotificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventnotificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventnotificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventnotificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RDConnectEventNotification.class;
	}

	@Override
	public String getModelClassName() {
		return RDConnectEventNotification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventnotificationId", getEventnotificationId());
		attributes.put("notificationtype", getNotificationtype());
		attributes.put("userId", getUserId());
		attributes.put("notificationselected", getNotificationselected());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventnotificationId = (Long)attributes.get("eventnotificationId");

		if (eventnotificationId != null) {
			setEventnotificationId(eventnotificationId);
		}

		String notificationtype = (String)attributes.get("notificationtype");

		if (notificationtype != null) {
			setNotificationtype(notificationtype);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Boolean notificationselected = (Boolean)attributes.get(
				"notificationselected");

		if (notificationselected != null) {
			setNotificationselected(notificationselected);
		}
	}

	@Override
	public long getEventnotificationId() {
		return _eventnotificationId;
	}

	@Override
	public void setEventnotificationId(long eventnotificationId) {
		_eventnotificationId = eventnotificationId;
	}

	@Override
	public String getNotificationtype() {
		if (_notificationtype == null) {
			return StringPool.BLANK;
		}
		else {
			return _notificationtype;
		}
	}

	@Override
	public void setNotificationtype(String notificationtype) {
		_columnBitmask |= NOTIFICATIONTYPE_COLUMN_BITMASK;

		if (_originalNotificationtype == null) {
			_originalNotificationtype = _notificationtype;
		}

		_notificationtype = notificationtype;
	}

	public String getOriginalNotificationtype() {
		return GetterUtil.getString(_originalNotificationtype);
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public boolean getNotificationselected() {
		return _notificationselected;
	}

	@Override
	public boolean isNotificationselected() {
		return _notificationselected;
	}

	@Override
	public void setNotificationselected(boolean notificationselected) {
		_notificationselected = notificationselected;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RDConnectEventNotification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RDConnectEventNotification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RDConnectEventNotification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RDConnectEventNotificationImpl rdConnectEventNotificationImpl = new RDConnectEventNotificationImpl();

		rdConnectEventNotificationImpl.setEventnotificationId(getEventnotificationId());
		rdConnectEventNotificationImpl.setNotificationtype(getNotificationtype());
		rdConnectEventNotificationImpl.setUserId(getUserId());
		rdConnectEventNotificationImpl.setNotificationselected(getNotificationselected());

		rdConnectEventNotificationImpl.resetOriginalValues();

		return rdConnectEventNotificationImpl;
	}

	@Override
	public int compareTo(RDConnectEventNotification rdConnectEventNotification) {
		long primaryKey = rdConnectEventNotification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RDConnectEventNotification)) {
			return false;
		}

		RDConnectEventNotification rdConnectEventNotification = (RDConnectEventNotification)obj;

		long primaryKey = rdConnectEventNotification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RDConnectEventNotificationModelImpl rdConnectEventNotificationModelImpl = this;

		rdConnectEventNotificationModelImpl._originalNotificationtype = rdConnectEventNotificationModelImpl._notificationtype;

		rdConnectEventNotificationModelImpl._originalUserId = rdConnectEventNotificationModelImpl._userId;

		rdConnectEventNotificationModelImpl._setOriginalUserId = false;

		rdConnectEventNotificationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RDConnectEventNotification> toCacheModel() {
		RDConnectEventNotificationCacheModel rdConnectEventNotificationCacheModel =
			new RDConnectEventNotificationCacheModel();

		rdConnectEventNotificationCacheModel.eventnotificationId = getEventnotificationId();

		rdConnectEventNotificationCacheModel.notificationtype = getNotificationtype();

		String notificationtype = rdConnectEventNotificationCacheModel.notificationtype;

		if ((notificationtype != null) && (notificationtype.length() == 0)) {
			rdConnectEventNotificationCacheModel.notificationtype = null;
		}

		rdConnectEventNotificationCacheModel.userId = getUserId();

		rdConnectEventNotificationCacheModel.notificationselected = getNotificationselected();

		return rdConnectEventNotificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{eventnotificationId=");
		sb.append(getEventnotificationId());
		sb.append(", notificationtype=");
		sb.append(getNotificationtype());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", notificationselected=");
		sb.append(getNotificationselected());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.rdconnect.service.model.RDConnectEventNotification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventnotificationId</column-name><column-value><![CDATA[");
		sb.append(getEventnotificationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificationtype</column-name><column-value><![CDATA[");
		sb.append(getNotificationtype());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificationselected</column-name><column-value><![CDATA[");
		sb.append(getNotificationselected());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RDConnectEventNotification.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RDConnectEventNotification.class
		};
	private long _eventnotificationId;
	private String _notificationtype;
	private String _originalNotificationtype;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private boolean _notificationselected;
	private long _columnBitmask;
	private RDConnectEventNotification _escapedModel;
}