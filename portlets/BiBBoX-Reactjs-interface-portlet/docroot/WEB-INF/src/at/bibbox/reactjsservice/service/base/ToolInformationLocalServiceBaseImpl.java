/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.bibbox.reactjsservice.service.base;

import at.bibbox.reactjsservice.model.ToolInformation;
import at.bibbox.reactjsservice.service.ToolInformationLocalService;
import at.bibbox.reactjsservice.service.persistence.ToolInformationPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the tool information local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link at.bibbox.reactjsservice.service.impl.ToolInformationLocalServiceImpl}.
 * </p>
 *
 * @author reihsr
 * @see at.bibbox.reactjsservice.service.impl.ToolInformationLocalServiceImpl
 * @see at.bibbox.reactjsservice.service.ToolInformationLocalServiceUtil
 * @generated
 */
public abstract class ToolInformationLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ToolInformationLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link at.bibbox.reactjsservice.service.ToolInformationLocalServiceUtil} to access the tool information local service.
	 */

	/**
	 * Adds the tool information to the database. Also notifies the appropriate model listeners.
	 *
	 * @param toolInformation the tool information
	 * @return the tool information that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ToolInformation addToolInformation(ToolInformation toolInformation)
		throws SystemException {
		toolInformation.setNew(true);

		return toolInformationPersistence.update(toolInformation);
	}

	/**
	 * Creates a new tool information with the primary key. Does not add the tool information to the database.
	 *
	 * @param toolInformationId the primary key for the new tool information
	 * @return the new tool information
	 */
	@Override
	public ToolInformation createToolInformation(long toolInformationId) {
		return toolInformationPersistence.create(toolInformationId);
	}

	/**
	 * Deletes the tool information with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param toolInformationId the primary key of the tool information
	 * @return the tool information that was removed
	 * @throws PortalException if a tool information with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ToolInformation deleteToolInformation(long toolInformationId)
		throws PortalException, SystemException {
		return toolInformationPersistence.remove(toolInformationId);
	}

	/**
	 * Deletes the tool information from the database. Also notifies the appropriate model listeners.
	 *
	 * @param toolInformation the tool information
	 * @return the tool information that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ToolInformation deleteToolInformation(
		ToolInformation toolInformation) throws SystemException {
		return toolInformationPersistence.remove(toolInformation);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ToolInformation.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return toolInformationPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link at.bibbox.reactjsservice.model.impl.ToolInformationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return toolInformationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link at.bibbox.reactjsservice.model.impl.ToolInformationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return toolInformationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return toolInformationPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return toolInformationPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ToolInformation fetchToolInformation(long toolInformationId)
		throws SystemException {
		return toolInformationPersistence.fetchByPrimaryKey(toolInformationId);
	}

	/**
	 * Returns the tool information with the primary key.
	 *
	 * @param toolInformationId the primary key of the tool information
	 * @return the tool information
	 * @throws PortalException if a tool information with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ToolInformation getToolInformation(long toolInformationId)
		throws PortalException, SystemException {
		return toolInformationPersistence.findByPrimaryKey(toolInformationId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return toolInformationPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the tool informations.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link at.bibbox.reactjsservice.model.impl.ToolInformationModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of tool informations
	 * @param end the upper bound of the range of tool informations (not inclusive)
	 * @return the range of tool informations
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ToolInformation> getToolInformations(int start, int end)
		throws SystemException {
		return toolInformationPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of tool informations.
	 *
	 * @return the number of tool informations
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getToolInformationsCount() throws SystemException {
		return toolInformationPersistence.countAll();
	}

	/**
	 * Updates the tool information in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param toolInformation the tool information
	 * @return the tool information that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ToolInformation updateToolInformation(
		ToolInformation toolInformation) throws SystemException {
		return toolInformationPersistence.update(toolInformation);
	}

	/**
	 * Returns the tool information local service.
	 *
	 * @return the tool information local service
	 */
	public at.bibbox.reactjsservice.service.ToolInformationLocalService getToolInformationLocalService() {
		return toolInformationLocalService;
	}

	/**
	 * Sets the tool information local service.
	 *
	 * @param toolInformationLocalService the tool information local service
	 */
	public void setToolInformationLocalService(
		at.bibbox.reactjsservice.service.ToolInformationLocalService toolInformationLocalService) {
		this.toolInformationLocalService = toolInformationLocalService;
	}

	/**
	 * Returns the tool information remote service.
	 *
	 * @return the tool information remote service
	 */
	public at.bibbox.reactjsservice.service.ToolInformationService getToolInformationService() {
		return toolInformationService;
	}

	/**
	 * Sets the tool information remote service.
	 *
	 * @param toolInformationService the tool information remote service
	 */
	public void setToolInformationService(
		at.bibbox.reactjsservice.service.ToolInformationService toolInformationService) {
		this.toolInformationService = toolInformationService;
	}

	/**
	 * Returns the tool information persistence.
	 *
	 * @return the tool information persistence
	 */
	public ToolInformationPersistence getToolInformationPersistence() {
		return toolInformationPersistence;
	}

	/**
	 * Sets the tool information persistence.
	 *
	 * @param toolInformationPersistence the tool information persistence
	 */
	public void setToolInformationPersistence(
		ToolInformationPersistence toolInformationPersistence) {
		this.toolInformationPersistence = toolInformationPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("at.bibbox.reactjsservice.model.ToolInformation",
			toolInformationLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"at.bibbox.reactjsservice.model.ToolInformation");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ToolInformation.class;
	}

	protected String getModelClassName() {
		return ToolInformation.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = toolInformationPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = at.bibbox.reactjsservice.service.ToolInformationLocalService.class)
	protected at.bibbox.reactjsservice.service.ToolInformationLocalService toolInformationLocalService;
	@BeanReference(type = at.bibbox.reactjsservice.service.ToolInformationService.class)
	protected at.bibbox.reactjsservice.service.ToolInformationService toolInformationService;
	@BeanReference(type = ToolInformationPersistence.class)
	protected ToolInformationPersistence toolInformationPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ToolInformationLocalServiceClpInvoker _clpInvoker = new ToolInformationLocalServiceClpInvoker();
}