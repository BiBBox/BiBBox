/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.saat.model.impl;

import at.graz.meduni.liferay.portlet.saat.model.SCG;
import at.graz.meduni.liferay.portlet.saat.model.SCGModel;
import at.graz.meduni.liferay.portlet.saat.model.SCGSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SCG service. Represents a row in the &quot;saat_code_scg&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.saat.model.SCGModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SCGImpl}.
 * </p>
 *
 * @author reihsr
 * @see SCGImpl
 * @see at.graz.meduni.liferay.portlet.saat.model.SCG
 * @see at.graz.meduni.liferay.portlet.saat.model.SCGModel
 * @generated
 */
@JSON(strict = true)
public class SCGModelImpl extends BaseModelImpl<SCG> implements SCGModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s c g model instance should use the {@link at.graz.meduni.liferay.portlet.saat.model.SCG} interface instead.
	 */
	public static final String TABLE_NAME = "saat_code_scg";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scgId", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table saat_code_scg (scgId LONG not null primary key,code_ VARCHAR(255) null,description TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table saat_code_scg";
	public static final String ORDER_BY_JPQL = " ORDER BY scg.scgId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY saat_code_scg.scgId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.saat.model.SCG"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.saat.model.SCG"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.saat.model.SCG"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long SCGID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SCG toModel(SCGSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SCG model = new SCGImpl();

		model.setScgId(soapModel.getScgId());
		model.setCode(soapModel.getCode());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SCG> toModels(SCGSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SCG> models = new ArrayList<SCG>(soapModels.length);

		for (SCGSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.saat.model.SCG"));

	public SCGModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _scgId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setScgId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _scgId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SCG.class;
	}

	@Override
	public String getModelClassName() {
		return SCG.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scgId", getScgId());
		attributes.put("code", getCode());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scgId = (Long)attributes.get("scgId");

		if (scgId != null) {
			setScgId(scgId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getScgId() {
		return _scgId;
	}

	@Override
	public void setScgId(long scgId) {
		_columnBitmask = -1L;

		_scgId = scgId;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SCG.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SCG toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SCG)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SCGImpl scgImpl = new SCGImpl();

		scgImpl.setScgId(getScgId());
		scgImpl.setCode(getCode());
		scgImpl.setDescription(getDescription());

		scgImpl.resetOriginalValues();

		return scgImpl;
	}

	@Override
	public int compareTo(SCG scg) {
		int value = 0;

		if (getScgId() < scg.getScgId()) {
			value = -1;
		}
		else if (getScgId() > scg.getScgId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SCG)) {
			return false;
		}

		SCG scg = (SCG)obj;

		long primaryKey = scg.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SCGModelImpl scgModelImpl = this;

		scgModelImpl._originalCode = scgModelImpl._code;

		scgModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SCG> toCacheModel() {
		SCGCacheModel scgCacheModel = new SCGCacheModel();

		scgCacheModel.scgId = getScgId();

		scgCacheModel.code = getCode();

		String code = scgCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			scgCacheModel.code = null;
		}

		scgCacheModel.description = getDescription();

		String description = scgCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			scgCacheModel.description = null;
		}

		return scgCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{scgId=");
		sb.append(getScgId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.liferay.portlet.saat.model.SCG");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scgId</column-name><column-value><![CDATA[");
		sb.append(getScgId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SCG.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { SCG.class };
	private long _scgId;
	private String _code;
	private String _originalCode;
	private String _description;
	private long _columnBitmask;
	private SCG _escapedModel;
}