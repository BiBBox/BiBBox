/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.rdconnect.update.model.impl;

import at.rdconnect.update.model.QualityUpdate;
import at.rdconnect.update.model.QualityUpdateModel;
import at.rdconnect.update.model.QualityUpdateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the QualityUpdate service. Represents a row in the &quot;rdconnect.u_quality&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.rdconnect.update.model.QualityUpdateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QualityUpdateImpl}.
 * </p>
 *
 * @author reihsr
 * @see QualityUpdateImpl
 * @see at.rdconnect.update.model.QualityUpdate
 * @see at.rdconnect.update.model.QualityUpdateModel
 * @generated
 */
@JSON(strict = true)
public class QualityUpdateModelImpl extends BaseModelImpl<QualityUpdate>
	implements QualityUpdateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a quality update model instance should use the {@link at.rdconnect.update.model.QualityUpdate} interface instead.
	 */
	public static final String TABLE_NAME = "rdconnect.u_quality";
	public static final Object[][] TABLE_COLUMNS = {
			{ "coreid", Types.BIGINT },
			{ "organizationid", Types.BIGINT },
			{ "fieldname", Types.VARCHAR },
			{ "value", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table rdconnect.u_quality (coreid LONG not null primary key,organizationid LONG,fieldname TEXT null,value TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table rdconnect.u_quality";
	public static final String ORDER_BY_JPQL = " ORDER BY qualityUpdate.organizationid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rdconnect.u_quality.organizationid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.rdconnect.update.model.QualityUpdate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.rdconnect.update.model.QualityUpdate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.rdconnect.update.model.QualityUpdate"),
			true);
	public static long ORGANIZATIONID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static QualityUpdate toModel(QualityUpdateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		QualityUpdate model = new QualityUpdateImpl();

		model.setCoreid(soapModel.getCoreid());
		model.setOrganizationid(soapModel.getOrganizationid());
		model.setFieldname(soapModel.getFieldname());
		model.setValue(soapModel.getValue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<QualityUpdate> toModels(QualityUpdateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<QualityUpdate> models = new ArrayList<QualityUpdate>(soapModels.length);

		for (QualityUpdateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.rdconnect.update.model.QualityUpdate"));

	public QualityUpdateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _coreid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCoreid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _coreid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return QualityUpdate.class;
	}

	@Override
	public String getModelClassName() {
		return QualityUpdate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("coreid", getCoreid());
		attributes.put("organizationid", getOrganizationid());
		attributes.put("fieldname", getFieldname());
		attributes.put("value", getValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long coreid = (Long)attributes.get("coreid");

		if (coreid != null) {
			setCoreid(coreid);
		}

		Long organizationid = (Long)attributes.get("organizationid");

		if (organizationid != null) {
			setOrganizationid(organizationid);
		}

		String fieldname = (String)attributes.get("fieldname");

		if (fieldname != null) {
			setFieldname(fieldname);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}
	}

	@JSON
	@Override
	public long getCoreid() {
		return _coreid;
	}

	@Override
	public void setCoreid(long coreid) {
		_coreid = coreid;
	}

	@JSON
	@Override
	public long getOrganizationid() {
		return _organizationid;
	}

	@Override
	public void setOrganizationid(long organizationid) {
		_columnBitmask = -1L;

		if (!_setOriginalOrganizationid) {
			_setOriginalOrganizationid = true;

			_originalOrganizationid = _organizationid;
		}

		_organizationid = organizationid;
	}

	public long getOriginalOrganizationid() {
		return _originalOrganizationid;
	}

	@JSON
	@Override
	public String getFieldname() {
		if (_fieldname == null) {
			return StringPool.BLANK;
		}
		else {
			return _fieldname;
		}
	}

	@Override
	public void setFieldname(String fieldname) {
		_fieldname = fieldname;
	}

	@JSON
	@Override
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			QualityUpdate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public QualityUpdate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (QualityUpdate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QualityUpdateImpl qualityUpdateImpl = new QualityUpdateImpl();

		qualityUpdateImpl.setCoreid(getCoreid());
		qualityUpdateImpl.setOrganizationid(getOrganizationid());
		qualityUpdateImpl.setFieldname(getFieldname());
		qualityUpdateImpl.setValue(getValue());

		qualityUpdateImpl.resetOriginalValues();

		return qualityUpdateImpl;
	}

	@Override
	public int compareTo(QualityUpdate qualityUpdate) {
		int value = 0;

		if (getOrganizationid() < qualityUpdate.getOrganizationid()) {
			value = -1;
		}
		else if (getOrganizationid() > qualityUpdate.getOrganizationid()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof QualityUpdate)) {
			return false;
		}

		QualityUpdate qualityUpdate = (QualityUpdate)obj;

		long primaryKey = qualityUpdate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		QualityUpdateModelImpl qualityUpdateModelImpl = this;

		qualityUpdateModelImpl._originalOrganizationid = qualityUpdateModelImpl._organizationid;

		qualityUpdateModelImpl._setOriginalOrganizationid = false;

		qualityUpdateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<QualityUpdate> toCacheModel() {
		QualityUpdateCacheModel qualityUpdateCacheModel = new QualityUpdateCacheModel();

		qualityUpdateCacheModel.coreid = getCoreid();

		qualityUpdateCacheModel.organizationid = getOrganizationid();

		qualityUpdateCacheModel.fieldname = getFieldname();

		String fieldname = qualityUpdateCacheModel.fieldname;

		if ((fieldname != null) && (fieldname.length() == 0)) {
			qualityUpdateCacheModel.fieldname = null;
		}

		qualityUpdateCacheModel.value = getValue();

		String value = qualityUpdateCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			qualityUpdateCacheModel.value = null;
		}

		return qualityUpdateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{coreid=");
		sb.append(getCoreid());
		sb.append(", organizationid=");
		sb.append(getOrganizationid());
		sb.append(", fieldname=");
		sb.append(getFieldname());
		sb.append(", value=");
		sb.append(getValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("at.rdconnect.update.model.QualityUpdate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>coreid</column-name><column-value><![CDATA[");
		sb.append(getCoreid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationid</column-name><column-value><![CDATA[");
		sb.append(getOrganizationid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldname</column-name><column-value><![CDATA[");
		sb.append(getFieldname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = QualityUpdate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			QualityUpdate.class
		};
	private long _coreid;
	private long _organizationid;
	private long _originalOrganizationid;
	private boolean _setOriginalOrganizationid;
	private String _fieldname;
	private String _value;
	private long _columnBitmask;
	private QualityUpdate _escapedModel;
}