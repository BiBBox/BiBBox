/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.rdconnect.update.model.impl;

import at.rdconnect.update.model.AddressUpdate;
import at.rdconnect.update.model.AddressUpdateModel;
import at.rdconnect.update.model.AddressUpdateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AddressUpdate service. Represents a row in the &quot;rdconnect.u_address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.rdconnect.update.model.AddressUpdateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressUpdateImpl}.
 * </p>
 *
 * @author reihsr
 * @see AddressUpdateImpl
 * @see at.rdconnect.update.model.AddressUpdate
 * @see at.rdconnect.update.model.AddressUpdateModel
 * @generated
 */
@JSON(strict = true)
public class AddressUpdateModelImpl extends BaseModelImpl<AddressUpdate>
	implements AddressUpdateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a address update model instance should use the {@link at.rdconnect.update.model.AddressUpdate} interface instead.
	 */
	public static final String TABLE_NAME = "rdconnect.u_address";
	public static final Object[][] TABLE_COLUMNS = {
			{ "addressid", Types.BIGINT },
			{ "street1", Types.VARCHAR },
			{ "street2", Types.VARCHAR },
			{ "street3", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "zip", Types.VARCHAR },
			{ "regionid", Types.BIGINT },
			{ "contryid", Types.BIGINT },
			{ "typeid", Types.BIGINT },
			{ "mailing", Types.BOOLEAN },
			{ "primary_ad", Types.BOOLEAN },
			{ "organizationid", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table rdconnect.u_address (addressid LONG not null primary key,street1 VARCHAR(75) null,street2 VARCHAR(75) null,street3 VARCHAR(75) null,city VARCHAR(75) null,zip VARCHAR(75) null,regionid LONG,contryid LONG,typeid LONG,mailing BOOLEAN,primary_ad BOOLEAN,organizationid LONG)";
	public static final String TABLE_SQL_DROP = "drop table rdconnect.u_address";
	public static final String ORDER_BY_JPQL = " ORDER BY addressUpdate.organizationid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rdconnect.u_address.organizationid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.rdconnect.update.model.AddressUpdate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.rdconnect.update.model.AddressUpdate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.rdconnect.update.model.AddressUpdate"),
			true);
	public static long ORGANIZATIONID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AddressUpdate toModel(AddressUpdateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AddressUpdate model = new AddressUpdateImpl();

		model.setAddressid(soapModel.getAddressid());
		model.setStreet1(soapModel.getStreet1());
		model.setStreet2(soapModel.getStreet2());
		model.setStreet3(soapModel.getStreet3());
		model.setCity(soapModel.getCity());
		model.setZip(soapModel.getZip());
		model.setRegionid(soapModel.getRegionid());
		model.setContryid(soapModel.getContryid());
		model.setTypeid(soapModel.getTypeid());
		model.setMailing(soapModel.getMailing());
		model.setPrimary_ad(soapModel.getPrimary_ad());
		model.setOrganizationid(soapModel.getOrganizationid());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AddressUpdate> toModels(AddressUpdateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AddressUpdate> models = new ArrayList<AddressUpdate>(soapModels.length);

		for (AddressUpdateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.rdconnect.update.model.AddressUpdate"));

	public AddressUpdateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addressid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddressid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addressid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AddressUpdate.class;
	}

	@Override
	public String getModelClassName() {
		return AddressUpdate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("addressid", getAddressid());
		attributes.put("street1", getStreet1());
		attributes.put("street2", getStreet2());
		attributes.put("street3", getStreet3());
		attributes.put("city", getCity());
		attributes.put("zip", getZip());
		attributes.put("regionid", getRegionid());
		attributes.put("contryid", getContryid());
		attributes.put("typeid", getTypeid());
		attributes.put("mailing", getMailing());
		attributes.put("primary_ad", getPrimary_ad());
		attributes.put("organizationid", getOrganizationid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long addressid = (Long)attributes.get("addressid");

		if (addressid != null) {
			setAddressid(addressid);
		}

		String street1 = (String)attributes.get("street1");

		if (street1 != null) {
			setStreet1(street1);
		}

		String street2 = (String)attributes.get("street2");

		if (street2 != null) {
			setStreet2(street2);
		}

		String street3 = (String)attributes.get("street3");

		if (street3 != null) {
			setStreet3(street3);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String zip = (String)attributes.get("zip");

		if (zip != null) {
			setZip(zip);
		}

		Long regionid = (Long)attributes.get("regionid");

		if (regionid != null) {
			setRegionid(regionid);
		}

		Long contryid = (Long)attributes.get("contryid");

		if (contryid != null) {
			setContryid(contryid);
		}

		Long typeid = (Long)attributes.get("typeid");

		if (typeid != null) {
			setTypeid(typeid);
		}

		Boolean mailing = (Boolean)attributes.get("mailing");

		if (mailing != null) {
			setMailing(mailing);
		}

		Boolean primary_ad = (Boolean)attributes.get("primary_ad");

		if (primary_ad != null) {
			setPrimary_ad(primary_ad);
		}

		Long organizationid = (Long)attributes.get("organizationid");

		if (organizationid != null) {
			setOrganizationid(organizationid);
		}
	}

	@JSON
	@Override
	public long getAddressid() {
		return _addressid;
	}

	@Override
	public void setAddressid(long addressid) {
		_addressid = addressid;
	}

	@JSON
	@Override
	public String getStreet1() {
		if (_street1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _street1;
		}
	}

	@Override
	public void setStreet1(String street1) {
		_street1 = street1;
	}

	@JSON
	@Override
	public String getStreet2() {
		if (_street2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _street2;
		}
	}

	@Override
	public void setStreet2(String street2) {
		_street2 = street2;
	}

	@JSON
	@Override
	public String getStreet3() {
		if (_street3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _street3;
		}
	}

	@Override
	public void setStreet3(String street3) {
		_street3 = street3;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getZip() {
		if (_zip == null) {
			return StringPool.BLANK;
		}
		else {
			return _zip;
		}
	}

	@Override
	public void setZip(String zip) {
		_zip = zip;
	}

	@JSON
	@Override
	public long getRegionid() {
		return _regionid;
	}

	@Override
	public void setRegionid(long regionid) {
		_regionid = regionid;
	}

	@JSON
	@Override
	public long getContryid() {
		return _contryid;
	}

	@Override
	public void setContryid(long contryid) {
		_contryid = contryid;
	}

	@JSON
	@Override
	public long getTypeid() {
		return _typeid;
	}

	@Override
	public void setTypeid(long typeid) {
		_typeid = typeid;
	}

	@JSON
	@Override
	public boolean getMailing() {
		return _mailing;
	}

	@Override
	public boolean isMailing() {
		return _mailing;
	}

	@Override
	public void setMailing(boolean mailing) {
		_mailing = mailing;
	}

	@JSON
	@Override
	public boolean getPrimary_ad() {
		return _primary_ad;
	}

	@Override
	public boolean isPrimary_ad() {
		return _primary_ad;
	}

	@Override
	public void setPrimary_ad(boolean primary_ad) {
		_primary_ad = primary_ad;
	}

	@JSON
	@Override
	public long getOrganizationid() {
		return _organizationid;
	}

	@Override
	public void setOrganizationid(long organizationid) {
		_columnBitmask = -1L;

		if (!_setOriginalOrganizationid) {
			_setOriginalOrganizationid = true;

			_originalOrganizationid = _organizationid;
		}

		_organizationid = organizationid;
	}

	public long getOriginalOrganizationid() {
		return _originalOrganizationid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AddressUpdate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AddressUpdate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AddressUpdate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddressUpdateImpl addressUpdateImpl = new AddressUpdateImpl();

		addressUpdateImpl.setAddressid(getAddressid());
		addressUpdateImpl.setStreet1(getStreet1());
		addressUpdateImpl.setStreet2(getStreet2());
		addressUpdateImpl.setStreet3(getStreet3());
		addressUpdateImpl.setCity(getCity());
		addressUpdateImpl.setZip(getZip());
		addressUpdateImpl.setRegionid(getRegionid());
		addressUpdateImpl.setContryid(getContryid());
		addressUpdateImpl.setTypeid(getTypeid());
		addressUpdateImpl.setMailing(getMailing());
		addressUpdateImpl.setPrimary_ad(getPrimary_ad());
		addressUpdateImpl.setOrganizationid(getOrganizationid());

		addressUpdateImpl.resetOriginalValues();

		return addressUpdateImpl;
	}

	@Override
	public int compareTo(AddressUpdate addressUpdate) {
		int value = 0;

		if (getOrganizationid() < addressUpdate.getOrganizationid()) {
			value = -1;
		}
		else if (getOrganizationid() > addressUpdate.getOrganizationid()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AddressUpdate)) {
			return false;
		}

		AddressUpdate addressUpdate = (AddressUpdate)obj;

		long primaryKey = addressUpdate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AddressUpdateModelImpl addressUpdateModelImpl = this;

		addressUpdateModelImpl._originalOrganizationid = addressUpdateModelImpl._organizationid;

		addressUpdateModelImpl._setOriginalOrganizationid = false;

		addressUpdateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AddressUpdate> toCacheModel() {
		AddressUpdateCacheModel addressUpdateCacheModel = new AddressUpdateCacheModel();

		addressUpdateCacheModel.addressid = getAddressid();

		addressUpdateCacheModel.street1 = getStreet1();

		String street1 = addressUpdateCacheModel.street1;

		if ((street1 != null) && (street1.length() == 0)) {
			addressUpdateCacheModel.street1 = null;
		}

		addressUpdateCacheModel.street2 = getStreet2();

		String street2 = addressUpdateCacheModel.street2;

		if ((street2 != null) && (street2.length() == 0)) {
			addressUpdateCacheModel.street2 = null;
		}

		addressUpdateCacheModel.street3 = getStreet3();

		String street3 = addressUpdateCacheModel.street3;

		if ((street3 != null) && (street3.length() == 0)) {
			addressUpdateCacheModel.street3 = null;
		}

		addressUpdateCacheModel.city = getCity();

		String city = addressUpdateCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			addressUpdateCacheModel.city = null;
		}

		addressUpdateCacheModel.zip = getZip();

		String zip = addressUpdateCacheModel.zip;

		if ((zip != null) && (zip.length() == 0)) {
			addressUpdateCacheModel.zip = null;
		}

		addressUpdateCacheModel.regionid = getRegionid();

		addressUpdateCacheModel.contryid = getContryid();

		addressUpdateCacheModel.typeid = getTypeid();

		addressUpdateCacheModel.mailing = getMailing();

		addressUpdateCacheModel.primary_ad = getPrimary_ad();

		addressUpdateCacheModel.organizationid = getOrganizationid();

		return addressUpdateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{addressid=");
		sb.append(getAddressid());
		sb.append(", street1=");
		sb.append(getStreet1());
		sb.append(", street2=");
		sb.append(getStreet2());
		sb.append(", street3=");
		sb.append(getStreet3());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", zip=");
		sb.append(getZip());
		sb.append(", regionid=");
		sb.append(getRegionid());
		sb.append(", contryid=");
		sb.append(getContryid());
		sb.append(", typeid=");
		sb.append(getTypeid());
		sb.append(", mailing=");
		sb.append(getMailing());
		sb.append(", primary_ad=");
		sb.append(getPrimary_ad());
		sb.append(", organizationid=");
		sb.append(getOrganizationid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("at.rdconnect.update.model.AddressUpdate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>addressid</column-name><column-value><![CDATA[");
		sb.append(getAddressid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street1</column-name><column-value><![CDATA[");
		sb.append(getStreet1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street2</column-name><column-value><![CDATA[");
		sb.append(getStreet2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street3</column-name><column-value><![CDATA[");
		sb.append(getStreet3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zip</column-name><column-value><![CDATA[");
		sb.append(getZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionid</column-name><column-value><![CDATA[");
		sb.append(getRegionid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contryid</column-name><column-value><![CDATA[");
		sb.append(getContryid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeid</column-name><column-value><![CDATA[");
		sb.append(getTypeid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mailing</column-name><column-value><![CDATA[");
		sb.append(getMailing());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primary_ad</column-name><column-value><![CDATA[");
		sb.append(getPrimary_ad());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationid</column-name><column-value><![CDATA[");
		sb.append(getOrganizationid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AddressUpdate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AddressUpdate.class
		};
	private long _addressid;
	private String _street1;
	private String _street2;
	private String _street3;
	private String _city;
	private String _zip;
	private long _regionid;
	private long _contryid;
	private long _typeid;
	private boolean _mailing;
	private boolean _primary_ad;
	private long _organizationid;
	private long _originalOrganizationid;
	private boolean _setOriginalOrganizationid;
	private long _columnBitmask;
	private AddressUpdate _escapedModel;
}