/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRules;
import at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRulesModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the KdssmpRules service. Represents a row in the &quot;kdssmp.rules&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRulesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KdssmpRulesImpl}.
 * </p>
 *
 * @author reihsr
 * @see KdssmpRulesImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRules
 * @see at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRulesModel
 * @generated
 */
public class KdssmpRulesModelImpl extends BaseModelImpl<KdssmpRules>
	implements KdssmpRulesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kdssmp rules model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRules} interface instead.
	 */
	public static final String TABLE_NAME = "kdssmp.rules";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ruleId", Types.BIGINT },
			{ "rule", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table kdssmp.rules (ruleId LONG not null primary key,rule VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table kdssmp.rules";
	public static final String ORDER_BY_JPQL = " ORDER BY kdssmpRules.ruleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY kdssmp.rules.ruleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRules"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRules"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRules"));

	public KdssmpRulesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ruleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRuleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ruleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KdssmpRules.class;
	}

	@Override
	public String getModelClassName() {
		return KdssmpRules.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ruleId", getRuleId());
		attributes.put("rule", getRule());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ruleId = (Long)attributes.get("ruleId");

		if (ruleId != null) {
			setRuleId(ruleId);
		}

		String rule = (String)attributes.get("rule");

		if (rule != null) {
			setRule(rule);
		}
	}

	@Override
	public long getRuleId() {
		return _ruleId;
	}

	@Override
	public void setRuleId(long ruleId) {
		_ruleId = ruleId;
	}

	@Override
	public String getRule() {
		if (_rule == null) {
			return StringPool.BLANK;
		}
		else {
			return _rule;
		}
	}

	@Override
	public void setRule(String rule) {
		_rule = rule;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KdssmpRules.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KdssmpRules toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KdssmpRules)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KdssmpRulesImpl kdssmpRulesImpl = new KdssmpRulesImpl();

		kdssmpRulesImpl.setRuleId(getRuleId());
		kdssmpRulesImpl.setRule(getRule());

		kdssmpRulesImpl.resetOriginalValues();

		return kdssmpRulesImpl;
	}

	@Override
	public int compareTo(KdssmpRules kdssmpRules) {
		long primaryKey = kdssmpRules.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KdssmpRules)) {
			return false;
		}

		KdssmpRules kdssmpRules = (KdssmpRules)obj;

		long primaryKey = kdssmpRules.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<KdssmpRules> toCacheModel() {
		KdssmpRulesCacheModel kdssmpRulesCacheModel = new KdssmpRulesCacheModel();

		kdssmpRulesCacheModel.ruleId = getRuleId();

		kdssmpRulesCacheModel.rule = getRule();

		String rule = kdssmpRulesCacheModel.rule;

		if ((rule != null) && (rule.length() == 0)) {
			kdssmpRulesCacheModel.rule = null;
		}

		return kdssmpRulesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{ruleId=");
		sb.append(getRuleId());
		sb.append(", rule=");
		sb.append(getRule());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpRules");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ruleId</column-name><column-value><![CDATA[");
		sb.append(getRuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rule</column-name><column-value><![CDATA[");
		sb.append(getRule());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KdssmpRules.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			KdssmpRules.class
		};
	private long _ruleId;
	private String _rule;
	private KdssmpRules _escapedModel;
}