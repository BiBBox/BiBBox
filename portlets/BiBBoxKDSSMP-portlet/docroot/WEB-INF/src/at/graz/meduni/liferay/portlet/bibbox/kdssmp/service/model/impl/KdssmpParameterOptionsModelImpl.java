/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptions;
import at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptionsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the KdssmpParameterOptions service. Represents a row in the &quot;kdssmp.parameteroptions&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KdssmpParameterOptionsImpl}.
 * </p>
 *
 * @author reihsr
 * @see KdssmpParameterOptionsImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptions
 * @see at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptionsModel
 * @generated
 */
public class KdssmpParameterOptionsModelImpl extends BaseModelImpl<KdssmpParameterOptions>
	implements KdssmpParameterOptionsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kdssmp parameter options model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptions} interface instead.
	 */
	public static final String TABLE_NAME = "kdssmp.parameteroptions";
	public static final Object[][] TABLE_COLUMNS = {
			{ "parameteroptionsId", Types.BIGINT },
			{ "parameterconfigurationId", Types.BIGINT },
			{ "option_", Types.VARCHAR },
			{ "value", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table kdssmp.parameteroptions (parameteroptionsId LONG not null primary key,parameterconfigurationId LONG,option_ VARCHAR(75) null,value VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table kdssmp.parameteroptions";
	public static final String ORDER_BY_JPQL = " ORDER BY kdssmpParameterOptions.parameteroptionsId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY kdssmp.parameteroptions.parameteroptionsId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptions"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptions"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptions"),
			true);
	public static long PARAMETERCONFIGURATIONID_COLUMN_BITMASK = 1L;
	public static long PARAMETEROPTIONSID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptions"));

	public KdssmpParameterOptionsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _parameteroptionsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setParameteroptionsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _parameteroptionsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KdssmpParameterOptions.class;
	}

	@Override
	public String getModelClassName() {
		return KdssmpParameterOptions.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("parameteroptionsId", getParameteroptionsId());
		attributes.put("parameterconfigurationId", getParameterconfigurationId());
		attributes.put("option", getOption());
		attributes.put("value", getValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long parameteroptionsId = (Long)attributes.get("parameteroptionsId");

		if (parameteroptionsId != null) {
			setParameteroptionsId(parameteroptionsId);
		}

		Long parameterconfigurationId = (Long)attributes.get(
				"parameterconfigurationId");

		if (parameterconfigurationId != null) {
			setParameterconfigurationId(parameterconfigurationId);
		}

		String option = (String)attributes.get("option");

		if (option != null) {
			setOption(option);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}
	}

	@Override
	public long getParameteroptionsId() {
		return _parameteroptionsId;
	}

	@Override
	public void setParameteroptionsId(long parameteroptionsId) {
		_parameteroptionsId = parameteroptionsId;
	}

	@Override
	public long getParameterconfigurationId() {
		return _parameterconfigurationId;
	}

	@Override
	public void setParameterconfigurationId(long parameterconfigurationId) {
		_columnBitmask |= PARAMETERCONFIGURATIONID_COLUMN_BITMASK;

		if (!_setOriginalParameterconfigurationId) {
			_setOriginalParameterconfigurationId = true;

			_originalParameterconfigurationId = _parameterconfigurationId;
		}

		_parameterconfigurationId = parameterconfigurationId;
	}

	public long getOriginalParameterconfigurationId() {
		return _originalParameterconfigurationId;
	}

	@Override
	public String getOption() {
		if (_option == null) {
			return StringPool.BLANK;
		}
		else {
			return _option;
		}
	}

	@Override
	public void setOption(String option) {
		_option = option;
	}

	@Override
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KdssmpParameterOptions.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KdssmpParameterOptions toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KdssmpParameterOptions)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KdssmpParameterOptionsImpl kdssmpParameterOptionsImpl = new KdssmpParameterOptionsImpl();

		kdssmpParameterOptionsImpl.setParameteroptionsId(getParameteroptionsId());
		kdssmpParameterOptionsImpl.setParameterconfigurationId(getParameterconfigurationId());
		kdssmpParameterOptionsImpl.setOption(getOption());
		kdssmpParameterOptionsImpl.setValue(getValue());

		kdssmpParameterOptionsImpl.resetOriginalValues();

		return kdssmpParameterOptionsImpl;
	}

	@Override
	public int compareTo(KdssmpParameterOptions kdssmpParameterOptions) {
		long primaryKey = kdssmpParameterOptions.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KdssmpParameterOptions)) {
			return false;
		}

		KdssmpParameterOptions kdssmpParameterOptions = (KdssmpParameterOptions)obj;

		long primaryKey = kdssmpParameterOptions.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		KdssmpParameterOptionsModelImpl kdssmpParameterOptionsModelImpl = this;

		kdssmpParameterOptionsModelImpl._originalParameterconfigurationId = kdssmpParameterOptionsModelImpl._parameterconfigurationId;

		kdssmpParameterOptionsModelImpl._setOriginalParameterconfigurationId = false;

		kdssmpParameterOptionsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<KdssmpParameterOptions> toCacheModel() {
		KdssmpParameterOptionsCacheModel kdssmpParameterOptionsCacheModel = new KdssmpParameterOptionsCacheModel();

		kdssmpParameterOptionsCacheModel.parameteroptionsId = getParameteroptionsId();

		kdssmpParameterOptionsCacheModel.parameterconfigurationId = getParameterconfigurationId();

		kdssmpParameterOptionsCacheModel.option = getOption();

		String option = kdssmpParameterOptionsCacheModel.option;

		if ((option != null) && (option.length() == 0)) {
			kdssmpParameterOptionsCacheModel.option = null;
		}

		kdssmpParameterOptionsCacheModel.value = getValue();

		String value = kdssmpParameterOptionsCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			kdssmpParameterOptionsCacheModel.value = null;
		}

		return kdssmpParameterOptionsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{parameteroptionsId=");
		sb.append(getParameteroptionsId());
		sb.append(", parameterconfigurationId=");
		sb.append(getParameterconfigurationId());
		sb.append(", option=");
		sb.append(getOption());
		sb.append(", value=");
		sb.append(getValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterOptions");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>parameteroptionsId</column-name><column-value><![CDATA[");
		sb.append(getParameteroptionsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parameterconfigurationId</column-name><column-value><![CDATA[");
		sb.append(getParameterconfigurationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>option</column-name><column-value><![CDATA[");
		sb.append(getOption());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KdssmpParameterOptions.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			KdssmpParameterOptions.class
		};
	private long _parameteroptionsId;
	private long _parameterconfigurationId;
	private long _originalParameterconfigurationId;
	private boolean _setOriginalParameterconfigurationId;
	private String _option;
	private String _value;
	private long _columnBitmask;
	private KdssmpParameterOptions _escapedModel;
}