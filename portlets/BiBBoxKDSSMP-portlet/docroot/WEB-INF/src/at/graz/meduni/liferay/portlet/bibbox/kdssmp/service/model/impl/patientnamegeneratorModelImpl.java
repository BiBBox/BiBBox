/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegenerator;
import at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegeneratorModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the patientnamegenerator service. Represents a row in the &quot;kdssmp.patientnamegenerator&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegeneratorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link patientnamegeneratorImpl}.
 * </p>
 *
 * @author reihsr
 * @see patientnamegeneratorImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegenerator
 * @see at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegeneratorModel
 * @generated
 */
public class patientnamegeneratorModelImpl extends BaseModelImpl<patientnamegenerator>
	implements patientnamegeneratorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a patientnamegenerator model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegenerator} interface instead.
	 */
	public static final String TABLE_NAME = "kdssmp.patientnamegenerator";
	public static final Object[][] TABLE_COLUMNS = {
			{ "patientnamegeneratorId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "type_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table kdssmp.patientnamegenerator (patientnamegeneratorId LONG not null primary key,name VARCHAR(75) null,type_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table kdssmp.patientnamegenerator";
	public static final String ORDER_BY_JPQL = " ORDER BY patientnamegenerator.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY kdssmp.patientnamegenerator.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegenerator"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegenerator"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegenerator"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;
	public static long TYPE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegenerator"));

	public patientnamegeneratorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _patientnamegeneratorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPatientnamegeneratorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _patientnamegeneratorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return patientnamegenerator.class;
	}

	@Override
	public String getModelClassName() {
		return patientnamegenerator.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("patientnamegeneratorId", getPatientnamegeneratorId());
		attributes.put("name", getName());
		attributes.put("type", getType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long patientnamegeneratorId = (Long)attributes.get(
				"patientnamegeneratorId");

		if (patientnamegeneratorId != null) {
			setPatientnamegeneratorId(patientnamegeneratorId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}
	}

	@Override
	public long getPatientnamegeneratorId() {
		return _patientnamegeneratorId;
	}

	@Override
	public void setPatientnamegeneratorId(long patientnamegeneratorId) {
		_patientnamegeneratorId = patientnamegeneratorId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			patientnamegenerator.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public patientnamegenerator toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (patientnamegenerator)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		patientnamegeneratorImpl patientnamegeneratorImpl = new patientnamegeneratorImpl();

		patientnamegeneratorImpl.setPatientnamegeneratorId(getPatientnamegeneratorId());
		patientnamegeneratorImpl.setName(getName());
		patientnamegeneratorImpl.setType(getType());

		patientnamegeneratorImpl.resetOriginalValues();

		return patientnamegeneratorImpl;
	}

	@Override
	public int compareTo(patientnamegenerator patientnamegenerator) {
		int value = 0;

		value = getName().compareTo(patientnamegenerator.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof patientnamegenerator)) {
			return false;
		}

		patientnamegenerator patientnamegenerator = (patientnamegenerator)obj;

		long primaryKey = patientnamegenerator.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		patientnamegeneratorModelImpl patientnamegeneratorModelImpl = this;

		patientnamegeneratorModelImpl._originalName = patientnamegeneratorModelImpl._name;

		patientnamegeneratorModelImpl._originalType = patientnamegeneratorModelImpl._type;

		patientnamegeneratorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<patientnamegenerator> toCacheModel() {
		patientnamegeneratorCacheModel patientnamegeneratorCacheModel = new patientnamegeneratorCacheModel();

		patientnamegeneratorCacheModel.patientnamegeneratorId = getPatientnamegeneratorId();

		patientnamegeneratorCacheModel.name = getName();

		String name = patientnamegeneratorCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			patientnamegeneratorCacheModel.name = null;
		}

		patientnamegeneratorCacheModel.type = getType();

		String type = patientnamegeneratorCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			patientnamegeneratorCacheModel.type = null;
		}

		return patientnamegeneratorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{patientnamegeneratorId=");
		sb.append(getPatientnamegeneratorId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.patientnamegenerator");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>patientnamegeneratorId</column-name><column-value><![CDATA[");
		sb.append(getPatientnamegeneratorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = patientnamegenerator.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			patientnamegenerator.class
		};
	private long _patientnamegeneratorId;
	private String _name;
	private String _originalName;
	private String _type;
	private String _originalType;
	private long _columnBitmask;
	private patientnamegenerator _escapedModel;
}