/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfiguration;
import at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfigurationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the KdssmpParameterConfiguration service. Represents a row in the &quot;kdssmp.parameterconfiguration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KdssmpParameterConfigurationImpl}.
 * </p>
 *
 * @author reihsr
 * @see KdssmpParameterConfigurationImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfiguration
 * @see at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfigurationModel
 * @generated
 */
public class KdssmpParameterConfigurationModelImpl extends BaseModelImpl<KdssmpParameterConfiguration>
	implements KdssmpParameterConfigurationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a kdssmp parameter configuration model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfiguration} interface instead.
	 */
	public static final String TABLE_NAME = "kdssmp.parameterconfiguration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "parameterconfigurationId", Types.BIGINT },
			{ "displayname", Types.VARCHAR },
			{ "datatype", Types.VARCHAR },
			{ "valuerange", Types.VARCHAR },
			{ "displayoptions", Types.VARCHAR },
			{ "visible", Types.VARCHAR },
			{ "computed", Types.VARCHAR },
			{ "confirmationscript", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table kdssmp.parameterconfiguration (parameterconfigurationId LONG not null primary key,displayname VARCHAR(75) null,datatype VARCHAR(75) null,valuerange VARCHAR(75) null,displayoptions VARCHAR(75) null,visible VARCHAR(75) null,computed VARCHAR(75) null,confirmationscript VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table kdssmp.parameterconfiguration";
	public static final String ORDER_BY_JPQL = " ORDER BY kdssmpParameterConfiguration.parameterconfigurationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY kdssmp.parameterconfiguration.parameterconfigurationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfiguration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfiguration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfiguration"));

	public KdssmpParameterConfigurationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _parameterconfigurationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setParameterconfigurationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _parameterconfigurationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KdssmpParameterConfiguration.class;
	}

	@Override
	public String getModelClassName() {
		return KdssmpParameterConfiguration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("parameterconfigurationId", getParameterconfigurationId());
		attributes.put("displayname", getDisplayname());
		attributes.put("datatype", getDatatype());
		attributes.put("valuerange", getValuerange());
		attributes.put("displayoptions", getDisplayoptions());
		attributes.put("visible", getVisible());
		attributes.put("computed", getComputed());
		attributes.put("confirmationscript", getConfirmationscript());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long parameterconfigurationId = (Long)attributes.get(
				"parameterconfigurationId");

		if (parameterconfigurationId != null) {
			setParameterconfigurationId(parameterconfigurationId);
		}

		String displayname = (String)attributes.get("displayname");

		if (displayname != null) {
			setDisplayname(displayname);
		}

		String datatype = (String)attributes.get("datatype");

		if (datatype != null) {
			setDatatype(datatype);
		}

		String valuerange = (String)attributes.get("valuerange");

		if (valuerange != null) {
			setValuerange(valuerange);
		}

		String displayoptions = (String)attributes.get("displayoptions");

		if (displayoptions != null) {
			setDisplayoptions(displayoptions);
		}

		String visible = (String)attributes.get("visible");

		if (visible != null) {
			setVisible(visible);
		}

		String computed = (String)attributes.get("computed");

		if (computed != null) {
			setComputed(computed);
		}

		String confirmationscript = (String)attributes.get("confirmationscript");

		if (confirmationscript != null) {
			setConfirmationscript(confirmationscript);
		}
	}

	@Override
	public long getParameterconfigurationId() {
		return _parameterconfigurationId;
	}

	@Override
	public void setParameterconfigurationId(long parameterconfigurationId) {
		_parameterconfigurationId = parameterconfigurationId;
	}

	@Override
	public String getDisplayname() {
		if (_displayname == null) {
			return StringPool.BLANK;
		}
		else {
			return _displayname;
		}
	}

	@Override
	public void setDisplayname(String displayname) {
		_displayname = displayname;
	}

	@Override
	public String getDatatype() {
		if (_datatype == null) {
			return StringPool.BLANK;
		}
		else {
			return _datatype;
		}
	}

	@Override
	public void setDatatype(String datatype) {
		_datatype = datatype;
	}

	@Override
	public String getValuerange() {
		if (_valuerange == null) {
			return StringPool.BLANK;
		}
		else {
			return _valuerange;
		}
	}

	@Override
	public void setValuerange(String valuerange) {
		_valuerange = valuerange;
	}

	@Override
	public String getDisplayoptions() {
		if (_displayoptions == null) {
			return StringPool.BLANK;
		}
		else {
			return _displayoptions;
		}
	}

	@Override
	public void setDisplayoptions(String displayoptions) {
		_displayoptions = displayoptions;
	}

	@Override
	public String getVisible() {
		if (_visible == null) {
			return StringPool.BLANK;
		}
		else {
			return _visible;
		}
	}

	@Override
	public void setVisible(String visible) {
		_visible = visible;
	}

	@Override
	public String getComputed() {
		if (_computed == null) {
			return StringPool.BLANK;
		}
		else {
			return _computed;
		}
	}

	@Override
	public void setComputed(String computed) {
		_computed = computed;
	}

	@Override
	public String getConfirmationscript() {
		if (_confirmationscript == null) {
			return StringPool.BLANK;
		}
		else {
			return _confirmationscript;
		}
	}

	@Override
	public void setConfirmationscript(String confirmationscript) {
		_confirmationscript = confirmationscript;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KdssmpParameterConfiguration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KdssmpParameterConfiguration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KdssmpParameterConfiguration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KdssmpParameterConfigurationImpl kdssmpParameterConfigurationImpl = new KdssmpParameterConfigurationImpl();

		kdssmpParameterConfigurationImpl.setParameterconfigurationId(getParameterconfigurationId());
		kdssmpParameterConfigurationImpl.setDisplayname(getDisplayname());
		kdssmpParameterConfigurationImpl.setDatatype(getDatatype());
		kdssmpParameterConfigurationImpl.setValuerange(getValuerange());
		kdssmpParameterConfigurationImpl.setDisplayoptions(getDisplayoptions());
		kdssmpParameterConfigurationImpl.setVisible(getVisible());
		kdssmpParameterConfigurationImpl.setComputed(getComputed());
		kdssmpParameterConfigurationImpl.setConfirmationscript(getConfirmationscript());

		kdssmpParameterConfigurationImpl.resetOriginalValues();

		return kdssmpParameterConfigurationImpl;
	}

	@Override
	public int compareTo(
		KdssmpParameterConfiguration kdssmpParameterConfiguration) {
		long primaryKey = kdssmpParameterConfiguration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KdssmpParameterConfiguration)) {
			return false;
		}

		KdssmpParameterConfiguration kdssmpParameterConfiguration = (KdssmpParameterConfiguration)obj;

		long primaryKey = kdssmpParameterConfiguration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<KdssmpParameterConfiguration> toCacheModel() {
		KdssmpParameterConfigurationCacheModel kdssmpParameterConfigurationCacheModel =
			new KdssmpParameterConfigurationCacheModel();

		kdssmpParameterConfigurationCacheModel.parameterconfigurationId = getParameterconfigurationId();

		kdssmpParameterConfigurationCacheModel.displayname = getDisplayname();

		String displayname = kdssmpParameterConfigurationCacheModel.displayname;

		if ((displayname != null) && (displayname.length() == 0)) {
			kdssmpParameterConfigurationCacheModel.displayname = null;
		}

		kdssmpParameterConfigurationCacheModel.datatype = getDatatype();

		String datatype = kdssmpParameterConfigurationCacheModel.datatype;

		if ((datatype != null) && (datatype.length() == 0)) {
			kdssmpParameterConfigurationCacheModel.datatype = null;
		}

		kdssmpParameterConfigurationCacheModel.valuerange = getValuerange();

		String valuerange = kdssmpParameterConfigurationCacheModel.valuerange;

		if ((valuerange != null) && (valuerange.length() == 0)) {
			kdssmpParameterConfigurationCacheModel.valuerange = null;
		}

		kdssmpParameterConfigurationCacheModel.displayoptions = getDisplayoptions();

		String displayoptions = kdssmpParameterConfigurationCacheModel.displayoptions;

		if ((displayoptions != null) && (displayoptions.length() == 0)) {
			kdssmpParameterConfigurationCacheModel.displayoptions = null;
		}

		kdssmpParameterConfigurationCacheModel.visible = getVisible();

		String visible = kdssmpParameterConfigurationCacheModel.visible;

		if ((visible != null) && (visible.length() == 0)) {
			kdssmpParameterConfigurationCacheModel.visible = null;
		}

		kdssmpParameterConfigurationCacheModel.computed = getComputed();

		String computed = kdssmpParameterConfigurationCacheModel.computed;

		if ((computed != null) && (computed.length() == 0)) {
			kdssmpParameterConfigurationCacheModel.computed = null;
		}

		kdssmpParameterConfigurationCacheModel.confirmationscript = getConfirmationscript();

		String confirmationscript = kdssmpParameterConfigurationCacheModel.confirmationscript;

		if ((confirmationscript != null) && (confirmationscript.length() == 0)) {
			kdssmpParameterConfigurationCacheModel.confirmationscript = null;
		}

		return kdssmpParameterConfigurationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{parameterconfigurationId=");
		sb.append(getParameterconfigurationId());
		sb.append(", displayname=");
		sb.append(getDisplayname());
		sb.append(", datatype=");
		sb.append(getDatatype());
		sb.append(", valuerange=");
		sb.append(getValuerange());
		sb.append(", displayoptions=");
		sb.append(getDisplayoptions());
		sb.append(", visible=");
		sb.append(getVisible());
		sb.append(", computed=");
		sb.append(getComputed());
		sb.append(", confirmationscript=");
		sb.append(getConfirmationscript());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.kdssmp.service.model.KdssmpParameterConfiguration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>parameterconfigurationId</column-name><column-value><![CDATA[");
		sb.append(getParameterconfigurationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayname</column-name><column-value><![CDATA[");
		sb.append(getDisplayname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>datatype</column-name><column-value><![CDATA[");
		sb.append(getDatatype());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>valuerange</column-name><column-value><![CDATA[");
		sb.append(getValuerange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayoptions</column-name><column-value><![CDATA[");
		sb.append(getDisplayoptions());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visible</column-name><column-value><![CDATA[");
		sb.append(getVisible());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>computed</column-name><column-value><![CDATA[");
		sb.append(getComputed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>confirmationscript</column-name><column-value><![CDATA[");
		sb.append(getConfirmationscript());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KdssmpParameterConfiguration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			KdssmpParameterConfiguration.class
		};
	private long _parameterconfigurationId;
	private String _displayname;
	private String _datatype;
	private String _valuerange;
	private String _displayoptions;
	private String _visible;
	private String _computed;
	private String _confirmationscript;
	private KdssmpParameterConfiguration _escapedModel;
}