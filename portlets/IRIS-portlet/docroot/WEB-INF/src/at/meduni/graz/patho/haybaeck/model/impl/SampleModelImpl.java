/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.meduni.graz.patho.haybaeck.model.impl;

import at.meduni.graz.patho.haybaeck.model.Sample;
import at.meduni.graz.patho.haybaeck.model.SampleModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Sample service. Represents a row in the &quot;haybaeck.sample&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.meduni.graz.patho.haybaeck.model.SampleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SampleImpl}.
 * </p>
 *
 * @author reihsr
 * @see SampleImpl
 * @see at.meduni.graz.patho.haybaeck.model.Sample
 * @see at.meduni.graz.patho.haybaeck.model.SampleModel
 * @generated
 */
public class SampleModelImpl extends BaseModelImpl<Sample>
	implements SampleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sample model instance should use the {@link at.meduni.graz.patho.haybaeck.model.Sample} interface instead.
	 */
	public static final String TABLE_NAME = "haybaeck.sample";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "patient_id", Types.BIGINT },
			{ "t", Types.VARCHAR },
			{ "n", Types.VARCHAR },
			{ "m", Types.VARCHAR },
			{ "g", Types.VARCHAR },
			{ "r", Types.VARCHAR },
			{ "p", Types.VARCHAR },
			{ "l", Types.VARCHAR },
			{ "v", Types.VARCHAR },
			{ "stage", Types.VARCHAR },
			{ "operation", Types.VARCHAR },
			{ "post_op_treatment", Types.VARCHAR },
			{ "recurrence", Types.BOOLEAN },
			{ "recurrence_date", Types.TIMESTAMP },
			{ "dead_live", Types.VARCHAR },
			{ "last_follow_up_date", Types.TIMESTAMP },
			{ "hospital", Types.VARCHAR },
			{ "tnm_staging", Types.VARCHAR },
			{ "diagnosis", Types.VARCHAR },
			{ "operation_date", Types.TIMESTAMP },
			{ "tmp_identifier", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table haybaeck.sample (id LONG not null primary key,patient_id LONG,t VARCHAR(75) null,n VARCHAR(75) null,m VARCHAR(75) null,g VARCHAR(75) null,r VARCHAR(75) null,p VARCHAR(75) null,l VARCHAR(75) null,v VARCHAR(75) null,stage VARCHAR(75) null,operation VARCHAR(75) null,post_op_treatment VARCHAR(75) null,recurrence BOOLEAN,recurrence_date DATE null,dead_live VARCHAR(75) null,last_follow_up_date DATE null,hospital VARCHAR(75) null,tnm_staging VARCHAR(75) null,diagnosis VARCHAR(75) null,operation_date DATE null,tmp_identifier VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table haybaeck.sample";
	public static final String ORDER_BY_JPQL = " ORDER BY sample.sample_Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY haybaeck.sample.id ASC";
	public static final String DATA_SOURCE = "haybaeckDataSource";
	public static final String SESSION_FACTORY = "haybaeckSessionFactory";
	public static final String TX_MANAGER = "haybaeckTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.meduni.graz.patho.haybaeck.model.Sample"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.meduni.graz.patho.haybaeck.model.Sample"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.meduni.graz.patho.haybaeck.model.Sample"));

	public SampleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sample_Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSample_Id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sample_Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Sample.class;
	}

	@Override
	public String getModelClassName() {
		return Sample.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sample_Id", getSample_Id());
		attributes.put("patient_id", getPatient_id());
		attributes.put("t", getT());
		attributes.put("n", getN());
		attributes.put("m", getM());
		attributes.put("g", getG());
		attributes.put("r", getR());
		attributes.put("p", getP());
		attributes.put("l", getL());
		attributes.put("v", getV());
		attributes.put("stage", getStage());
		attributes.put("operation", getOperation());
		attributes.put("post_op_treatment", getPost_op_treatment());
		attributes.put("recurrence", getRecurrence());
		attributes.put("recurrence_date", getRecurrence_date());
		attributes.put("dead_live", getDead_live());
		attributes.put("last_follow_up_date", getLast_follow_up_date());
		attributes.put("hospital", getHospital());
		attributes.put("tnm_staging", getTnm_staging());
		attributes.put("diagnosis", getDiagnosis());
		attributes.put("operation_date", getOperation_date());
		attributes.put("tmp_identifier", getTmp_identifier());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long sample_Id = (Long)attributes.get("sample_Id");

		if (sample_Id != null) {
			setSample_Id(sample_Id);
		}

		Long patient_id = (Long)attributes.get("patient_id");

		if (patient_id != null) {
			setPatient_id(patient_id);
		}

		String t = (String)attributes.get("t");

		if (t != null) {
			setT(t);
		}

		String n = (String)attributes.get("n");

		if (n != null) {
			setN(n);
		}

		String m = (String)attributes.get("m");

		if (m != null) {
			setM(m);
		}

		String g = (String)attributes.get("g");

		if (g != null) {
			setG(g);
		}

		String r = (String)attributes.get("r");

		if (r != null) {
			setR(r);
		}

		String p = (String)attributes.get("p");

		if (p != null) {
			setP(p);
		}

		String l = (String)attributes.get("l");

		if (l != null) {
			setL(l);
		}

		String v = (String)attributes.get("v");

		if (v != null) {
			setV(v);
		}

		String stage = (String)attributes.get("stage");

		if (stage != null) {
			setStage(stage);
		}

		String operation = (String)attributes.get("operation");

		if (operation != null) {
			setOperation(operation);
		}

		String post_op_treatment = (String)attributes.get("post_op_treatment");

		if (post_op_treatment != null) {
			setPost_op_treatment(post_op_treatment);
		}

		Boolean recurrence = (Boolean)attributes.get("recurrence");

		if (recurrence != null) {
			setRecurrence(recurrence);
		}

		Date recurrence_date = (Date)attributes.get("recurrence_date");

		if (recurrence_date != null) {
			setRecurrence_date(recurrence_date);
		}

		String dead_live = (String)attributes.get("dead_live");

		if (dead_live != null) {
			setDead_live(dead_live);
		}

		Date last_follow_up_date = (Date)attributes.get("last_follow_up_date");

		if (last_follow_up_date != null) {
			setLast_follow_up_date(last_follow_up_date);
		}

		String hospital = (String)attributes.get("hospital");

		if (hospital != null) {
			setHospital(hospital);
		}

		String tnm_staging = (String)attributes.get("tnm_staging");

		if (tnm_staging != null) {
			setTnm_staging(tnm_staging);
		}

		String diagnosis = (String)attributes.get("diagnosis");

		if (diagnosis != null) {
			setDiagnosis(diagnosis);
		}

		Date operation_date = (Date)attributes.get("operation_date");

		if (operation_date != null) {
			setOperation_date(operation_date);
		}

		String tmp_identifier = (String)attributes.get("tmp_identifier");

		if (tmp_identifier != null) {
			setTmp_identifier(tmp_identifier);
		}
	}

	@Override
	public long getSample_Id() {
		return _sample_Id;
	}

	@Override
	public void setSample_Id(long sample_Id) {
		_sample_Id = sample_Id;
	}

	@Override
	public long getPatient_id() {
		return _patient_id;
	}

	@Override
	public void setPatient_id(long patient_id) {
		_patient_id = patient_id;
	}

	@Override
	public String getT() {
		if (_t == null) {
			return StringPool.BLANK;
		}
		else {
			return _t;
		}
	}

	@Override
	public void setT(String t) {
		_t = t;
	}

	@Override
	public String getN() {
		if (_n == null) {
			return StringPool.BLANK;
		}
		else {
			return _n;
		}
	}

	@Override
	public void setN(String n) {
		_n = n;
	}

	@Override
	public String getM() {
		if (_m == null) {
			return StringPool.BLANK;
		}
		else {
			return _m;
		}
	}

	@Override
	public void setM(String m) {
		_m = m;
	}

	@Override
	public String getG() {
		if (_g == null) {
			return StringPool.BLANK;
		}
		else {
			return _g;
		}
	}

	@Override
	public void setG(String g) {
		_g = g;
	}

	@Override
	public String getR() {
		if (_r == null) {
			return StringPool.BLANK;
		}
		else {
			return _r;
		}
	}

	@Override
	public void setR(String r) {
		_r = r;
	}

	@Override
	public String getP() {
		if (_p == null) {
			return StringPool.BLANK;
		}
		else {
			return _p;
		}
	}

	@Override
	public void setP(String p) {
		_p = p;
	}

	@Override
	public String getL() {
		if (_l == null) {
			return StringPool.BLANK;
		}
		else {
			return _l;
		}
	}

	@Override
	public void setL(String l) {
		_l = l;
	}

	@Override
	public String getV() {
		if (_v == null) {
			return StringPool.BLANK;
		}
		else {
			return _v;
		}
	}

	@Override
	public void setV(String v) {
		_v = v;
	}

	@Override
	public String getStage() {
		if (_stage == null) {
			return StringPool.BLANK;
		}
		else {
			return _stage;
		}
	}

	@Override
	public void setStage(String stage) {
		_stage = stage;
	}

	@Override
	public String getOperation() {
		if (_operation == null) {
			return StringPool.BLANK;
		}
		else {
			return _operation;
		}
	}

	@Override
	public void setOperation(String operation) {
		_operation = operation;
	}

	@Override
	public String getPost_op_treatment() {
		if (_post_op_treatment == null) {
			return StringPool.BLANK;
		}
		else {
			return _post_op_treatment;
		}
	}

	@Override
	public void setPost_op_treatment(String post_op_treatment) {
		_post_op_treatment = post_op_treatment;
	}

	@Override
	public boolean getRecurrence() {
		return _recurrence;
	}

	@Override
	public boolean isRecurrence() {
		return _recurrence;
	}

	@Override
	public void setRecurrence(boolean recurrence) {
		_recurrence = recurrence;
	}

	@Override
	public Date getRecurrence_date() {
		return _recurrence_date;
	}

	@Override
	public void setRecurrence_date(Date recurrence_date) {
		_recurrence_date = recurrence_date;
	}

	@Override
	public String getDead_live() {
		if (_dead_live == null) {
			return StringPool.BLANK;
		}
		else {
			return _dead_live;
		}
	}

	@Override
	public void setDead_live(String dead_live) {
		_dead_live = dead_live;
	}

	@Override
	public Date getLast_follow_up_date() {
		return _last_follow_up_date;
	}

	@Override
	public void setLast_follow_up_date(Date last_follow_up_date) {
		_last_follow_up_date = last_follow_up_date;
	}

	@Override
	public String getHospital() {
		if (_hospital == null) {
			return StringPool.BLANK;
		}
		else {
			return _hospital;
		}
	}

	@Override
	public void setHospital(String hospital) {
		_hospital = hospital;
	}

	@Override
	public String getTnm_staging() {
		if (_tnm_staging == null) {
			return StringPool.BLANK;
		}
		else {
			return _tnm_staging;
		}
	}

	@Override
	public void setTnm_staging(String tnm_staging) {
		_tnm_staging = tnm_staging;
	}

	@Override
	public String getDiagnosis() {
		if (_diagnosis == null) {
			return StringPool.BLANK;
		}
		else {
			return _diagnosis;
		}
	}

	@Override
	public void setDiagnosis(String diagnosis) {
		_diagnosis = diagnosis;
	}

	@Override
	public Date getOperation_date() {
		return _operation_date;
	}

	@Override
	public void setOperation_date(Date operation_date) {
		_operation_date = operation_date;
	}

	@Override
	public String getTmp_identifier() {
		if (_tmp_identifier == null) {
			return StringPool.BLANK;
		}
		else {
			return _tmp_identifier;
		}
	}

	@Override
	public void setTmp_identifier(String tmp_identifier) {
		_tmp_identifier = tmp_identifier;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Sample.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Sample toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Sample)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SampleImpl sampleImpl = new SampleImpl();

		sampleImpl.setSample_Id(getSample_Id());
		sampleImpl.setPatient_id(getPatient_id());
		sampleImpl.setT(getT());
		sampleImpl.setN(getN());
		sampleImpl.setM(getM());
		sampleImpl.setG(getG());
		sampleImpl.setR(getR());
		sampleImpl.setP(getP());
		sampleImpl.setL(getL());
		sampleImpl.setV(getV());
		sampleImpl.setStage(getStage());
		sampleImpl.setOperation(getOperation());
		sampleImpl.setPost_op_treatment(getPost_op_treatment());
		sampleImpl.setRecurrence(getRecurrence());
		sampleImpl.setRecurrence_date(getRecurrence_date());
		sampleImpl.setDead_live(getDead_live());
		sampleImpl.setLast_follow_up_date(getLast_follow_up_date());
		sampleImpl.setHospital(getHospital());
		sampleImpl.setTnm_staging(getTnm_staging());
		sampleImpl.setDiagnosis(getDiagnosis());
		sampleImpl.setOperation_date(getOperation_date());
		sampleImpl.setTmp_identifier(getTmp_identifier());

		sampleImpl.resetOriginalValues();

		return sampleImpl;
	}

	@Override
	public int compareTo(Sample sample) {
		long primaryKey = sample.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Sample)) {
			return false;
		}

		Sample sample = (Sample)obj;

		long primaryKey = sample.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Sample> toCacheModel() {
		SampleCacheModel sampleCacheModel = new SampleCacheModel();

		sampleCacheModel.sample_Id = getSample_Id();

		sampleCacheModel.patient_id = getPatient_id();

		sampleCacheModel.t = getT();

		String t = sampleCacheModel.t;

		if ((t != null) && (t.length() == 0)) {
			sampleCacheModel.t = null;
		}

		sampleCacheModel.n = getN();

		String n = sampleCacheModel.n;

		if ((n != null) && (n.length() == 0)) {
			sampleCacheModel.n = null;
		}

		sampleCacheModel.m = getM();

		String m = sampleCacheModel.m;

		if ((m != null) && (m.length() == 0)) {
			sampleCacheModel.m = null;
		}

		sampleCacheModel.g = getG();

		String g = sampleCacheModel.g;

		if ((g != null) && (g.length() == 0)) {
			sampleCacheModel.g = null;
		}

		sampleCacheModel.r = getR();

		String r = sampleCacheModel.r;

		if ((r != null) && (r.length() == 0)) {
			sampleCacheModel.r = null;
		}

		sampleCacheModel.p = getP();

		String p = sampleCacheModel.p;

		if ((p != null) && (p.length() == 0)) {
			sampleCacheModel.p = null;
		}

		sampleCacheModel.l = getL();

		String l = sampleCacheModel.l;

		if ((l != null) && (l.length() == 0)) {
			sampleCacheModel.l = null;
		}

		sampleCacheModel.v = getV();

		String v = sampleCacheModel.v;

		if ((v != null) && (v.length() == 0)) {
			sampleCacheModel.v = null;
		}

		sampleCacheModel.stage = getStage();

		String stage = sampleCacheModel.stage;

		if ((stage != null) && (stage.length() == 0)) {
			sampleCacheModel.stage = null;
		}

		sampleCacheModel.operation = getOperation();

		String operation = sampleCacheModel.operation;

		if ((operation != null) && (operation.length() == 0)) {
			sampleCacheModel.operation = null;
		}

		sampleCacheModel.post_op_treatment = getPost_op_treatment();

		String post_op_treatment = sampleCacheModel.post_op_treatment;

		if ((post_op_treatment != null) && (post_op_treatment.length() == 0)) {
			sampleCacheModel.post_op_treatment = null;
		}

		sampleCacheModel.recurrence = getRecurrence();

		Date recurrence_date = getRecurrence_date();

		if (recurrence_date != null) {
			sampleCacheModel.recurrence_date = recurrence_date.getTime();
		}
		else {
			sampleCacheModel.recurrence_date = Long.MIN_VALUE;
		}

		sampleCacheModel.dead_live = getDead_live();

		String dead_live = sampleCacheModel.dead_live;

		if ((dead_live != null) && (dead_live.length() == 0)) {
			sampleCacheModel.dead_live = null;
		}

		Date last_follow_up_date = getLast_follow_up_date();

		if (last_follow_up_date != null) {
			sampleCacheModel.last_follow_up_date = last_follow_up_date.getTime();
		}
		else {
			sampleCacheModel.last_follow_up_date = Long.MIN_VALUE;
		}

		sampleCacheModel.hospital = getHospital();

		String hospital = sampleCacheModel.hospital;

		if ((hospital != null) && (hospital.length() == 0)) {
			sampleCacheModel.hospital = null;
		}

		sampleCacheModel.tnm_staging = getTnm_staging();

		String tnm_staging = sampleCacheModel.tnm_staging;

		if ((tnm_staging != null) && (tnm_staging.length() == 0)) {
			sampleCacheModel.tnm_staging = null;
		}

		sampleCacheModel.diagnosis = getDiagnosis();

		String diagnosis = sampleCacheModel.diagnosis;

		if ((diagnosis != null) && (diagnosis.length() == 0)) {
			sampleCacheModel.diagnosis = null;
		}

		Date operation_date = getOperation_date();

		if (operation_date != null) {
			sampleCacheModel.operation_date = operation_date.getTime();
		}
		else {
			sampleCacheModel.operation_date = Long.MIN_VALUE;
		}

		sampleCacheModel.tmp_identifier = getTmp_identifier();

		String tmp_identifier = sampleCacheModel.tmp_identifier;

		if ((tmp_identifier != null) && (tmp_identifier.length() == 0)) {
			sampleCacheModel.tmp_identifier = null;
		}

		return sampleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{sample_Id=");
		sb.append(getSample_Id());
		sb.append(", patient_id=");
		sb.append(getPatient_id());
		sb.append(", t=");
		sb.append(getT());
		sb.append(", n=");
		sb.append(getN());
		sb.append(", m=");
		sb.append(getM());
		sb.append(", g=");
		sb.append(getG());
		sb.append(", r=");
		sb.append(getR());
		sb.append(", p=");
		sb.append(getP());
		sb.append(", l=");
		sb.append(getL());
		sb.append(", v=");
		sb.append(getV());
		sb.append(", stage=");
		sb.append(getStage());
		sb.append(", operation=");
		sb.append(getOperation());
		sb.append(", post_op_treatment=");
		sb.append(getPost_op_treatment());
		sb.append(", recurrence=");
		sb.append(getRecurrence());
		sb.append(", recurrence_date=");
		sb.append(getRecurrence_date());
		sb.append(", dead_live=");
		sb.append(getDead_live());
		sb.append(", last_follow_up_date=");
		sb.append(getLast_follow_up_date());
		sb.append(", hospital=");
		sb.append(getHospital());
		sb.append(", tnm_staging=");
		sb.append(getTnm_staging());
		sb.append(", diagnosis=");
		sb.append(getDiagnosis());
		sb.append(", operation_date=");
		sb.append(getOperation_date());
		sb.append(", tmp_identifier=");
		sb.append(getTmp_identifier());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("at.meduni.graz.patho.haybaeck.model.Sample");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sample_Id</column-name><column-value><![CDATA[");
		sb.append(getSample_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patient_id</column-name><column-value><![CDATA[");
		sb.append(getPatient_id());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>t</column-name><column-value><![CDATA[");
		sb.append(getT());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>n</column-name><column-value><![CDATA[");
		sb.append(getN());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>m</column-name><column-value><![CDATA[");
		sb.append(getM());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>g</column-name><column-value><![CDATA[");
		sb.append(getG());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>r</column-name><column-value><![CDATA[");
		sb.append(getR());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>p</column-name><column-value><![CDATA[");
		sb.append(getP());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>l</column-name><column-value><![CDATA[");
		sb.append(getL());
		sb.append("]]></column-value></column>");
		sb.append("<column><column-name>v</column-name><column-value><![CDATA[");
		sb.append(getV());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stage</column-name><column-value><![CDATA[");
		sb.append(getStage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operation</column-name><column-value><![CDATA[");
		sb.append(getOperation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>post_op_treatment</column-name><column-value><![CDATA[");
		sb.append(getPost_op_treatment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recurrence</column-name><column-value><![CDATA[");
		sb.append(getRecurrence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recurrence_date</column-name><column-value><![CDATA[");
		sb.append(getRecurrence_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dead_live</column-name><column-value><![CDATA[");
		sb.append(getDead_live());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>last_follow_up_date</column-name><column-value><![CDATA[");
		sb.append(getLast_follow_up_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hospital</column-name><column-value><![CDATA[");
		sb.append(getHospital());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tnm_staging</column-name><column-value><![CDATA[");
		sb.append(getTnm_staging());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diagnosis</column-name><column-value><![CDATA[");
		sb.append(getDiagnosis());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operation_date</column-name><column-value><![CDATA[");
		sb.append(getOperation_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tmp_identifier</column-name><column-value><![CDATA[");
		sb.append(getTmp_identifier());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Sample.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Sample.class };
	private long _sample_Id;
	private long _patient_id;
	private String _t;
	private String _n;
	private String _m;
	private String _g;
	private String _r;
	private String _p;
	private String _l;
	private String _v;
	private String _stage;
	private String _operation;
	private String _post_op_treatment;
	private boolean _recurrence;
	private Date _recurrence_date;
	private String _dead_live;
	private Date _last_follow_up_date;
	private String _hospital;
	private String _tnm_staging;
	private String _diagnosis;
	private Date _operation_date;
	private String _tmp_identifier;
	private Sample _escapedModel;
}