/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.service.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.service.model.Networks;
import at.graz.meduni.liferay.portlet.bibbox.service.model.NetworksModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Networks service. Represents a row in the &quot;rdconnect.networks&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.service.model.NetworksModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NetworksImpl}.
 * </p>
 *
 * @author reihsr
 * @see NetworksImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.service.model.Networks
 * @see at.graz.meduni.liferay.portlet.bibbox.service.model.NetworksModel
 * @generated
 */
public class NetworksModelImpl extends BaseModelImpl<Networks>
	implements NetworksModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a networks model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.service.model.Networks} interface instead.
	 */
	public static final String TABLE_NAME = "rdconnect.networks";
	public static final Object[][] TABLE_COLUMNS = {
			{ "networkId", Types.BIGINT },
			{ "organizationnetworkId", Types.BIGINT },
			{ "organizationId", Types.BIGINT },
			{ "relation", Types.VARCHAR },
			{ "yearofestablishment", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table rdconnect.networks (networkId LONG not null primary key,organizationnetworkId LONG,organizationId LONG,relation VARCHAR(75) null,yearofestablishment VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table rdconnect.networks";
	public static final String ORDER_BY_JPQL = " ORDER BY networks.networkId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rdconnect.networks.networkId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.Networks"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.Networks"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.service.model.Networks"));

	public NetworksModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _networkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNetworkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _networkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Networks.class;
	}

	@Override
	public String getModelClassName() {
		return Networks.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("networkId", getNetworkId());
		attributes.put("organizationnetworkId", getOrganizationnetworkId());
		attributes.put("organizationId", getOrganizationId());
		attributes.put("relation", getRelation());
		attributes.put("yearofestablishment", getYearofestablishment());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long networkId = (Long)attributes.get("networkId");

		if (networkId != null) {
			setNetworkId(networkId);
		}

		Long organizationnetworkId = (Long)attributes.get(
				"organizationnetworkId");

		if (organizationnetworkId != null) {
			setOrganizationnetworkId(organizationnetworkId);
		}

		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		String relation = (String)attributes.get("relation");

		if (relation != null) {
			setRelation(relation);
		}

		String yearofestablishment = (String)attributes.get(
				"yearofestablishment");

		if (yearofestablishment != null) {
			setYearofestablishment(yearofestablishment);
		}
	}

	@Override
	public long getNetworkId() {
		return _networkId;
	}

	@Override
	public void setNetworkId(long networkId) {
		_networkId = networkId;
	}

	@Override
	public long getOrganizationnetworkId() {
		return _organizationnetworkId;
	}

	@Override
	public void setOrganizationnetworkId(long organizationnetworkId) {
		_organizationnetworkId = organizationnetworkId;
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_organizationId = organizationId;
	}

	@Override
	public String getRelation() {
		if (_relation == null) {
			return StringPool.BLANK;
		}
		else {
			return _relation;
		}
	}

	@Override
	public void setRelation(String relation) {
		_relation = relation;
	}

	@Override
	public String getYearofestablishment() {
		if (_yearofestablishment == null) {
			return StringPool.BLANK;
		}
		else {
			return _yearofestablishment;
		}
	}

	@Override
	public void setYearofestablishment(String yearofestablishment) {
		_yearofestablishment = yearofestablishment;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Networks.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Networks toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Networks)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NetworksImpl networksImpl = new NetworksImpl();

		networksImpl.setNetworkId(getNetworkId());
		networksImpl.setOrganizationnetworkId(getOrganizationnetworkId());
		networksImpl.setOrganizationId(getOrganizationId());
		networksImpl.setRelation(getRelation());
		networksImpl.setYearofestablishment(getYearofestablishment());

		networksImpl.resetOriginalValues();

		return networksImpl;
	}

	@Override
	public int compareTo(Networks networks) {
		long primaryKey = networks.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Networks)) {
			return false;
		}

		Networks networks = (Networks)obj;

		long primaryKey = networks.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Networks> toCacheModel() {
		NetworksCacheModel networksCacheModel = new NetworksCacheModel();

		networksCacheModel.networkId = getNetworkId();

		networksCacheModel.organizationnetworkId = getOrganizationnetworkId();

		networksCacheModel.organizationId = getOrganizationId();

		networksCacheModel.relation = getRelation();

		String relation = networksCacheModel.relation;

		if ((relation != null) && (relation.length() == 0)) {
			networksCacheModel.relation = null;
		}

		networksCacheModel.yearofestablishment = getYearofestablishment();

		String yearofestablishment = networksCacheModel.yearofestablishment;

		if ((yearofestablishment != null) &&
				(yearofestablishment.length() == 0)) {
			networksCacheModel.yearofestablishment = null;
		}

		return networksCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{networkId=");
		sb.append(getNetworkId());
		sb.append(", organizationnetworkId=");
		sb.append(getOrganizationnetworkId());
		sb.append(", organizationId=");
		sb.append(getOrganizationId());
		sb.append(", relation=");
		sb.append(getRelation());
		sb.append(", yearofestablishment=");
		sb.append(getYearofestablishment());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.service.model.Networks");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>networkId</column-name><column-value><![CDATA[");
		sb.append(getNetworkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationnetworkId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationnetworkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relation</column-name><column-value><![CDATA[");
		sb.append(getRelation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yearofestablishment</column-name><column-value><![CDATA[");
		sb.append(getYearofestablishment());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Networks.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Networks.class
		};
	private long _networkId;
	private long _organizationnetworkId;
	private long _organizationId;
	private String _relation;
	private String _yearofestablishment;
	private Networks _escapedModel;
}