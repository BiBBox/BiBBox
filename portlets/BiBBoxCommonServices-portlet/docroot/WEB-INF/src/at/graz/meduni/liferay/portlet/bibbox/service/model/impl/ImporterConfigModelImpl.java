/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.service.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfig;
import at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfigModel;
import at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfigSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ImporterConfig service. Represents a row in the &quot;rdconnect.importerconfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImporterConfigImpl}.
 * </p>
 *
 * @author reihsr
 * @see ImporterConfigImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfig
 * @see at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfigModel
 * @generated
 */
@JSON(strict = true)
public class ImporterConfigModelImpl extends BaseModelImpl<ImporterConfig>
	implements ImporterConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a importer config model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfig} interface instead.
	 */
	public static final String TABLE_NAME = "rdconnect.importerconfig";
	public static final Object[][] TABLE_COLUMNS = {
			{ "importerconfigId", Types.BIGINT },
			{ "scope", Types.VARCHAR },
			{ "elementId", Types.VARCHAR },
			{ "elementvalue", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table rdconnect.importerconfig (importerconfigId LONG not null primary key,scope VARCHAR(75) null,elementId VARCHAR(75) null,elementvalue VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table rdconnect.importerconfig";
	public static final String ORDER_BY_JPQL = " ORDER BY importerConfig.importerconfigId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rdconnect.importerconfig.importerconfigId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfig"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfig"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfig"),
			true);
	public static long ELEMENTID_COLUMN_BITMASK = 1L;
	public static long SCOPE_COLUMN_BITMASK = 2L;
	public static long IMPORTERCONFIGID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ImporterConfig toModel(ImporterConfigSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ImporterConfig model = new ImporterConfigImpl();

		model.setImporterconfigId(soapModel.getImporterconfigId());
		model.setScope(soapModel.getScope());
		model.setElementId(soapModel.getElementId());
		model.setElementvalue(soapModel.getElementvalue());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ImporterConfig> toModels(ImporterConfigSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ImporterConfig> models = new ArrayList<ImporterConfig>(soapModels.length);

		for (ImporterConfigSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfig"));

	public ImporterConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _importerconfigId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setImporterconfigId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _importerconfigId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImporterConfig.class;
	}

	@Override
	public String getModelClassName() {
		return ImporterConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("importerconfigId", getImporterconfigId());
		attributes.put("scope", getScope());
		attributes.put("elementId", getElementId());
		attributes.put("elementvalue", getElementvalue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long importerconfigId = (Long)attributes.get("importerconfigId");

		if (importerconfigId != null) {
			setImporterconfigId(importerconfigId);
		}

		String scope = (String)attributes.get("scope");

		if (scope != null) {
			setScope(scope);
		}

		String elementId = (String)attributes.get("elementId");

		if (elementId != null) {
			setElementId(elementId);
		}

		String elementvalue = (String)attributes.get("elementvalue");

		if (elementvalue != null) {
			setElementvalue(elementvalue);
		}
	}

	@JSON
	@Override
	public long getImporterconfigId() {
		return _importerconfigId;
	}

	@Override
	public void setImporterconfigId(long importerconfigId) {
		_importerconfigId = importerconfigId;
	}

	@JSON
	@Override
	public String getScope() {
		if (_scope == null) {
			return StringPool.BLANK;
		}
		else {
			return _scope;
		}
	}

	@Override
	public void setScope(String scope) {
		_columnBitmask |= SCOPE_COLUMN_BITMASK;

		if (_originalScope == null) {
			_originalScope = _scope;
		}

		_scope = scope;
	}

	public String getOriginalScope() {
		return GetterUtil.getString(_originalScope);
	}

	@JSON
	@Override
	public String getElementId() {
		if (_elementId == null) {
			return StringPool.BLANK;
		}
		else {
			return _elementId;
		}
	}

	@Override
	public void setElementId(String elementId) {
		_columnBitmask |= ELEMENTID_COLUMN_BITMASK;

		if (_originalElementId == null) {
			_originalElementId = _elementId;
		}

		_elementId = elementId;
	}

	public String getOriginalElementId() {
		return GetterUtil.getString(_originalElementId);
	}

	@JSON
	@Override
	public String getElementvalue() {
		if (_elementvalue == null) {
			return StringPool.BLANK;
		}
		else {
			return _elementvalue;
		}
	}

	@Override
	public void setElementvalue(String elementvalue) {
		_elementvalue = elementvalue;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ImporterConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImporterConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ImporterConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImporterConfigImpl importerConfigImpl = new ImporterConfigImpl();

		importerConfigImpl.setImporterconfigId(getImporterconfigId());
		importerConfigImpl.setScope(getScope());
		importerConfigImpl.setElementId(getElementId());
		importerConfigImpl.setElementvalue(getElementvalue());

		importerConfigImpl.resetOriginalValues();

		return importerConfigImpl;
	}

	@Override
	public int compareTo(ImporterConfig importerConfig) {
		long primaryKey = importerConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImporterConfig)) {
			return false;
		}

		ImporterConfig importerConfig = (ImporterConfig)obj;

		long primaryKey = importerConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ImporterConfigModelImpl importerConfigModelImpl = this;

		importerConfigModelImpl._originalScope = importerConfigModelImpl._scope;

		importerConfigModelImpl._originalElementId = importerConfigModelImpl._elementId;

		importerConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ImporterConfig> toCacheModel() {
		ImporterConfigCacheModel importerConfigCacheModel = new ImporterConfigCacheModel();

		importerConfigCacheModel.importerconfigId = getImporterconfigId();

		importerConfigCacheModel.scope = getScope();

		String scope = importerConfigCacheModel.scope;

		if ((scope != null) && (scope.length() == 0)) {
			importerConfigCacheModel.scope = null;
		}

		importerConfigCacheModel.elementId = getElementId();

		String elementId = importerConfigCacheModel.elementId;

		if ((elementId != null) && (elementId.length() == 0)) {
			importerConfigCacheModel.elementId = null;
		}

		importerConfigCacheModel.elementvalue = getElementvalue();

		String elementvalue = importerConfigCacheModel.elementvalue;

		if ((elementvalue != null) && (elementvalue.length() == 0)) {
			importerConfigCacheModel.elementvalue = null;
		}

		return importerConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{importerconfigId=");
		sb.append(getImporterconfigId());
		sb.append(", scope=");
		sb.append(getScope());
		sb.append(", elementId=");
		sb.append(getElementId());
		sb.append(", elementvalue=");
		sb.append(getElementvalue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.service.model.ImporterConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>importerconfigId</column-name><column-value><![CDATA[");
		sb.append(getImporterconfigId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scope</column-name><column-value><![CDATA[");
		sb.append(getScope());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>elementId</column-name><column-value><![CDATA[");
		sb.append(getElementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>elementvalue</column-name><column-value><![CDATA[");
		sb.append(getElementvalue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ImporterConfig.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ImporterConfig.class
		};
	private long _importerconfigId;
	private String _scope;
	private String _originalScope;
	private String _elementId;
	private String _originalElementId;
	private String _elementvalue;
	private long _columnBitmask;
	private ImporterConfig _escapedModel;
}