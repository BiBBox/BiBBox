/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.service.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.service.model.Invitation;
import at.graz.meduni.liferay.portlet.bibbox.service.model.InvitationModel;
import at.graz.meduni.liferay.portlet.bibbox.service.model.InvitationSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Invitation service. Represents a row in the &quot;bibboxcs.invitation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.service.model.InvitationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InvitationImpl}.
 * </p>
 *
 * @author reihsr
 * @see InvitationImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.service.model.Invitation
 * @see at.graz.meduni.liferay.portlet.bibbox.service.model.InvitationModel
 * @generated
 */
@JSON(strict = true)
public class InvitationModelImpl extends BaseModelImpl<Invitation>
	implements InvitationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a invitation model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.service.model.Invitation} interface instead.
	 */
	public static final String TABLE_NAME = "bibboxcs.invitation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "invitationId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "subject", Types.VARCHAR },
			{ "body", Types.VARCHAR },
			{ "status", Types.BIGINT },
			{ "invitationsend", Types.TIMESTAMP },
			{ "lastchanged", Types.TIMESTAMP },
			{ "lastchanger", Types.BIGINT },
			{ "filter", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table bibboxcs.invitation (invitationId LONG not null primary key,name VARCHAR(75) null,subject VARCHAR(255) null,body TEXT null,status LONG,invitationsend DATE null,lastchanged DATE null,lastchanger LONG,filter VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table bibboxcs.invitation";
	public static final String ORDER_BY_JPQL = " ORDER BY invitation.lastchanged DESC";
	public static final String ORDER_BY_SQL = " ORDER BY bibboxcs.invitation.lastchanged DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.Invitation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.Invitation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.Invitation"),
			true);
	public static long FILTER_COLUMN_BITMASK = 1L;
	public static long INVITATIONID_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long LASTCHANGED_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Invitation toModel(InvitationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Invitation model = new InvitationImpl();

		model.setInvitationId(soapModel.getInvitationId());
		model.setName(soapModel.getName());
		model.setSubject(soapModel.getSubject());
		model.setBody(soapModel.getBody());
		model.setStatus(soapModel.getStatus());
		model.setInvitationsend(soapModel.getInvitationsend());
		model.setLastchanged(soapModel.getLastchanged());
		model.setLastchanger(soapModel.getLastchanger());
		model.setFilter(soapModel.getFilter());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Invitation> toModels(InvitationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Invitation> models = new ArrayList<Invitation>(soapModels.length);

		for (InvitationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.service.model.Invitation"));

	public InvitationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _invitationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setInvitationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _invitationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Invitation.class;
	}

	@Override
	public String getModelClassName() {
		return Invitation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("invitationId", getInvitationId());
		attributes.put("name", getName());
		attributes.put("subject", getSubject());
		attributes.put("body", getBody());
		attributes.put("status", getStatus());
		attributes.put("invitationsend", getInvitationsend());
		attributes.put("lastchanged", getLastchanged());
		attributes.put("lastchanger", getLastchanger());
		attributes.put("filter", getFilter());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long invitationId = (Long)attributes.get("invitationId");

		if (invitationId != null) {
			setInvitationId(invitationId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String body = (String)attributes.get("body");

		if (body != null) {
			setBody(body);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Date invitationsend = (Date)attributes.get("invitationsend");

		if (invitationsend != null) {
			setInvitationsend(invitationsend);
		}

		Date lastchanged = (Date)attributes.get("lastchanged");

		if (lastchanged != null) {
			setLastchanged(lastchanged);
		}

		Long lastchanger = (Long)attributes.get("lastchanger");

		if (lastchanger != null) {
			setLastchanger(lastchanger);
		}

		String filter = (String)attributes.get("filter");

		if (filter != null) {
			setFilter(filter);
		}
	}

	@JSON
	@Override
	public long getInvitationId() {
		return _invitationId;
	}

	@Override
	public void setInvitationId(long invitationId) {
		_columnBitmask |= INVITATIONID_COLUMN_BITMASK;

		if (!_setOriginalInvitationId) {
			_setOriginalInvitationId = true;

			_originalInvitationId = _invitationId;
		}

		_invitationId = invitationId;
	}

	public long getOriginalInvitationId() {
		return _originalInvitationId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@JSON
	@Override
	public String getBody() {
		if (_body == null) {
			return StringPool.BLANK;
		}
		else {
			return _body;
		}
	}

	@Override
	public void setBody(String body) {
		_body = body;
	}

	@JSON
	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public long getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public Date getInvitationsend() {
		return _invitationsend;
	}

	@Override
	public void setInvitationsend(Date invitationsend) {
		_invitationsend = invitationsend;
	}

	@JSON
	@Override
	public Date getLastchanged() {
		return _lastchanged;
	}

	@Override
	public void setLastchanged(Date lastchanged) {
		_columnBitmask = -1L;

		_lastchanged = lastchanged;
	}

	@JSON
	@Override
	public long getLastchanger() {
		return _lastchanger;
	}

	@Override
	public void setLastchanger(long lastchanger) {
		_lastchanger = lastchanger;
	}

	@JSON
	@Override
	public String getFilter() {
		if (_filter == null) {
			return StringPool.BLANK;
		}
		else {
			return _filter;
		}
	}

	@Override
	public void setFilter(String filter) {
		_columnBitmask |= FILTER_COLUMN_BITMASK;

		if (_originalFilter == null) {
			_originalFilter = _filter;
		}

		_filter = filter;
	}

	public String getOriginalFilter() {
		return GetterUtil.getString(_originalFilter);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Invitation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Invitation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Invitation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		InvitationImpl invitationImpl = new InvitationImpl();

		invitationImpl.setInvitationId(getInvitationId());
		invitationImpl.setName(getName());
		invitationImpl.setSubject(getSubject());
		invitationImpl.setBody(getBody());
		invitationImpl.setStatus(getStatus());
		invitationImpl.setInvitationsend(getInvitationsend());
		invitationImpl.setLastchanged(getLastchanged());
		invitationImpl.setLastchanger(getLastchanger());
		invitationImpl.setFilter(getFilter());

		invitationImpl.resetOriginalValues();

		return invitationImpl;
	}

	@Override
	public int compareTo(Invitation invitation) {
		int value = 0;

		value = DateUtil.compareTo(getLastchanged(), invitation.getLastchanged());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Invitation)) {
			return false;
		}

		Invitation invitation = (Invitation)obj;

		long primaryKey = invitation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		InvitationModelImpl invitationModelImpl = this;

		invitationModelImpl._originalInvitationId = invitationModelImpl._invitationId;

		invitationModelImpl._setOriginalInvitationId = false;

		invitationModelImpl._originalStatus = invitationModelImpl._status;

		invitationModelImpl._setOriginalStatus = false;

		invitationModelImpl._originalFilter = invitationModelImpl._filter;

		invitationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Invitation> toCacheModel() {
		InvitationCacheModel invitationCacheModel = new InvitationCacheModel();

		invitationCacheModel.invitationId = getInvitationId();

		invitationCacheModel.name = getName();

		String name = invitationCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			invitationCacheModel.name = null;
		}

		invitationCacheModel.subject = getSubject();

		String subject = invitationCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			invitationCacheModel.subject = null;
		}

		invitationCacheModel.body = getBody();

		String body = invitationCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			invitationCacheModel.body = null;
		}

		invitationCacheModel.status = getStatus();

		Date invitationsend = getInvitationsend();

		if (invitationsend != null) {
			invitationCacheModel.invitationsend = invitationsend.getTime();
		}
		else {
			invitationCacheModel.invitationsend = Long.MIN_VALUE;
		}

		Date lastchanged = getLastchanged();

		if (lastchanged != null) {
			invitationCacheModel.lastchanged = lastchanged.getTime();
		}
		else {
			invitationCacheModel.lastchanged = Long.MIN_VALUE;
		}

		invitationCacheModel.lastchanger = getLastchanger();

		invitationCacheModel.filter = getFilter();

		String filter = invitationCacheModel.filter;

		if ((filter != null) && (filter.length() == 0)) {
			invitationCacheModel.filter = null;
		}

		return invitationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{invitationId=");
		sb.append(getInvitationId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", body=");
		sb.append(getBody());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", invitationsend=");
		sb.append(getInvitationsend());
		sb.append(", lastchanged=");
		sb.append(getLastchanged());
		sb.append(", lastchanger=");
		sb.append(getLastchanger());
		sb.append(", filter=");
		sb.append(getFilter());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.service.model.Invitation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>invitationId</column-name><column-value><![CDATA[");
		sb.append(getInvitationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>body</column-name><column-value><![CDATA[");
		sb.append(getBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>invitationsend</column-name><column-value><![CDATA[");
		sb.append(getInvitationsend());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastchanged</column-name><column-value><![CDATA[");
		sb.append(getLastchanged());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastchanger</column-name><column-value><![CDATA[");
		sb.append(getLastchanger());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filter</column-name><column-value><![CDATA[");
		sb.append(getFilter());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Invitation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Invitation.class
		};
	private long _invitationId;
	private long _originalInvitationId;
	private boolean _setOriginalInvitationId;
	private String _name;
	private String _subject;
	private String _body;
	private long _status;
	private long _originalStatus;
	private boolean _setOriginalStatus;
	private Date _invitationsend;
	private Date _lastchanged;
	private long _lastchanger;
	private String _filter;
	private String _originalFilter;
	private long _columnBitmask;
	private Invitation _escapedModel;
}