/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.portlet.bibbox.service.model.impl;

import at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformation;
import at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GeneralInformation service. Represents a row in the &quot;rdconnect.generalgnformation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeneralInformationImpl}.
 * </p>
 *
 * @author reihsr
 * @see GeneralInformationImpl
 * @see at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformation
 * @see at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformationModel
 * @generated
 */
public class GeneralInformationModelImpl extends BaseModelImpl<GeneralInformation>
	implements GeneralInformationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a general information model instance should use the {@link at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformation} interface instead.
	 */
	public static final String TABLE_NAME = "rdconnect.generalgnformation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "generalinformationId", Types.BIGINT },
			{ "organizationId", Types.BIGINT },
			{ "acronym", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "hosteinstitue", Types.VARCHAR },
			{ "typeofhosteinstitue", Types.VARCHAR },
			{ "sourceoffunding", Types.VARCHAR },
			{ "country", Types.VARCHAR },
			{ "targetpopulation", Types.VARCHAR },
			{ "yearofestablishment", Types.VARCHAR },
			{ "howmanyrdsareintheregistrybiobank", Types.VARCHAR },
			{ "percentageofrarediseasesinyourregistrybiobank", Types.VARCHAR },
			{ "ontologies", Types.VARCHAR },
			{ "biomaterialcollected", Types.VARCHAR },
			{ "biomaterialcollectedinbiobank", Types.VARCHAR },
			{ "biomaterialprepared", Types.VARCHAR },
			{ "origionofcollection", Types.VARCHAR },
			{ "useofcollection", Types.VARCHAR },
			{ "associateddataavailable", Types.VARCHAR },
			{ "imagingavailable", Types.VARCHAR },
			{
				"theregistrybiobanksislistedinotherinventoriesnetworks",
				Types.VARCHAR
			},
			{ "modifieddate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table rdconnect.generalgnformation (generalinformationId LONG not null primary key,organizationId LONG,acronym TEXT null,description TEXT null,hosteinstitue TEXT null,typeofhosteinstitue TEXT null,sourceoffunding TEXT null,country TEXT null,targetpopulation TEXT null,yearofestablishment TEXT null,howmanyrdsareintheregistrybiobank TEXT null,percentageofrarediseasesinyourregistrybiobank TEXT null,ontologies TEXT null,biomaterialcollected TEXT null,biomaterialcollectedinbiobank TEXT null,biomaterialprepared TEXT null,origionofcollection TEXT null,useofcollection TEXT null,associateddataavailable TEXT null,imagingavailable TEXT null,theregistrybiobanksislistedinotherinventoriesnetworks TEXT null,modifieddate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table rdconnect.generalgnformation";
	public static final String ORDER_BY_JPQL = " ORDER BY generalInformation.generalinformationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rdconnect.generalgnformation.generalinformationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformation"),
			true);
	public static long ORGANIZATIONID_COLUMN_BITMASK = 1L;
	public static long GENERALINFORMATIONID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformation"));

	public GeneralInformationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _generalinformationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGeneralinformationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _generalinformationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GeneralInformation.class;
	}

	@Override
	public String getModelClassName() {
		return GeneralInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("generalinformationId", getGeneralinformationId());
		attributes.put("organizationId", getOrganizationId());
		attributes.put("acronym", getAcronym());
		attributes.put("description", getDescription());
		attributes.put("hosteinstitue", getHosteinstitue());
		attributes.put("typeofhosteinstitue", getTypeofhosteinstitue());
		attributes.put("sourceoffunding", getSourceoffunding());
		attributes.put("country", getCountry());
		attributes.put("targetpopulation", getTargetpopulation());
		attributes.put("yearofestablishment", getYearofestablishment());
		attributes.put("howmanyrdsareintheregistrybiobank",
			getHowmanyrdsareintheregistrybiobank());
		attributes.put("percentageofrarediseasesinyourregistrybiobank",
			getPercentageofrarediseasesinyourregistrybiobank());
		attributes.put("ontologies", getOntologies());
		attributes.put("biomaterialcollected", getBiomaterialcollected());
		attributes.put("biomaterialcollectedinbiobank",
			getBiomaterialcollectedinbiobank());
		attributes.put("biomaterialprepared", getBiomaterialprepared());
		attributes.put("origionofcollection", getOrigionofcollection());
		attributes.put("useofcollection", getUseofcollection());
		attributes.put("associateddataavailable", getAssociateddataavailable());
		attributes.put("imagingavailable", getImagingavailable());
		attributes.put("theregistrybiobanksislistedinotherinventoriesnetworks",
			getTheregistrybiobanksislistedinotherinventoriesnetworks());
		attributes.put("modifieddate", getModifieddate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long generalinformationId = (Long)attributes.get("generalinformationId");

		if (generalinformationId != null) {
			setGeneralinformationId(generalinformationId);
		}

		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		String acronym = (String)attributes.get("acronym");

		if (acronym != null) {
			setAcronym(acronym);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String hosteinstitue = (String)attributes.get("hosteinstitue");

		if (hosteinstitue != null) {
			setHosteinstitue(hosteinstitue);
		}

		String typeofhosteinstitue = (String)attributes.get(
				"typeofhosteinstitue");

		if (typeofhosteinstitue != null) {
			setTypeofhosteinstitue(typeofhosteinstitue);
		}

		String sourceoffunding = (String)attributes.get("sourceoffunding");

		if (sourceoffunding != null) {
			setSourceoffunding(sourceoffunding);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String targetpopulation = (String)attributes.get("targetpopulation");

		if (targetpopulation != null) {
			setTargetpopulation(targetpopulation);
		}

		String yearofestablishment = (String)attributes.get(
				"yearofestablishment");

		if (yearofestablishment != null) {
			setYearofestablishment(yearofestablishment);
		}

		String howmanyrdsareintheregistrybiobank = (String)attributes.get(
				"howmanyrdsareintheregistrybiobank");

		if (howmanyrdsareintheregistrybiobank != null) {
			setHowmanyrdsareintheregistrybiobank(howmanyrdsareintheregistrybiobank);
		}

		String percentageofrarediseasesinyourregistrybiobank = (String)attributes.get(
				"percentageofrarediseasesinyourregistrybiobank");

		if (percentageofrarediseasesinyourregistrybiobank != null) {
			setPercentageofrarediseasesinyourregistrybiobank(percentageofrarediseasesinyourregistrybiobank);
		}

		String ontologies = (String)attributes.get("ontologies");

		if (ontologies != null) {
			setOntologies(ontologies);
		}

		String biomaterialcollected = (String)attributes.get(
				"biomaterialcollected");

		if (biomaterialcollected != null) {
			setBiomaterialcollected(biomaterialcollected);
		}

		String biomaterialcollectedinbiobank = (String)attributes.get(
				"biomaterialcollectedinbiobank");

		if (biomaterialcollectedinbiobank != null) {
			setBiomaterialcollectedinbiobank(biomaterialcollectedinbiobank);
		}

		String biomaterialprepared = (String)attributes.get(
				"biomaterialprepared");

		if (biomaterialprepared != null) {
			setBiomaterialprepared(biomaterialprepared);
		}

		String origionofcollection = (String)attributes.get(
				"origionofcollection");

		if (origionofcollection != null) {
			setOrigionofcollection(origionofcollection);
		}

		String useofcollection = (String)attributes.get("useofcollection");

		if (useofcollection != null) {
			setUseofcollection(useofcollection);
		}

		String associateddataavailable = (String)attributes.get(
				"associateddataavailable");

		if (associateddataavailable != null) {
			setAssociateddataavailable(associateddataavailable);
		}

		String imagingavailable = (String)attributes.get("imagingavailable");

		if (imagingavailable != null) {
			setImagingavailable(imagingavailable);
		}

		String theregistrybiobanksislistedinotherinventoriesnetworks = (String)attributes.get(
				"theregistrybiobanksislistedinotherinventoriesnetworks");

		if (theregistrybiobanksislistedinotherinventoriesnetworks != null) {
			setTheregistrybiobanksislistedinotherinventoriesnetworks(theregistrybiobanksislistedinotherinventoriesnetworks);
		}

		Date modifieddate = (Date)attributes.get("modifieddate");

		if (modifieddate != null) {
			setModifieddate(modifieddate);
		}
	}

	@Override
	public long getGeneralinformationId() {
		return _generalinformationId;
	}

	@Override
	public void setGeneralinformationId(long generalinformationId) {
		_generalinformationId = generalinformationId;
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@Override
	public String getAcronym() {
		if (_acronym == null) {
			return StringPool.BLANK;
		}
		else {
			return _acronym;
		}
	}

	@Override
	public void setAcronym(String acronym) {
		_acronym = acronym;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getHosteinstitue() {
		if (_hosteinstitue == null) {
			return StringPool.BLANK;
		}
		else {
			return _hosteinstitue;
		}
	}

	@Override
	public void setHosteinstitue(String hosteinstitue) {
		_hosteinstitue = hosteinstitue;
	}

	@Override
	public String getTypeofhosteinstitue() {
		if (_typeofhosteinstitue == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeofhosteinstitue;
		}
	}

	@Override
	public void setTypeofhosteinstitue(String typeofhosteinstitue) {
		_typeofhosteinstitue = typeofhosteinstitue;
	}

	@Override
	public String getSourceoffunding() {
		if (_sourceoffunding == null) {
			return StringPool.BLANK;
		}
		else {
			return _sourceoffunding;
		}
	}

	@Override
	public void setSourceoffunding(String sourceoffunding) {
		_sourceoffunding = sourceoffunding;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getTargetpopulation() {
		if (_targetpopulation == null) {
			return StringPool.BLANK;
		}
		else {
			return _targetpopulation;
		}
	}

	@Override
	public void setTargetpopulation(String targetpopulation) {
		_targetpopulation = targetpopulation;
	}

	@Override
	public String getYearofestablishment() {
		if (_yearofestablishment == null) {
			return StringPool.BLANK;
		}
		else {
			return _yearofestablishment;
		}
	}

	@Override
	public void setYearofestablishment(String yearofestablishment) {
		_yearofestablishment = yearofestablishment;
	}

	@Override
	public String getHowmanyrdsareintheregistrybiobank() {
		if (_howmanyrdsareintheregistrybiobank == null) {
			return StringPool.BLANK;
		}
		else {
			return _howmanyrdsareintheregistrybiobank;
		}
	}

	@Override
	public void setHowmanyrdsareintheregistrybiobank(
		String howmanyrdsareintheregistrybiobank) {
		_howmanyrdsareintheregistrybiobank = howmanyrdsareintheregistrybiobank;
	}

	@Override
	public String getPercentageofrarediseasesinyourregistrybiobank() {
		if (_percentageofrarediseasesinyourregistrybiobank == null) {
			return StringPool.BLANK;
		}
		else {
			return _percentageofrarediseasesinyourregistrybiobank;
		}
	}

	@Override
	public void setPercentageofrarediseasesinyourregistrybiobank(
		String percentageofrarediseasesinyourregistrybiobank) {
		_percentageofrarediseasesinyourregistrybiobank = percentageofrarediseasesinyourregistrybiobank;
	}

	@Override
	public String getOntologies() {
		if (_ontologies == null) {
			return StringPool.BLANK;
		}
		else {
			return _ontologies;
		}
	}

	@Override
	public void setOntologies(String ontologies) {
		_ontologies = ontologies;
	}

	@Override
	public String getBiomaterialcollected() {
		if (_biomaterialcollected == null) {
			return StringPool.BLANK;
		}
		else {
			return _biomaterialcollected;
		}
	}

	@Override
	public void setBiomaterialcollected(String biomaterialcollected) {
		_biomaterialcollected = biomaterialcollected;
	}

	@Override
	public String getBiomaterialcollectedinbiobank() {
		if (_biomaterialcollectedinbiobank == null) {
			return StringPool.BLANK;
		}
		else {
			return _biomaterialcollectedinbiobank;
		}
	}

	@Override
	public void setBiomaterialcollectedinbiobank(
		String biomaterialcollectedinbiobank) {
		_biomaterialcollectedinbiobank = biomaterialcollectedinbiobank;
	}

	@Override
	public String getBiomaterialprepared() {
		if (_biomaterialprepared == null) {
			return StringPool.BLANK;
		}
		else {
			return _biomaterialprepared;
		}
	}

	@Override
	public void setBiomaterialprepared(String biomaterialprepared) {
		_biomaterialprepared = biomaterialprepared;
	}

	@Override
	public String getOrigionofcollection() {
		if (_origionofcollection == null) {
			return StringPool.BLANK;
		}
		else {
			return _origionofcollection;
		}
	}

	@Override
	public void setOrigionofcollection(String origionofcollection) {
		_origionofcollection = origionofcollection;
	}

	@Override
	public String getUseofcollection() {
		if (_useofcollection == null) {
			return StringPool.BLANK;
		}
		else {
			return _useofcollection;
		}
	}

	@Override
	public void setUseofcollection(String useofcollection) {
		_useofcollection = useofcollection;
	}

	@Override
	public String getAssociateddataavailable() {
		if (_associateddataavailable == null) {
			return StringPool.BLANK;
		}
		else {
			return _associateddataavailable;
		}
	}

	@Override
	public void setAssociateddataavailable(String associateddataavailable) {
		_associateddataavailable = associateddataavailable;
	}

	@Override
	public String getImagingavailable() {
		if (_imagingavailable == null) {
			return StringPool.BLANK;
		}
		else {
			return _imagingavailable;
		}
	}

	@Override
	public void setImagingavailable(String imagingavailable) {
		_imagingavailable = imagingavailable;
	}

	@Override
	public String getTheregistrybiobanksislistedinotherinventoriesnetworks() {
		if (_theregistrybiobanksislistedinotherinventoriesnetworks == null) {
			return StringPool.BLANK;
		}
		else {
			return _theregistrybiobanksislistedinotherinventoriesnetworks;
		}
	}

	@Override
	public void setTheregistrybiobanksislistedinotherinventoriesnetworks(
		String theregistrybiobanksislistedinotherinventoriesnetworks) {
		_theregistrybiobanksislistedinotherinventoriesnetworks = theregistrybiobanksislistedinotherinventoriesnetworks;
	}

	@Override
	public Date getModifieddate() {
		return _modifieddate;
	}

	@Override
	public void setModifieddate(Date modifieddate) {
		_modifieddate = modifieddate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GeneralInformation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GeneralInformation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GeneralInformation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeneralInformationImpl generalInformationImpl = new GeneralInformationImpl();

		generalInformationImpl.setGeneralinformationId(getGeneralinformationId());
		generalInformationImpl.setOrganizationId(getOrganizationId());
		generalInformationImpl.setAcronym(getAcronym());
		generalInformationImpl.setDescription(getDescription());
		generalInformationImpl.setHosteinstitue(getHosteinstitue());
		generalInformationImpl.setTypeofhosteinstitue(getTypeofhosteinstitue());
		generalInformationImpl.setSourceoffunding(getSourceoffunding());
		generalInformationImpl.setCountry(getCountry());
		generalInformationImpl.setTargetpopulation(getTargetpopulation());
		generalInformationImpl.setYearofestablishment(getYearofestablishment());
		generalInformationImpl.setHowmanyrdsareintheregistrybiobank(getHowmanyrdsareintheregistrybiobank());
		generalInformationImpl.setPercentageofrarediseasesinyourregistrybiobank(getPercentageofrarediseasesinyourregistrybiobank());
		generalInformationImpl.setOntologies(getOntologies());
		generalInformationImpl.setBiomaterialcollected(getBiomaterialcollected());
		generalInformationImpl.setBiomaterialcollectedinbiobank(getBiomaterialcollectedinbiobank());
		generalInformationImpl.setBiomaterialprepared(getBiomaterialprepared());
		generalInformationImpl.setOrigionofcollection(getOrigionofcollection());
		generalInformationImpl.setUseofcollection(getUseofcollection());
		generalInformationImpl.setAssociateddataavailable(getAssociateddataavailable());
		generalInformationImpl.setImagingavailable(getImagingavailable());
		generalInformationImpl.setTheregistrybiobanksislistedinotherinventoriesnetworks(getTheregistrybiobanksislistedinotherinventoriesnetworks());
		generalInformationImpl.setModifieddate(getModifieddate());

		generalInformationImpl.resetOriginalValues();

		return generalInformationImpl;
	}

	@Override
	public int compareTo(GeneralInformation generalInformation) {
		long primaryKey = generalInformation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GeneralInformation)) {
			return false;
		}

		GeneralInformation generalInformation = (GeneralInformation)obj;

		long primaryKey = generalInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GeneralInformationModelImpl generalInformationModelImpl = this;

		generalInformationModelImpl._originalOrganizationId = generalInformationModelImpl._organizationId;

		generalInformationModelImpl._setOriginalOrganizationId = false;

		generalInformationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GeneralInformation> toCacheModel() {
		GeneralInformationCacheModel generalInformationCacheModel = new GeneralInformationCacheModel();

		generalInformationCacheModel.generalinformationId = getGeneralinformationId();

		generalInformationCacheModel.organizationId = getOrganizationId();

		generalInformationCacheModel.acronym = getAcronym();

		String acronym = generalInformationCacheModel.acronym;

		if ((acronym != null) && (acronym.length() == 0)) {
			generalInformationCacheModel.acronym = null;
		}

		generalInformationCacheModel.description = getDescription();

		String description = generalInformationCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			generalInformationCacheModel.description = null;
		}

		generalInformationCacheModel.hosteinstitue = getHosteinstitue();

		String hosteinstitue = generalInformationCacheModel.hosteinstitue;

		if ((hosteinstitue != null) && (hosteinstitue.length() == 0)) {
			generalInformationCacheModel.hosteinstitue = null;
		}

		generalInformationCacheModel.typeofhosteinstitue = getTypeofhosteinstitue();

		String typeofhosteinstitue = generalInformationCacheModel.typeofhosteinstitue;

		if ((typeofhosteinstitue != null) &&
				(typeofhosteinstitue.length() == 0)) {
			generalInformationCacheModel.typeofhosteinstitue = null;
		}

		generalInformationCacheModel.sourceoffunding = getSourceoffunding();

		String sourceoffunding = generalInformationCacheModel.sourceoffunding;

		if ((sourceoffunding != null) && (sourceoffunding.length() == 0)) {
			generalInformationCacheModel.sourceoffunding = null;
		}

		generalInformationCacheModel.country = getCountry();

		String country = generalInformationCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			generalInformationCacheModel.country = null;
		}

		generalInformationCacheModel.targetpopulation = getTargetpopulation();

		String targetpopulation = generalInformationCacheModel.targetpopulation;

		if ((targetpopulation != null) && (targetpopulation.length() == 0)) {
			generalInformationCacheModel.targetpopulation = null;
		}

		generalInformationCacheModel.yearofestablishment = getYearofestablishment();

		String yearofestablishment = generalInformationCacheModel.yearofestablishment;

		if ((yearofestablishment != null) &&
				(yearofestablishment.length() == 0)) {
			generalInformationCacheModel.yearofestablishment = null;
		}

		generalInformationCacheModel.howmanyrdsareintheregistrybiobank = getHowmanyrdsareintheregistrybiobank();

		String howmanyrdsareintheregistrybiobank = generalInformationCacheModel.howmanyrdsareintheregistrybiobank;

		if ((howmanyrdsareintheregistrybiobank != null) &&
				(howmanyrdsareintheregistrybiobank.length() == 0)) {
			generalInformationCacheModel.howmanyrdsareintheregistrybiobank = null;
		}

		generalInformationCacheModel.percentageofrarediseasesinyourregistrybiobank = getPercentageofrarediseasesinyourregistrybiobank();

		String percentageofrarediseasesinyourregistrybiobank = generalInformationCacheModel.percentageofrarediseasesinyourregistrybiobank;

		if ((percentageofrarediseasesinyourregistrybiobank != null) &&
				(percentageofrarediseasesinyourregistrybiobank.length() == 0)) {
			generalInformationCacheModel.percentageofrarediseasesinyourregistrybiobank = null;
		}

		generalInformationCacheModel.ontologies = getOntologies();

		String ontologies = generalInformationCacheModel.ontologies;

		if ((ontologies != null) && (ontologies.length() == 0)) {
			generalInformationCacheModel.ontologies = null;
		}

		generalInformationCacheModel.biomaterialcollected = getBiomaterialcollected();

		String biomaterialcollected = generalInformationCacheModel.biomaterialcollected;

		if ((biomaterialcollected != null) &&
				(biomaterialcollected.length() == 0)) {
			generalInformationCacheModel.biomaterialcollected = null;
		}

		generalInformationCacheModel.biomaterialcollectedinbiobank = getBiomaterialcollectedinbiobank();

		String biomaterialcollectedinbiobank = generalInformationCacheModel.biomaterialcollectedinbiobank;

		if ((biomaterialcollectedinbiobank != null) &&
				(biomaterialcollectedinbiobank.length() == 0)) {
			generalInformationCacheModel.biomaterialcollectedinbiobank = null;
		}

		generalInformationCacheModel.biomaterialprepared = getBiomaterialprepared();

		String biomaterialprepared = generalInformationCacheModel.biomaterialprepared;

		if ((biomaterialprepared != null) &&
				(biomaterialprepared.length() == 0)) {
			generalInformationCacheModel.biomaterialprepared = null;
		}

		generalInformationCacheModel.origionofcollection = getOrigionofcollection();

		String origionofcollection = generalInformationCacheModel.origionofcollection;

		if ((origionofcollection != null) &&
				(origionofcollection.length() == 0)) {
			generalInformationCacheModel.origionofcollection = null;
		}

		generalInformationCacheModel.useofcollection = getUseofcollection();

		String useofcollection = generalInformationCacheModel.useofcollection;

		if ((useofcollection != null) && (useofcollection.length() == 0)) {
			generalInformationCacheModel.useofcollection = null;
		}

		generalInformationCacheModel.associateddataavailable = getAssociateddataavailable();

		String associateddataavailable = generalInformationCacheModel.associateddataavailable;

		if ((associateddataavailable != null) &&
				(associateddataavailable.length() == 0)) {
			generalInformationCacheModel.associateddataavailable = null;
		}

		generalInformationCacheModel.imagingavailable = getImagingavailable();

		String imagingavailable = generalInformationCacheModel.imagingavailable;

		if ((imagingavailable != null) && (imagingavailable.length() == 0)) {
			generalInformationCacheModel.imagingavailable = null;
		}

		generalInformationCacheModel.theregistrybiobanksislistedinotherinventoriesnetworks = getTheregistrybiobanksislistedinotherinventoriesnetworks();

		String theregistrybiobanksislistedinotherinventoriesnetworks = generalInformationCacheModel.theregistrybiobanksislistedinotherinventoriesnetworks;

		if ((theregistrybiobanksislistedinotherinventoriesnetworks != null) &&
				(theregistrybiobanksislistedinotherinventoriesnetworks.length() == 0)) {
			generalInformationCacheModel.theregistrybiobanksislistedinotherinventoriesnetworks = null;
		}

		Date modifieddate = getModifieddate();

		if (modifieddate != null) {
			generalInformationCacheModel.modifieddate = modifieddate.getTime();
		}
		else {
			generalInformationCacheModel.modifieddate = Long.MIN_VALUE;
		}

		return generalInformationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{generalinformationId=");
		sb.append(getGeneralinformationId());
		sb.append(", organizationId=");
		sb.append(getOrganizationId());
		sb.append(", acronym=");
		sb.append(getAcronym());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", hosteinstitue=");
		sb.append(getHosteinstitue());
		sb.append(", typeofhosteinstitue=");
		sb.append(getTypeofhosteinstitue());
		sb.append(", sourceoffunding=");
		sb.append(getSourceoffunding());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", targetpopulation=");
		sb.append(getTargetpopulation());
		sb.append(", yearofestablishment=");
		sb.append(getYearofestablishment());
		sb.append(", howmanyrdsareintheregistrybiobank=");
		sb.append(getHowmanyrdsareintheregistrybiobank());
		sb.append(", percentageofrarediseasesinyourregistrybiobank=");
		sb.append(getPercentageofrarediseasesinyourregistrybiobank());
		sb.append(", ontologies=");
		sb.append(getOntologies());
		sb.append(", biomaterialcollected=");
		sb.append(getBiomaterialcollected());
		sb.append(", biomaterialcollectedinbiobank=");
		sb.append(getBiomaterialcollectedinbiobank());
		sb.append(", biomaterialprepared=");
		sb.append(getBiomaterialprepared());
		sb.append(", origionofcollection=");
		sb.append(getOrigionofcollection());
		sb.append(", useofcollection=");
		sb.append(getUseofcollection());
		sb.append(", associateddataavailable=");
		sb.append(getAssociateddataavailable());
		sb.append(", imagingavailable=");
		sb.append(getImagingavailable());
		sb.append(", theregistrybiobanksislistedinotherinventoriesnetworks=");
		sb.append(getTheregistrybiobanksislistedinotherinventoriesnetworks());
		sb.append(", modifieddate=");
		sb.append(getModifieddate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.meduni.liferay.portlet.bibbox.service.model.GeneralInformation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>generalinformationId</column-name><column-value><![CDATA[");
		sb.append(getGeneralinformationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>acronym</column-name><column-value><![CDATA[");
		sb.append(getAcronym());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hosteinstitue</column-name><column-value><![CDATA[");
		sb.append(getHosteinstitue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeofhosteinstitue</column-name><column-value><![CDATA[");
		sb.append(getTypeofhosteinstitue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sourceoffunding</column-name><column-value><![CDATA[");
		sb.append(getSourceoffunding());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetpopulation</column-name><column-value><![CDATA[");
		sb.append(getTargetpopulation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>yearofestablishment</column-name><column-value><![CDATA[");
		sb.append(getYearofestablishment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>howmanyrdsareintheregistrybiobank</column-name><column-value><![CDATA[");
		sb.append(getHowmanyrdsareintheregistrybiobank());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentageofrarediseasesinyourregistrybiobank</column-name><column-value><![CDATA[");
		sb.append(getPercentageofrarediseasesinyourregistrybiobank());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ontologies</column-name><column-value><![CDATA[");
		sb.append(getOntologies());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biomaterialcollected</column-name><column-value><![CDATA[");
		sb.append(getBiomaterialcollected());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biomaterialcollectedinbiobank</column-name><column-value><![CDATA[");
		sb.append(getBiomaterialcollectedinbiobank());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biomaterialprepared</column-name><column-value><![CDATA[");
		sb.append(getBiomaterialprepared());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>origionofcollection</column-name><column-value><![CDATA[");
		sb.append(getOrigionofcollection());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>useofcollection</column-name><column-value><![CDATA[");
		sb.append(getUseofcollection());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associateddataavailable</column-name><column-value><![CDATA[");
		sb.append(getAssociateddataavailable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imagingavailable</column-name><column-value><![CDATA[");
		sb.append(getImagingavailable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>theregistrybiobanksislistedinotherinventoriesnetworks</column-name><column-value><![CDATA[");
		sb.append(getTheregistrybiobanksislistedinotherinventoriesnetworks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifieddate</column-name><column-value><![CDATA[");
		sb.append(getModifieddate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GeneralInformation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GeneralInformation.class
		};
	private long _generalinformationId;
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private String _acronym;
	private String _description;
	private String _hosteinstitue;
	private String _typeofhosteinstitue;
	private String _sourceoffunding;
	private String _country;
	private String _targetpopulation;
	private String _yearofestablishment;
	private String _howmanyrdsareintheregistrybiobank;
	private String _percentageofrarediseasesinyourregistrybiobank;
	private String _ontologies;
	private String _biomaterialcollected;
	private String _biomaterialcollectedinbiobank;
	private String _biomaterialprepared;
	private String _origionofcollection;
	private String _useofcollection;
	private String _associateddataavailable;
	private String _imagingavailable;
	private String _theregistrybiobanksislistedinotherinventoriesnetworks;
	private Date _modifieddate;
	private long _columnBitmask;
	private GeneralInformation _escapedModel;
}