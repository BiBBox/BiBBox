/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.model.impl;

import at.graz.meduni.liferay.model.ICD10;
import at.graz.meduni.liferay.model.ICD10Model;
import at.graz.meduni.liferay.model.ICD10Soap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ICD10 service. Represents a row in the &quot;code_icd10&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.meduni.liferay.model.ICD10Model} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ICD10Impl}.
 * </p>
 *
 * @author reihsr
 * @see ICD10Impl
 * @see at.graz.meduni.liferay.model.ICD10
 * @see at.graz.meduni.liferay.model.ICD10Model
 * @generated
 */
@JSON(strict = true)
public class ICD10ModelImpl extends BaseModelImpl<ICD10> implements ICD10Model {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a i c d10 model instance should use the {@link at.graz.meduni.liferay.model.ICD10} interface instead.
	 */
	public static final String TABLE_NAME = "code_icd10";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "INKLUSIVA", Types.VARCHAR },
			{ "EXKLUSIVA", Types.VARCHAR },
			{ "TYPE", Types.VARCHAR },
			{ "USED", Types.DOUBLE },
			{ "FROM_CODE", Types.VARCHAR },
			{ "TO_CODE", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table code_icd10 (id_ LONG not null primary key,code_ TEXT null,description TEXT null,INKLUSIVA VARCHAR(75) null,EXKLUSIVA VARCHAR(75) null,TYPE VARCHAR(75) null,USED DOUBLE,FROM_CODE VARCHAR(75) null,TO_CODE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table code_icd10";
	public static final String ORDER_BY_JPQL = " ORDER BY icd10.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY code_icd10.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.meduni.liferay.model.ICD10"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.meduni.liferay.model.ICD10"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.meduni.liferay.model.ICD10"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ICD10 toModel(ICD10Soap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ICD10 model = new ICD10Impl();

		model.setId(soapModel.getId());
		model.setCode(soapModel.getCode());
		model.setDescription(soapModel.getDescription());
		model.setINKLUSIVA(soapModel.getINKLUSIVA());
		model.setEXKLUSIVA(soapModel.getEXKLUSIVA());
		model.setTYPE(soapModel.getTYPE());
		model.setUSED(soapModel.getUSED());
		model.setFROM_CODE(soapModel.getFROM_CODE());
		model.setTO_CODE(soapModel.getTO_CODE());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ICD10> toModels(ICD10Soap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ICD10> models = new ArrayList<ICD10>(soapModels.length);

		for (ICD10Soap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.meduni.liferay.model.ICD10"));

	public ICD10ModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ICD10.class;
	}

	@Override
	public String getModelClassName() {
		return ICD10.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("code", getCode());
		attributes.put("description", getDescription());
		attributes.put("INKLUSIVA", getINKLUSIVA());
		attributes.put("EXKLUSIVA", getEXKLUSIVA());
		attributes.put("TYPE", getTYPE());
		attributes.put("USED", getUSED());
		attributes.put("FROM_CODE", getFROM_CODE());
		attributes.put("TO_CODE", getTO_CODE());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String INKLUSIVA = (String)attributes.get("INKLUSIVA");

		if (INKLUSIVA != null) {
			setINKLUSIVA(INKLUSIVA);
		}

		String EXKLUSIVA = (String)attributes.get("EXKLUSIVA");

		if (EXKLUSIVA != null) {
			setEXKLUSIVA(EXKLUSIVA);
		}

		String TYPE = (String)attributes.get("TYPE");

		if (TYPE != null) {
			setTYPE(TYPE);
		}

		Double USED = (Double)attributes.get("USED");

		if (USED != null) {
			setUSED(USED);
		}

		String FROM_CODE = (String)attributes.get("FROM_CODE");

		if (FROM_CODE != null) {
			setFROM_CODE(FROM_CODE);
		}

		String TO_CODE = (String)attributes.get("TO_CODE");

		if (TO_CODE != null) {
			setTO_CODE(TO_CODE);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getINKLUSIVA() {
		if (_INKLUSIVA == null) {
			return StringPool.BLANK;
		}
		else {
			return _INKLUSIVA;
		}
	}

	@Override
	public void setINKLUSIVA(String INKLUSIVA) {
		_INKLUSIVA = INKLUSIVA;
	}

	@JSON
	@Override
	public String getEXKLUSIVA() {
		if (_EXKLUSIVA == null) {
			return StringPool.BLANK;
		}
		else {
			return _EXKLUSIVA;
		}
	}

	@Override
	public void setEXKLUSIVA(String EXKLUSIVA) {
		_EXKLUSIVA = EXKLUSIVA;
	}

	@JSON
	@Override
	public String getTYPE() {
		if (_TYPE == null) {
			return StringPool.BLANK;
		}
		else {
			return _TYPE;
		}
	}

	@Override
	public void setTYPE(String TYPE) {
		_TYPE = TYPE;
	}

	@JSON
	@Override
	public double getUSED() {
		return _USED;
	}

	@Override
	public void setUSED(double USED) {
		_USED = USED;
	}

	@JSON
	@Override
	public String getFROM_CODE() {
		if (_FROM_CODE == null) {
			return StringPool.BLANK;
		}
		else {
			return _FROM_CODE;
		}
	}

	@Override
	public void setFROM_CODE(String FROM_CODE) {
		_FROM_CODE = FROM_CODE;
	}

	@JSON
	@Override
	public String getTO_CODE() {
		if (_TO_CODE == null) {
			return StringPool.BLANK;
		}
		else {
			return _TO_CODE;
		}
	}

	@Override
	public void setTO_CODE(String TO_CODE) {
		_TO_CODE = TO_CODE;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ICD10.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ICD10 toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ICD10)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ICD10Impl icd10Impl = new ICD10Impl();

		icd10Impl.setId(getId());
		icd10Impl.setCode(getCode());
		icd10Impl.setDescription(getDescription());
		icd10Impl.setINKLUSIVA(getINKLUSIVA());
		icd10Impl.setEXKLUSIVA(getEXKLUSIVA());
		icd10Impl.setTYPE(getTYPE());
		icd10Impl.setUSED(getUSED());
		icd10Impl.setFROM_CODE(getFROM_CODE());
		icd10Impl.setTO_CODE(getTO_CODE());

		icd10Impl.resetOriginalValues();

		return icd10Impl;
	}

	@Override
	public int compareTo(ICD10 icd10) {
		int value = 0;

		if (getId() < icd10.getId()) {
			value = -1;
		}
		else if (getId() > icd10.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ICD10)) {
			return false;
		}

		ICD10 icd10 = (ICD10)obj;

		long primaryKey = icd10.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ICD10ModelImpl icd10ModelImpl = this;

		icd10ModelImpl._originalCode = icd10ModelImpl._code;

		icd10ModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ICD10> toCacheModel() {
		ICD10CacheModel icd10CacheModel = new ICD10CacheModel();

		icd10CacheModel.id = getId();

		icd10CacheModel.code = getCode();

		String code = icd10CacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			icd10CacheModel.code = null;
		}

		icd10CacheModel.description = getDescription();

		String description = icd10CacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			icd10CacheModel.description = null;
		}

		icd10CacheModel.INKLUSIVA = getINKLUSIVA();

		String INKLUSIVA = icd10CacheModel.INKLUSIVA;

		if ((INKLUSIVA != null) && (INKLUSIVA.length() == 0)) {
			icd10CacheModel.INKLUSIVA = null;
		}

		icd10CacheModel.EXKLUSIVA = getEXKLUSIVA();

		String EXKLUSIVA = icd10CacheModel.EXKLUSIVA;

		if ((EXKLUSIVA != null) && (EXKLUSIVA.length() == 0)) {
			icd10CacheModel.EXKLUSIVA = null;
		}

		icd10CacheModel.TYPE = getTYPE();

		String TYPE = icd10CacheModel.TYPE;

		if ((TYPE != null) && (TYPE.length() == 0)) {
			icd10CacheModel.TYPE = null;
		}

		icd10CacheModel.USED = getUSED();

		icd10CacheModel.FROM_CODE = getFROM_CODE();

		String FROM_CODE = icd10CacheModel.FROM_CODE;

		if ((FROM_CODE != null) && (FROM_CODE.length() == 0)) {
			icd10CacheModel.FROM_CODE = null;
		}

		icd10CacheModel.TO_CODE = getTO_CODE();

		String TO_CODE = icd10CacheModel.TO_CODE;

		if ((TO_CODE != null) && (TO_CODE.length() == 0)) {
			icd10CacheModel.TO_CODE = null;
		}

		return icd10CacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", INKLUSIVA=");
		sb.append(getINKLUSIVA());
		sb.append(", EXKLUSIVA=");
		sb.append(getEXKLUSIVA());
		sb.append(", TYPE=");
		sb.append(getTYPE());
		sb.append(", USED=");
		sb.append(getUSED());
		sb.append(", FROM_CODE=");
		sb.append(getFROM_CODE());
		sb.append(", TO_CODE=");
		sb.append(getTO_CODE());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("at.graz.meduni.liferay.model.ICD10");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>INKLUSIVA</column-name><column-value><![CDATA[");
		sb.append(getINKLUSIVA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EXKLUSIVA</column-name><column-value><![CDATA[");
		sb.append(getEXKLUSIVA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TYPE</column-name><column-value><![CDATA[");
		sb.append(getTYPE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>USED</column-name><column-value><![CDATA[");
		sb.append(getUSED());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FROM_CODE</column-name><column-value><![CDATA[");
		sb.append(getFROM_CODE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TO_CODE</column-name><column-value><![CDATA[");
		sb.append(getTO_CODE());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ICD10.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { ICD10.class };
	private long _id;
	private String _code;
	private String _originalCode;
	private String _description;
	private String _INKLUSIVA;
	private String _EXKLUSIVA;
	private String _TYPE;
	private double _USED;
	private String _FROM_CODE;
	private String _TO_CODE;
	private long _columnBitmask;
	private ICD10 _escapedModel;
}