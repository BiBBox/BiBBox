/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.meduni.liferay.portlet.bbmrieric.model.impl;

import at.meduni.liferay.portlet.bbmrieric.model.D2Collection;
import at.meduni.liferay.portlet.bbmrieric.model.D2CollectionModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the D2Collection service. Represents a row in the &quot;bbmrieric.d2collection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.meduni.liferay.portlet.bbmrieric.model.D2CollectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link D2CollectionImpl}.
 * </p>
 *
 * @author reihsr
 * @see D2CollectionImpl
 * @see at.meduni.liferay.portlet.bbmrieric.model.D2Collection
 * @see at.meduni.liferay.portlet.bbmrieric.model.D2CollectionModel
 * @generated
 */
public class D2CollectionModelImpl extends BaseModelImpl<D2Collection>
	implements D2CollectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a d2 collection model instance should use the {@link at.meduni.liferay.portlet.bbmrieric.model.D2Collection} interface instead.
	 */
	public static final String TABLE_NAME = "bbmrieric.d2collection";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "d2collectionId", Types.BIGINT },
			{ "biobankId", Types.BIGINT },
			{ "parentd2collectionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "updateuuid", Types.VARCHAR },
			{ "bbmricollectionID", Types.VARCHAR },
			{ "bbmriparentcollectionID", Types.VARCHAR },
			{ "bbmribiobankID", Types.VARCHAR },
			{ "collectionName", Types.VARCHAR },
			{ "materialStoredDNA", Types.BOOLEAN },
			{ "materialStoredPlasma", Types.BOOLEAN },
			{ "materialStoredSerum", Types.BOOLEAN },
			{ "materialStoredUrine", Types.BOOLEAN },
			{ "materialStoredSaliva", Types.BOOLEAN },
			{ "materialStoredFaeces", Types.BOOLEAN },
			{ "materialStoredRNA", Types.BOOLEAN },
			{ "materialStoredBlood", Types.BOOLEAN },
			{ "materialStoredTissueFrozen", Types.BOOLEAN },
			{ "materialStoredTissueFFPE", Types.BOOLEAN },
			{ "materialStoredImmortalizedCellLines", Types.BOOLEAN },
			{ "materialStoredIsolatedPathogen", Types.BOOLEAN },
			{ "materialStoredOther", Types.VARCHAR },
			{ "collectionTypeCaseControl", Types.BOOLEAN },
			{ "collectionTypeCohort", Types.BOOLEAN },
			{ "collectionTypeCrossSectional", Types.BOOLEAN },
			{ "collectionTypeLongitudinal", Types.BOOLEAN },
			{ "collectionTypeTwinStudy", Types.BOOLEAN },
			{ "collectionTypeQualityControl", Types.BOOLEAN },
			{ "collectionTypePopulationBased", Types.BOOLEAN },
			{ "collectionTypeDiseaseSpecific", Types.BOOLEAN },
			{ "collectionTypeBirthCohort", Types.BOOLEAN },
			{ "collectionTypeOther", Types.VARCHAR },
			{ "collectionOrderOfMagnitude", Types.BIGINT },
			{ "bioresourceReference", Types.VARCHAR },
			{ "contactIDRef", Types.VARCHAR },
			{ "contactPriority", Types.BIGINT },
			{ "biobankNetworkIDRef", Types.VARCHAR },
			{ "geoLatitude", Types.VARCHAR },
			{ "geoLongitude", Types.VARCHAR },
			{ "collaborationPartnersCommercial", Types.BOOLEAN },
			{ "collaborationPartnersNonforprofit", Types.BOOLEAN },
			{ "collectionAcronym", Types.VARCHAR },
			{ "collectionDescription", Types.VARCHAR },
			{ "collectionSexMale", Types.BOOLEAN },
			{ "collectionSexFemale", Types.BOOLEAN },
			{ "collectionSexUnknown", Types.BOOLEAN },
			{ "collectionSexUndiferrentiated", Types.BOOLEAN },
			{ "collectionAgeLow", Types.BIGINT },
			{ "collectionAgeHigh", Types.BIGINT },
			{ "collectionAgeUnit", Types.VARCHAR },
			{ "collectionAvailableBiologicalSamples", Types.BOOLEAN },
			{ "collectionAvailableSurveyData", Types.BOOLEAN },
			{ "collectionAvailableImagingData", Types.BOOLEAN },
			{ "collectionAvailableMedicalRecords", Types.BOOLEAN },
			{ "collectionAvailableNationalRegistries", Types.BOOLEAN },
			{ "collectionAvailableGenealogicalRecords", Types.BOOLEAN },
			{ "collectionAvailablePhysioBiochemMeasurements", Types.BOOLEAN },
			{ "collectionAvailableOther", Types.VARCHAR },
			{ "temperatureRoom", Types.BOOLEAN },
			{ "temperature2to10", Types.BOOLEAN },
			{ "temperature18to35", Types.BOOLEAN },
			{ "temperature60to85", Types.BOOLEAN },
			{ "temperatureLN", Types.BOOLEAN },
			{ "temperatureOther", Types.VARCHAR },
			{ "diagnosisAvailable", Types.VARCHAR },
			{ "collectionHeadFirstName", Types.VARCHAR },
			{ "collectionHeadLastName", Types.VARCHAR },
			{ "collectionHeadRole", Types.VARCHAR },
			{ "collectionSampleAccessFee", Types.BOOLEAN },
			{ "collectionSampleAccessJointProjects", Types.BOOLEAN },
			{ "collectionSampleAccessDescription", Types.VARCHAR },
			{ "collectionSampleAccessURI", Types.VARCHAR },
			{ "collectionDataAccessFee", Types.BOOLEAN },
			{ "collectionDataAccessJointProjects", Types.BOOLEAN },
			{ "collectionDataAccessDescription", Types.VARCHAR },
			{ "collectionDataAccessURI", Types.VARCHAR },
			{ "collectionSize", Types.BIGINT },
			{ "collectionSizeTimestamp", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table bbmrieric.d2collection (uuid_ VARCHAR(75) null,d2collectionId LONG not null primary key,biobankId LONG,parentd2collectionId LONG,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,updateuuid VARCHAR(75) null,bbmricollectionID VARCHAR(75) null,bbmriparentcollectionID VARCHAR(75) null,bbmribiobankID VARCHAR(75) null,collectionName TEXT null,materialStoredDNA BOOLEAN,materialStoredPlasma BOOLEAN,materialStoredSerum BOOLEAN,materialStoredUrine BOOLEAN,materialStoredSaliva BOOLEAN,materialStoredFaeces BOOLEAN,materialStoredRNA BOOLEAN,materialStoredBlood BOOLEAN,materialStoredTissueFrozen BOOLEAN,materialStoredTissueFFPE BOOLEAN,materialStoredImmortalizedCellLines BOOLEAN,materialStoredIsolatedPathogen BOOLEAN,materialStoredOther VARCHAR(75) null,collectionTypeCaseControl BOOLEAN,collectionTypeCohort BOOLEAN,collectionTypeCrossSectional BOOLEAN,collectionTypeLongitudinal BOOLEAN,collectionTypeTwinStudy BOOLEAN,collectionTypeQualityControl BOOLEAN,collectionTypePopulationBased BOOLEAN,collectionTypeDiseaseSpecific BOOLEAN,collectionTypeBirthCohort BOOLEAN,collectionTypeOther VARCHAR(75) null,collectionOrderOfMagnitude LONG,bioresourceReference VARCHAR(75) null,contactIDRef VARCHAR(75) null,contactPriority LONG,biobankNetworkIDRef VARCHAR(75) null,geoLatitude VARCHAR(75) null,geoLongitude VARCHAR(75) null,collaborationPartnersCommercial BOOLEAN,collaborationPartnersNonforprofit BOOLEAN,collectionAcronym VARCHAR(75) null,collectionDescription TEXT null,collectionSexMale BOOLEAN,collectionSexFemale BOOLEAN,collectionSexUnknown BOOLEAN,collectionSexUndiferrentiated BOOLEAN,collectionAgeLow LONG,collectionAgeHigh LONG,collectionAgeUnit VARCHAR(75) null,collectionAvailableBiologicalSamples BOOLEAN,collectionAvailableSurveyData BOOLEAN,collectionAvailableImagingData BOOLEAN,collectionAvailableMedicalRecords BOOLEAN,collectionAvailableNationalRegistries BOOLEAN,collectionAvailableGenealogicalRecords BOOLEAN,collectionAvailablePhysioBiochemMeasurements BOOLEAN,collectionAvailableOther VARCHAR(75) null,temperatureRoom BOOLEAN,temperature2to10 BOOLEAN,temperature18to35 BOOLEAN,temperature60to85 BOOLEAN,temperatureLN BOOLEAN,temperatureOther VARCHAR(75) null,diagnosisAvailable TEXT null,collectionHeadFirstName VARCHAR(75) null,collectionHeadLastName VARCHAR(75) null,collectionHeadRole VARCHAR(75) null,collectionSampleAccessFee BOOLEAN,collectionSampleAccessJointProjects BOOLEAN,collectionSampleAccessDescription TEXT null,collectionSampleAccessURI VARCHAR(75) null,collectionDataAccessFee BOOLEAN,collectionDataAccessJointProjects BOOLEAN,collectionDataAccessDescription TEXT null,collectionDataAccessURI VARCHAR(75) null,collectionSize LONG,collectionSizeTimestamp LONG)";
	public static final String TABLE_SQL_DROP = "drop table bbmrieric.d2collection";
	public static final String ORDER_BY_JPQL = " ORDER BY d2Collection.d2collectionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bbmrieric.d2collection.d2collectionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.meduni.liferay.portlet.bbmrieric.model.D2Collection"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.meduni.liferay.portlet.bbmrieric.model.D2Collection"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.meduni.liferay.portlet.bbmrieric.model.D2Collection"),
			true);
	public static long BBMRIBIOBANKID_COLUMN_BITMASK = 1L;
	public static long BBMRICOLLECTIONID_COLUMN_BITMASK = 2L;
	public static long BIOBANKID_COLUMN_BITMASK = 4L;
	public static long COMPANYID_COLUMN_BITMASK = 8L;
	public static long D2COLLECTIONID_COLUMN_BITMASK = 16L;
	public static long GROUPID_COLUMN_BITMASK = 32L;
	public static long PARENTD2COLLECTIONID_COLUMN_BITMASK = 64L;
	public static long UPDATEUUID_COLUMN_BITMASK = 128L;
	public static long UUID_COLUMN_BITMASK = 256L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.meduni.liferay.portlet.bbmrieric.model.D2Collection"));

	public D2CollectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _d2collectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setD2collectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _d2collectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return D2Collection.class;
	}

	@Override
	public String getModelClassName() {
		return D2Collection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("d2collectionId", getD2collectionId());
		attributes.put("biobankId", getBiobankId());
		attributes.put("parentd2collectionId", getParentd2collectionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("updateuuid", getUpdateuuid());
		attributes.put("bbmricollectionID", getBbmricollectionID());
		attributes.put("bbmriparentcollectionID", getBbmriparentcollectionID());
		attributes.put("bbmribiobankID", getBbmribiobankID());
		attributes.put("collectionName", getCollectionName());
		attributes.put("materialStoredDNA", getMaterialStoredDNA());
		attributes.put("materialStoredPlasma", getMaterialStoredPlasma());
		attributes.put("materialStoredSerum", getMaterialStoredSerum());
		attributes.put("materialStoredUrine", getMaterialStoredUrine());
		attributes.put("materialStoredSaliva", getMaterialStoredSaliva());
		attributes.put("materialStoredFaeces", getMaterialStoredFaeces());
		attributes.put("materialStoredRNA", getMaterialStoredRNA());
		attributes.put("materialStoredBlood", getMaterialStoredBlood());
		attributes.put("materialStoredTissueFrozen",
			getMaterialStoredTissueFrozen());
		attributes.put("materialStoredTissueFFPE", getMaterialStoredTissueFFPE());
		attributes.put("materialStoredImmortalizedCellLines",
			getMaterialStoredImmortalizedCellLines());
		attributes.put("materialStoredIsolatedPathogen",
			getMaterialStoredIsolatedPathogen());
		attributes.put("materialStoredOther", getMaterialStoredOther());
		attributes.put("collectionTypeCaseControl",
			getCollectionTypeCaseControl());
		attributes.put("collectionTypeCohort", getCollectionTypeCohort());
		attributes.put("collectionTypeCrossSectional",
			getCollectionTypeCrossSectional());
		attributes.put("collectionTypeLongitudinal",
			getCollectionTypeLongitudinal());
		attributes.put("collectionTypeTwinStudy", getCollectionTypeTwinStudy());
		attributes.put("collectionTypeQualityControl",
			getCollectionTypeQualityControl());
		attributes.put("collectionTypePopulationBased",
			getCollectionTypePopulationBased());
		attributes.put("collectionTypeDiseaseSpecific",
			getCollectionTypeDiseaseSpecific());
		attributes.put("collectionTypeBirthCohort",
			getCollectionTypeBirthCohort());
		attributes.put("collectionTypeOther", getCollectionTypeOther());
		attributes.put("collectionOrderOfMagnitude",
			getCollectionOrderOfMagnitude());
		attributes.put("bioresourceReference", getBioresourceReference());
		attributes.put("contactIDRef", getContactIDRef());
		attributes.put("contactPriority", getContactPriority());
		attributes.put("biobankNetworkIDRef", getBiobankNetworkIDRef());
		attributes.put("geoLatitude", getGeoLatitude());
		attributes.put("geoLongitude", getGeoLongitude());
		attributes.put("collaborationPartnersCommercial",
			getCollaborationPartnersCommercial());
		attributes.put("collaborationPartnersNonforprofit",
			getCollaborationPartnersNonforprofit());
		attributes.put("collectionAcronym", getCollectionAcronym());
		attributes.put("collectionDescription", getCollectionDescription());
		attributes.put("collectionSexMale", getCollectionSexMale());
		attributes.put("collectionSexFemale", getCollectionSexFemale());
		attributes.put("collectionSexUnknown", getCollectionSexUnknown());
		attributes.put("collectionSexUndiferrentiated",
			getCollectionSexUndiferrentiated());
		attributes.put("collectionAgeLow", getCollectionAgeLow());
		attributes.put("collectionAgeHigh", getCollectionAgeHigh());
		attributes.put("collectionAgeUnit", getCollectionAgeUnit());
		attributes.put("collectionAvailableBiologicalSamples",
			getCollectionAvailableBiologicalSamples());
		attributes.put("collectionAvailableSurveyData",
			getCollectionAvailableSurveyData());
		attributes.put("collectionAvailableImagingData",
			getCollectionAvailableImagingData());
		attributes.put("collectionAvailableMedicalRecords",
			getCollectionAvailableMedicalRecords());
		attributes.put("collectionAvailableNationalRegistries",
			getCollectionAvailableNationalRegistries());
		attributes.put("collectionAvailableGenealogicalRecords",
			getCollectionAvailableGenealogicalRecords());
		attributes.put("collectionAvailablePhysioBiochemMeasurements",
			getCollectionAvailablePhysioBiochemMeasurements());
		attributes.put("collectionAvailableOther", getCollectionAvailableOther());
		attributes.put("temperatureRoom", getTemperatureRoom());
		attributes.put("temperature2to10", getTemperature2to10());
		attributes.put("temperature18to35", getTemperature18to35());
		attributes.put("temperature60to85", getTemperature60to85());
		attributes.put("temperatureLN", getTemperatureLN());
		attributes.put("temperatureOther", getTemperatureOther());
		attributes.put("diagnosisAvailable", getDiagnosisAvailable());
		attributes.put("collectionHeadFirstName", getCollectionHeadFirstName());
		attributes.put("collectionHeadLastName", getCollectionHeadLastName());
		attributes.put("collectionHeadRole", getCollectionHeadRole());
		attributes.put("collectionSampleAccessFee",
			getCollectionSampleAccessFee());
		attributes.put("collectionSampleAccessJointProjects",
			getCollectionSampleAccessJointProjects());
		attributes.put("collectionSampleAccessDescription",
			getCollectionSampleAccessDescription());
		attributes.put("collectionSampleAccessURI",
			getCollectionSampleAccessURI());
		attributes.put("collectionDataAccessFee", getCollectionDataAccessFee());
		attributes.put("collectionDataAccessJointProjects",
			getCollectionDataAccessJointProjects());
		attributes.put("collectionDataAccessDescription",
			getCollectionDataAccessDescription());
		attributes.put("collectionDataAccessURI", getCollectionDataAccessURI());
		attributes.put("collectionSize", getCollectionSize());
		attributes.put("collectionSizeTimestamp", getCollectionSizeTimestamp());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long d2collectionId = (Long)attributes.get("d2collectionId");

		if (d2collectionId != null) {
			setD2collectionId(d2collectionId);
		}

		Long biobankId = (Long)attributes.get("biobankId");

		if (biobankId != null) {
			setBiobankId(biobankId);
		}

		Long parentd2collectionId = (Long)attributes.get("parentd2collectionId");

		if (parentd2collectionId != null) {
			setParentd2collectionId(parentd2collectionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String updateuuid = (String)attributes.get("updateuuid");

		if (updateuuid != null) {
			setUpdateuuid(updateuuid);
		}

		String bbmricollectionID = (String)attributes.get("bbmricollectionID");

		if (bbmricollectionID != null) {
			setBbmricollectionID(bbmricollectionID);
		}

		String bbmriparentcollectionID = (String)attributes.get(
				"bbmriparentcollectionID");

		if (bbmriparentcollectionID != null) {
			setBbmriparentcollectionID(bbmriparentcollectionID);
		}

		String bbmribiobankID = (String)attributes.get("bbmribiobankID");

		if (bbmribiobankID != null) {
			setBbmribiobankID(bbmribiobankID);
		}

		String collectionName = (String)attributes.get("collectionName");

		if (collectionName != null) {
			setCollectionName(collectionName);
		}

		Boolean materialStoredDNA = (Boolean)attributes.get("materialStoredDNA");

		if (materialStoredDNA != null) {
			setMaterialStoredDNA(materialStoredDNA);
		}

		Boolean materialStoredPlasma = (Boolean)attributes.get(
				"materialStoredPlasma");

		if (materialStoredPlasma != null) {
			setMaterialStoredPlasma(materialStoredPlasma);
		}

		Boolean materialStoredSerum = (Boolean)attributes.get(
				"materialStoredSerum");

		if (materialStoredSerum != null) {
			setMaterialStoredSerum(materialStoredSerum);
		}

		Boolean materialStoredUrine = (Boolean)attributes.get(
				"materialStoredUrine");

		if (materialStoredUrine != null) {
			setMaterialStoredUrine(materialStoredUrine);
		}

		Boolean materialStoredSaliva = (Boolean)attributes.get(
				"materialStoredSaliva");

		if (materialStoredSaliva != null) {
			setMaterialStoredSaliva(materialStoredSaliva);
		}

		Boolean materialStoredFaeces = (Boolean)attributes.get(
				"materialStoredFaeces");

		if (materialStoredFaeces != null) {
			setMaterialStoredFaeces(materialStoredFaeces);
		}

		Boolean materialStoredRNA = (Boolean)attributes.get("materialStoredRNA");

		if (materialStoredRNA != null) {
			setMaterialStoredRNA(materialStoredRNA);
		}

		Boolean materialStoredBlood = (Boolean)attributes.get(
				"materialStoredBlood");

		if (materialStoredBlood != null) {
			setMaterialStoredBlood(materialStoredBlood);
		}

		Boolean materialStoredTissueFrozen = (Boolean)attributes.get(
				"materialStoredTissueFrozen");

		if (materialStoredTissueFrozen != null) {
			setMaterialStoredTissueFrozen(materialStoredTissueFrozen);
		}

		Boolean materialStoredTissueFFPE = (Boolean)attributes.get(
				"materialStoredTissueFFPE");

		if (materialStoredTissueFFPE != null) {
			setMaterialStoredTissueFFPE(materialStoredTissueFFPE);
		}

		Boolean materialStoredImmortalizedCellLines = (Boolean)attributes.get(
				"materialStoredImmortalizedCellLines");

		if (materialStoredImmortalizedCellLines != null) {
			setMaterialStoredImmortalizedCellLines(materialStoredImmortalizedCellLines);
		}

		Boolean materialStoredIsolatedPathogen = (Boolean)attributes.get(
				"materialStoredIsolatedPathogen");

		if (materialStoredIsolatedPathogen != null) {
			setMaterialStoredIsolatedPathogen(materialStoredIsolatedPathogen);
		}

		String materialStoredOther = (String)attributes.get(
				"materialStoredOther");

		if (materialStoredOther != null) {
			setMaterialStoredOther(materialStoredOther);
		}

		Boolean collectionTypeCaseControl = (Boolean)attributes.get(
				"collectionTypeCaseControl");

		if (collectionTypeCaseControl != null) {
			setCollectionTypeCaseControl(collectionTypeCaseControl);
		}

		Boolean collectionTypeCohort = (Boolean)attributes.get(
				"collectionTypeCohort");

		if (collectionTypeCohort != null) {
			setCollectionTypeCohort(collectionTypeCohort);
		}

		Boolean collectionTypeCrossSectional = (Boolean)attributes.get(
				"collectionTypeCrossSectional");

		if (collectionTypeCrossSectional != null) {
			setCollectionTypeCrossSectional(collectionTypeCrossSectional);
		}

		Boolean collectionTypeLongitudinal = (Boolean)attributes.get(
				"collectionTypeLongitudinal");

		if (collectionTypeLongitudinal != null) {
			setCollectionTypeLongitudinal(collectionTypeLongitudinal);
		}

		Boolean collectionTypeTwinStudy = (Boolean)attributes.get(
				"collectionTypeTwinStudy");

		if (collectionTypeTwinStudy != null) {
			setCollectionTypeTwinStudy(collectionTypeTwinStudy);
		}

		Boolean collectionTypeQualityControl = (Boolean)attributes.get(
				"collectionTypeQualityControl");

		if (collectionTypeQualityControl != null) {
			setCollectionTypeQualityControl(collectionTypeQualityControl);
		}

		Boolean collectionTypePopulationBased = (Boolean)attributes.get(
				"collectionTypePopulationBased");

		if (collectionTypePopulationBased != null) {
			setCollectionTypePopulationBased(collectionTypePopulationBased);
		}

		Boolean collectionTypeDiseaseSpecific = (Boolean)attributes.get(
				"collectionTypeDiseaseSpecific");

		if (collectionTypeDiseaseSpecific != null) {
			setCollectionTypeDiseaseSpecific(collectionTypeDiseaseSpecific);
		}

		Boolean collectionTypeBirthCohort = (Boolean)attributes.get(
				"collectionTypeBirthCohort");

		if (collectionTypeBirthCohort != null) {
			setCollectionTypeBirthCohort(collectionTypeBirthCohort);
		}

		String collectionTypeOther = (String)attributes.get(
				"collectionTypeOther");

		if (collectionTypeOther != null) {
			setCollectionTypeOther(collectionTypeOther);
		}

		Long collectionOrderOfMagnitude = (Long)attributes.get(
				"collectionOrderOfMagnitude");

		if (collectionOrderOfMagnitude != null) {
			setCollectionOrderOfMagnitude(collectionOrderOfMagnitude);
		}

		String bioresourceReference = (String)attributes.get(
				"bioresourceReference");

		if (bioresourceReference != null) {
			setBioresourceReference(bioresourceReference);
		}

		String contactIDRef = (String)attributes.get("contactIDRef");

		if (contactIDRef != null) {
			setContactIDRef(contactIDRef);
		}

		Long contactPriority = (Long)attributes.get("contactPriority");

		if (contactPriority != null) {
			setContactPriority(contactPriority);
		}

		String biobankNetworkIDRef = (String)attributes.get(
				"biobankNetworkIDRef");

		if (biobankNetworkIDRef != null) {
			setBiobankNetworkIDRef(biobankNetworkIDRef);
		}

		String geoLatitude = (String)attributes.get("geoLatitude");

		if (geoLatitude != null) {
			setGeoLatitude(geoLatitude);
		}

		String geoLongitude = (String)attributes.get("geoLongitude");

		if (geoLongitude != null) {
			setGeoLongitude(geoLongitude);
		}

		Boolean collaborationPartnersCommercial = (Boolean)attributes.get(
				"collaborationPartnersCommercial");

		if (collaborationPartnersCommercial != null) {
			setCollaborationPartnersCommercial(collaborationPartnersCommercial);
		}

		Boolean collaborationPartnersNonforprofit = (Boolean)attributes.get(
				"collaborationPartnersNonforprofit");

		if (collaborationPartnersNonforprofit != null) {
			setCollaborationPartnersNonforprofit(collaborationPartnersNonforprofit);
		}

		String collectionAcronym = (String)attributes.get("collectionAcronym");

		if (collectionAcronym != null) {
			setCollectionAcronym(collectionAcronym);
		}

		String collectionDescription = (String)attributes.get(
				"collectionDescription");

		if (collectionDescription != null) {
			setCollectionDescription(collectionDescription);
		}

		Boolean collectionSexMale = (Boolean)attributes.get("collectionSexMale");

		if (collectionSexMale != null) {
			setCollectionSexMale(collectionSexMale);
		}

		Boolean collectionSexFemale = (Boolean)attributes.get(
				"collectionSexFemale");

		if (collectionSexFemale != null) {
			setCollectionSexFemale(collectionSexFemale);
		}

		Boolean collectionSexUnknown = (Boolean)attributes.get(
				"collectionSexUnknown");

		if (collectionSexUnknown != null) {
			setCollectionSexUnknown(collectionSexUnknown);
		}

		Boolean collectionSexUndiferrentiated = (Boolean)attributes.get(
				"collectionSexUndiferrentiated");

		if (collectionSexUndiferrentiated != null) {
			setCollectionSexUndiferrentiated(collectionSexUndiferrentiated);
		}

		Long collectionAgeLow = (Long)attributes.get("collectionAgeLow");

		if (collectionAgeLow != null) {
			setCollectionAgeLow(collectionAgeLow);
		}

		Long collectionAgeHigh = (Long)attributes.get("collectionAgeHigh");

		if (collectionAgeHigh != null) {
			setCollectionAgeHigh(collectionAgeHigh);
		}

		String collectionAgeUnit = (String)attributes.get("collectionAgeUnit");

		if (collectionAgeUnit != null) {
			setCollectionAgeUnit(collectionAgeUnit);
		}

		Boolean collectionAvailableBiologicalSamples = (Boolean)attributes.get(
				"collectionAvailableBiologicalSamples");

		if (collectionAvailableBiologicalSamples != null) {
			setCollectionAvailableBiologicalSamples(collectionAvailableBiologicalSamples);
		}

		Boolean collectionAvailableSurveyData = (Boolean)attributes.get(
				"collectionAvailableSurveyData");

		if (collectionAvailableSurveyData != null) {
			setCollectionAvailableSurveyData(collectionAvailableSurveyData);
		}

		Boolean collectionAvailableImagingData = (Boolean)attributes.get(
				"collectionAvailableImagingData");

		if (collectionAvailableImagingData != null) {
			setCollectionAvailableImagingData(collectionAvailableImagingData);
		}

		Boolean collectionAvailableMedicalRecords = (Boolean)attributes.get(
				"collectionAvailableMedicalRecords");

		if (collectionAvailableMedicalRecords != null) {
			setCollectionAvailableMedicalRecords(collectionAvailableMedicalRecords);
		}

		Boolean collectionAvailableNationalRegistries = (Boolean)attributes.get(
				"collectionAvailableNationalRegistries");

		if (collectionAvailableNationalRegistries != null) {
			setCollectionAvailableNationalRegistries(collectionAvailableNationalRegistries);
		}

		Boolean collectionAvailableGenealogicalRecords = (Boolean)attributes.get(
				"collectionAvailableGenealogicalRecords");

		if (collectionAvailableGenealogicalRecords != null) {
			setCollectionAvailableGenealogicalRecords(collectionAvailableGenealogicalRecords);
		}

		Boolean collectionAvailablePhysioBiochemMeasurements = (Boolean)attributes.get(
				"collectionAvailablePhysioBiochemMeasurements");

		if (collectionAvailablePhysioBiochemMeasurements != null) {
			setCollectionAvailablePhysioBiochemMeasurements(collectionAvailablePhysioBiochemMeasurements);
		}

		String collectionAvailableOther = (String)attributes.get(
				"collectionAvailableOther");

		if (collectionAvailableOther != null) {
			setCollectionAvailableOther(collectionAvailableOther);
		}

		Boolean temperatureRoom = (Boolean)attributes.get("temperatureRoom");

		if (temperatureRoom != null) {
			setTemperatureRoom(temperatureRoom);
		}

		Boolean temperature2to10 = (Boolean)attributes.get("temperature2to10");

		if (temperature2to10 != null) {
			setTemperature2to10(temperature2to10);
		}

		Boolean temperature18to35 = (Boolean)attributes.get("temperature18to35");

		if (temperature18to35 != null) {
			setTemperature18to35(temperature18to35);
		}

		Boolean temperature60to85 = (Boolean)attributes.get("temperature60to85");

		if (temperature60to85 != null) {
			setTemperature60to85(temperature60to85);
		}

		Boolean temperatureLN = (Boolean)attributes.get("temperatureLN");

		if (temperatureLN != null) {
			setTemperatureLN(temperatureLN);
		}

		String temperatureOther = (String)attributes.get("temperatureOther");

		if (temperatureOther != null) {
			setTemperatureOther(temperatureOther);
		}

		String diagnosisAvailable = (String)attributes.get("diagnosisAvailable");

		if (diagnosisAvailable != null) {
			setDiagnosisAvailable(diagnosisAvailable);
		}

		String collectionHeadFirstName = (String)attributes.get(
				"collectionHeadFirstName");

		if (collectionHeadFirstName != null) {
			setCollectionHeadFirstName(collectionHeadFirstName);
		}

		String collectionHeadLastName = (String)attributes.get(
				"collectionHeadLastName");

		if (collectionHeadLastName != null) {
			setCollectionHeadLastName(collectionHeadLastName);
		}

		String collectionHeadRole = (String)attributes.get("collectionHeadRole");

		if (collectionHeadRole != null) {
			setCollectionHeadRole(collectionHeadRole);
		}

		Boolean collectionSampleAccessFee = (Boolean)attributes.get(
				"collectionSampleAccessFee");

		if (collectionSampleAccessFee != null) {
			setCollectionSampleAccessFee(collectionSampleAccessFee);
		}

		Boolean collectionSampleAccessJointProjects = (Boolean)attributes.get(
				"collectionSampleAccessJointProjects");

		if (collectionSampleAccessJointProjects != null) {
			setCollectionSampleAccessJointProjects(collectionSampleAccessJointProjects);
		}

		String collectionSampleAccessDescription = (String)attributes.get(
				"collectionSampleAccessDescription");

		if (collectionSampleAccessDescription != null) {
			setCollectionSampleAccessDescription(collectionSampleAccessDescription);
		}

		String collectionSampleAccessURI = (String)attributes.get(
				"collectionSampleAccessURI");

		if (collectionSampleAccessURI != null) {
			setCollectionSampleAccessURI(collectionSampleAccessURI);
		}

		Boolean collectionDataAccessFee = (Boolean)attributes.get(
				"collectionDataAccessFee");

		if (collectionDataAccessFee != null) {
			setCollectionDataAccessFee(collectionDataAccessFee);
		}

		Boolean collectionDataAccessJointProjects = (Boolean)attributes.get(
				"collectionDataAccessJointProjects");

		if (collectionDataAccessJointProjects != null) {
			setCollectionDataAccessJointProjects(collectionDataAccessJointProjects);
		}

		String collectionDataAccessDescription = (String)attributes.get(
				"collectionDataAccessDescription");

		if (collectionDataAccessDescription != null) {
			setCollectionDataAccessDescription(collectionDataAccessDescription);
		}

		String collectionDataAccessURI = (String)attributes.get(
				"collectionDataAccessURI");

		if (collectionDataAccessURI != null) {
			setCollectionDataAccessURI(collectionDataAccessURI);
		}

		Long collectionSize = (Long)attributes.get("collectionSize");

		if (collectionSize != null) {
			setCollectionSize(collectionSize);
		}

		Long collectionSizeTimestamp = (Long)attributes.get(
				"collectionSizeTimestamp");

		if (collectionSizeTimestamp != null) {
			setCollectionSizeTimestamp(collectionSizeTimestamp);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getD2collectionId() {
		return _d2collectionId;
	}

	@Override
	public void setD2collectionId(long d2collectionId) {
		_columnBitmask |= D2COLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalD2collectionId) {
			_setOriginalD2collectionId = true;

			_originalD2collectionId = _d2collectionId;
		}

		_d2collectionId = d2collectionId;
	}

	public long getOriginalD2collectionId() {
		return _originalD2collectionId;
	}

	@Override
	public long getBiobankId() {
		return _biobankId;
	}

	@Override
	public void setBiobankId(long biobankId) {
		_columnBitmask |= BIOBANKID_COLUMN_BITMASK;

		if (!_setOriginalBiobankId) {
			_setOriginalBiobankId = true;

			_originalBiobankId = _biobankId;
		}

		_biobankId = biobankId;
	}

	public long getOriginalBiobankId() {
		return _originalBiobankId;
	}

	@Override
	public long getParentd2collectionId() {
		return _parentd2collectionId;
	}

	@Override
	public void setParentd2collectionId(long parentd2collectionId) {
		_columnBitmask |= PARENTD2COLLECTIONID_COLUMN_BITMASK;

		if (!_setOriginalParentd2collectionId) {
			_setOriginalParentd2collectionId = true;

			_originalParentd2collectionId = _parentd2collectionId;
		}

		_parentd2collectionId = parentd2collectionId;
	}

	public long getOriginalParentd2collectionId() {
		return _originalParentd2collectionId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getUpdateuuid() {
		if (_updateuuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _updateuuid;
		}
	}

	@Override
	public void setUpdateuuid(String updateuuid) {
		_columnBitmask |= UPDATEUUID_COLUMN_BITMASK;

		if (_originalUpdateuuid == null) {
			_originalUpdateuuid = _updateuuid;
		}

		_updateuuid = updateuuid;
	}

	public String getOriginalUpdateuuid() {
		return GetterUtil.getString(_originalUpdateuuid);
	}

	@Override
	public String getBbmricollectionID() {
		if (_bbmricollectionID == null) {
			return StringPool.BLANK;
		}
		else {
			return _bbmricollectionID;
		}
	}

	@Override
	public void setBbmricollectionID(String bbmricollectionID) {
		_columnBitmask |= BBMRICOLLECTIONID_COLUMN_BITMASK;

		if (_originalBbmricollectionID == null) {
			_originalBbmricollectionID = _bbmricollectionID;
		}

		_bbmricollectionID = bbmricollectionID;
	}

	public String getOriginalBbmricollectionID() {
		return GetterUtil.getString(_originalBbmricollectionID);
	}

	@Override
	public String getBbmriparentcollectionID() {
		if (_bbmriparentcollectionID == null) {
			return StringPool.BLANK;
		}
		else {
			return _bbmriparentcollectionID;
		}
	}

	@Override
	public void setBbmriparentcollectionID(String bbmriparentcollectionID) {
		_bbmriparentcollectionID = bbmriparentcollectionID;
	}

	@Override
	public String getBbmribiobankID() {
		if (_bbmribiobankID == null) {
			return StringPool.BLANK;
		}
		else {
			return _bbmribiobankID;
		}
	}

	@Override
	public void setBbmribiobankID(String bbmribiobankID) {
		_columnBitmask |= BBMRIBIOBANKID_COLUMN_BITMASK;

		if (_originalBbmribiobankID == null) {
			_originalBbmribiobankID = _bbmribiobankID;
		}

		_bbmribiobankID = bbmribiobankID;
	}

	public String getOriginalBbmribiobankID() {
		return GetterUtil.getString(_originalBbmribiobankID);
	}

	@Override
	public String getCollectionName() {
		if (_collectionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionName;
		}
	}

	@Override
	public void setCollectionName(String collectionName) {
		_collectionName = collectionName;
	}

	@Override
	public boolean getMaterialStoredDNA() {
		return _materialStoredDNA;
	}

	@Override
	public boolean isMaterialStoredDNA() {
		return _materialStoredDNA;
	}

	@Override
	public void setMaterialStoredDNA(boolean materialStoredDNA) {
		_materialStoredDNA = materialStoredDNA;
	}

	@Override
	public boolean getMaterialStoredPlasma() {
		return _materialStoredPlasma;
	}

	@Override
	public boolean isMaterialStoredPlasma() {
		return _materialStoredPlasma;
	}

	@Override
	public void setMaterialStoredPlasma(boolean materialStoredPlasma) {
		_materialStoredPlasma = materialStoredPlasma;
	}

	@Override
	public boolean getMaterialStoredSerum() {
		return _materialStoredSerum;
	}

	@Override
	public boolean isMaterialStoredSerum() {
		return _materialStoredSerum;
	}

	@Override
	public void setMaterialStoredSerum(boolean materialStoredSerum) {
		_materialStoredSerum = materialStoredSerum;
	}

	@Override
	public boolean getMaterialStoredUrine() {
		return _materialStoredUrine;
	}

	@Override
	public boolean isMaterialStoredUrine() {
		return _materialStoredUrine;
	}

	@Override
	public void setMaterialStoredUrine(boolean materialStoredUrine) {
		_materialStoredUrine = materialStoredUrine;
	}

	@Override
	public boolean getMaterialStoredSaliva() {
		return _materialStoredSaliva;
	}

	@Override
	public boolean isMaterialStoredSaliva() {
		return _materialStoredSaliva;
	}

	@Override
	public void setMaterialStoredSaliva(boolean materialStoredSaliva) {
		_materialStoredSaliva = materialStoredSaliva;
	}

	@Override
	public boolean getMaterialStoredFaeces() {
		return _materialStoredFaeces;
	}

	@Override
	public boolean isMaterialStoredFaeces() {
		return _materialStoredFaeces;
	}

	@Override
	public void setMaterialStoredFaeces(boolean materialStoredFaeces) {
		_materialStoredFaeces = materialStoredFaeces;
	}

	@Override
	public boolean getMaterialStoredRNA() {
		return _materialStoredRNA;
	}

	@Override
	public boolean isMaterialStoredRNA() {
		return _materialStoredRNA;
	}

	@Override
	public void setMaterialStoredRNA(boolean materialStoredRNA) {
		_materialStoredRNA = materialStoredRNA;
	}

	@Override
	public boolean getMaterialStoredBlood() {
		return _materialStoredBlood;
	}

	@Override
	public boolean isMaterialStoredBlood() {
		return _materialStoredBlood;
	}

	@Override
	public void setMaterialStoredBlood(boolean materialStoredBlood) {
		_materialStoredBlood = materialStoredBlood;
	}

	@Override
	public boolean getMaterialStoredTissueFrozen() {
		return _materialStoredTissueFrozen;
	}

	@Override
	public boolean isMaterialStoredTissueFrozen() {
		return _materialStoredTissueFrozen;
	}

	@Override
	public void setMaterialStoredTissueFrozen(
		boolean materialStoredTissueFrozen) {
		_materialStoredTissueFrozen = materialStoredTissueFrozen;
	}

	@Override
	public boolean getMaterialStoredTissueFFPE() {
		return _materialStoredTissueFFPE;
	}

	@Override
	public boolean isMaterialStoredTissueFFPE() {
		return _materialStoredTissueFFPE;
	}

	@Override
	public void setMaterialStoredTissueFFPE(boolean materialStoredTissueFFPE) {
		_materialStoredTissueFFPE = materialStoredTissueFFPE;
	}

	@Override
	public boolean getMaterialStoredImmortalizedCellLines() {
		return _materialStoredImmortalizedCellLines;
	}

	@Override
	public boolean isMaterialStoredImmortalizedCellLines() {
		return _materialStoredImmortalizedCellLines;
	}

	@Override
	public void setMaterialStoredImmortalizedCellLines(
		boolean materialStoredImmortalizedCellLines) {
		_materialStoredImmortalizedCellLines = materialStoredImmortalizedCellLines;
	}

	@Override
	public boolean getMaterialStoredIsolatedPathogen() {
		return _materialStoredIsolatedPathogen;
	}

	@Override
	public boolean isMaterialStoredIsolatedPathogen() {
		return _materialStoredIsolatedPathogen;
	}

	@Override
	public void setMaterialStoredIsolatedPathogen(
		boolean materialStoredIsolatedPathogen) {
		_materialStoredIsolatedPathogen = materialStoredIsolatedPathogen;
	}

	@Override
	public String getMaterialStoredOther() {
		if (_materialStoredOther == null) {
			return StringPool.BLANK;
		}
		else {
			return _materialStoredOther;
		}
	}

	@Override
	public void setMaterialStoredOther(String materialStoredOther) {
		_materialStoredOther = materialStoredOther;
	}

	@Override
	public boolean getCollectionTypeCaseControl() {
		return _collectionTypeCaseControl;
	}

	@Override
	public boolean isCollectionTypeCaseControl() {
		return _collectionTypeCaseControl;
	}

	@Override
	public void setCollectionTypeCaseControl(boolean collectionTypeCaseControl) {
		_collectionTypeCaseControl = collectionTypeCaseControl;
	}

	@Override
	public boolean getCollectionTypeCohort() {
		return _collectionTypeCohort;
	}

	@Override
	public boolean isCollectionTypeCohort() {
		return _collectionTypeCohort;
	}

	@Override
	public void setCollectionTypeCohort(boolean collectionTypeCohort) {
		_collectionTypeCohort = collectionTypeCohort;
	}

	@Override
	public boolean getCollectionTypeCrossSectional() {
		return _collectionTypeCrossSectional;
	}

	@Override
	public boolean isCollectionTypeCrossSectional() {
		return _collectionTypeCrossSectional;
	}

	@Override
	public void setCollectionTypeCrossSectional(
		boolean collectionTypeCrossSectional) {
		_collectionTypeCrossSectional = collectionTypeCrossSectional;
	}

	@Override
	public boolean getCollectionTypeLongitudinal() {
		return _collectionTypeLongitudinal;
	}

	@Override
	public boolean isCollectionTypeLongitudinal() {
		return _collectionTypeLongitudinal;
	}

	@Override
	public void setCollectionTypeLongitudinal(
		boolean collectionTypeLongitudinal) {
		_collectionTypeLongitudinal = collectionTypeLongitudinal;
	}

	@Override
	public boolean getCollectionTypeTwinStudy() {
		return _collectionTypeTwinStudy;
	}

	@Override
	public boolean isCollectionTypeTwinStudy() {
		return _collectionTypeTwinStudy;
	}

	@Override
	public void setCollectionTypeTwinStudy(boolean collectionTypeTwinStudy) {
		_collectionTypeTwinStudy = collectionTypeTwinStudy;
	}

	@Override
	public boolean getCollectionTypeQualityControl() {
		return _collectionTypeQualityControl;
	}

	@Override
	public boolean isCollectionTypeQualityControl() {
		return _collectionTypeQualityControl;
	}

	@Override
	public void setCollectionTypeQualityControl(
		boolean collectionTypeQualityControl) {
		_collectionTypeQualityControl = collectionTypeQualityControl;
	}

	@Override
	public boolean getCollectionTypePopulationBased() {
		return _collectionTypePopulationBased;
	}

	@Override
	public boolean isCollectionTypePopulationBased() {
		return _collectionTypePopulationBased;
	}

	@Override
	public void setCollectionTypePopulationBased(
		boolean collectionTypePopulationBased) {
		_collectionTypePopulationBased = collectionTypePopulationBased;
	}

	@Override
	public boolean getCollectionTypeDiseaseSpecific() {
		return _collectionTypeDiseaseSpecific;
	}

	@Override
	public boolean isCollectionTypeDiseaseSpecific() {
		return _collectionTypeDiseaseSpecific;
	}

	@Override
	public void setCollectionTypeDiseaseSpecific(
		boolean collectionTypeDiseaseSpecific) {
		_collectionTypeDiseaseSpecific = collectionTypeDiseaseSpecific;
	}

	@Override
	public boolean getCollectionTypeBirthCohort() {
		return _collectionTypeBirthCohort;
	}

	@Override
	public boolean isCollectionTypeBirthCohort() {
		return _collectionTypeBirthCohort;
	}

	@Override
	public void setCollectionTypeBirthCohort(boolean collectionTypeBirthCohort) {
		_collectionTypeBirthCohort = collectionTypeBirthCohort;
	}

	@Override
	public String getCollectionTypeOther() {
		if (_collectionTypeOther == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionTypeOther;
		}
	}

	@Override
	public void setCollectionTypeOther(String collectionTypeOther) {
		_collectionTypeOther = collectionTypeOther;
	}

	@Override
	public long getCollectionOrderOfMagnitude() {
		return _collectionOrderOfMagnitude;
	}

	@Override
	public void setCollectionOrderOfMagnitude(long collectionOrderOfMagnitude) {
		_collectionOrderOfMagnitude = collectionOrderOfMagnitude;
	}

	@Override
	public String getBioresourceReference() {
		if (_bioresourceReference == null) {
			return StringPool.BLANK;
		}
		else {
			return _bioresourceReference;
		}
	}

	@Override
	public void setBioresourceReference(String bioresourceReference) {
		_bioresourceReference = bioresourceReference;
	}

	@Override
	public String getContactIDRef() {
		if (_contactIDRef == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactIDRef;
		}
	}

	@Override
	public void setContactIDRef(String contactIDRef) {
		_contactIDRef = contactIDRef;
	}

	@Override
	public long getContactPriority() {
		return _contactPriority;
	}

	@Override
	public void setContactPriority(long contactPriority) {
		_contactPriority = contactPriority;
	}

	@Override
	public String getBiobankNetworkIDRef() {
		if (_biobankNetworkIDRef == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankNetworkIDRef;
		}
	}

	@Override
	public void setBiobankNetworkIDRef(String biobankNetworkIDRef) {
		_biobankNetworkIDRef = biobankNetworkIDRef;
	}

	@Override
	public String getGeoLatitude() {
		if (_geoLatitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _geoLatitude;
		}
	}

	@Override
	public void setGeoLatitude(String geoLatitude) {
		_geoLatitude = geoLatitude;
	}

	@Override
	public String getGeoLongitude() {
		if (_geoLongitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _geoLongitude;
		}
	}

	@Override
	public void setGeoLongitude(String geoLongitude) {
		_geoLongitude = geoLongitude;
	}

	@Override
	public boolean getCollaborationPartnersCommercial() {
		return _collaborationPartnersCommercial;
	}

	@Override
	public boolean isCollaborationPartnersCommercial() {
		return _collaborationPartnersCommercial;
	}

	@Override
	public void setCollaborationPartnersCommercial(
		boolean collaborationPartnersCommercial) {
		_collaborationPartnersCommercial = collaborationPartnersCommercial;
	}

	@Override
	public boolean getCollaborationPartnersNonforprofit() {
		return _collaborationPartnersNonforprofit;
	}

	@Override
	public boolean isCollaborationPartnersNonforprofit() {
		return _collaborationPartnersNonforprofit;
	}

	@Override
	public void setCollaborationPartnersNonforprofit(
		boolean collaborationPartnersNonforprofit) {
		_collaborationPartnersNonforprofit = collaborationPartnersNonforprofit;
	}

	@Override
	public String getCollectionAcronym() {
		if (_collectionAcronym == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionAcronym;
		}
	}

	@Override
	public void setCollectionAcronym(String collectionAcronym) {
		_collectionAcronym = collectionAcronym;
	}

	@Override
	public String getCollectionDescription() {
		if (_collectionDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionDescription;
		}
	}

	@Override
	public void setCollectionDescription(String collectionDescription) {
		_collectionDescription = collectionDescription;
	}

	@Override
	public boolean getCollectionSexMale() {
		return _collectionSexMale;
	}

	@Override
	public boolean isCollectionSexMale() {
		return _collectionSexMale;
	}

	@Override
	public void setCollectionSexMale(boolean collectionSexMale) {
		_collectionSexMale = collectionSexMale;
	}

	@Override
	public boolean getCollectionSexFemale() {
		return _collectionSexFemale;
	}

	@Override
	public boolean isCollectionSexFemale() {
		return _collectionSexFemale;
	}

	@Override
	public void setCollectionSexFemale(boolean collectionSexFemale) {
		_collectionSexFemale = collectionSexFemale;
	}

	@Override
	public boolean getCollectionSexUnknown() {
		return _collectionSexUnknown;
	}

	@Override
	public boolean isCollectionSexUnknown() {
		return _collectionSexUnknown;
	}

	@Override
	public void setCollectionSexUnknown(boolean collectionSexUnknown) {
		_collectionSexUnknown = collectionSexUnknown;
	}

	@Override
	public boolean getCollectionSexUndiferrentiated() {
		return _collectionSexUndiferrentiated;
	}

	@Override
	public boolean isCollectionSexUndiferrentiated() {
		return _collectionSexUndiferrentiated;
	}

	@Override
	public void setCollectionSexUndiferrentiated(
		boolean collectionSexUndiferrentiated) {
		_collectionSexUndiferrentiated = collectionSexUndiferrentiated;
	}

	@Override
	public long getCollectionAgeLow() {
		return _collectionAgeLow;
	}

	@Override
	public void setCollectionAgeLow(long collectionAgeLow) {
		_collectionAgeLow = collectionAgeLow;
	}

	@Override
	public long getCollectionAgeHigh() {
		return _collectionAgeHigh;
	}

	@Override
	public void setCollectionAgeHigh(long collectionAgeHigh) {
		_collectionAgeHigh = collectionAgeHigh;
	}

	@Override
	public String getCollectionAgeUnit() {
		if (_collectionAgeUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionAgeUnit;
		}
	}

	@Override
	public void setCollectionAgeUnit(String collectionAgeUnit) {
		_collectionAgeUnit = collectionAgeUnit;
	}

	@Override
	public boolean getCollectionAvailableBiologicalSamples() {
		return _collectionAvailableBiologicalSamples;
	}

	@Override
	public boolean isCollectionAvailableBiologicalSamples() {
		return _collectionAvailableBiologicalSamples;
	}

	@Override
	public void setCollectionAvailableBiologicalSamples(
		boolean collectionAvailableBiologicalSamples) {
		_collectionAvailableBiologicalSamples = collectionAvailableBiologicalSamples;
	}

	@Override
	public boolean getCollectionAvailableSurveyData() {
		return _collectionAvailableSurveyData;
	}

	@Override
	public boolean isCollectionAvailableSurveyData() {
		return _collectionAvailableSurveyData;
	}

	@Override
	public void setCollectionAvailableSurveyData(
		boolean collectionAvailableSurveyData) {
		_collectionAvailableSurveyData = collectionAvailableSurveyData;
	}

	@Override
	public boolean getCollectionAvailableImagingData() {
		return _collectionAvailableImagingData;
	}

	@Override
	public boolean isCollectionAvailableImagingData() {
		return _collectionAvailableImagingData;
	}

	@Override
	public void setCollectionAvailableImagingData(
		boolean collectionAvailableImagingData) {
		_collectionAvailableImagingData = collectionAvailableImagingData;
	}

	@Override
	public boolean getCollectionAvailableMedicalRecords() {
		return _collectionAvailableMedicalRecords;
	}

	@Override
	public boolean isCollectionAvailableMedicalRecords() {
		return _collectionAvailableMedicalRecords;
	}

	@Override
	public void setCollectionAvailableMedicalRecords(
		boolean collectionAvailableMedicalRecords) {
		_collectionAvailableMedicalRecords = collectionAvailableMedicalRecords;
	}

	@Override
	public boolean getCollectionAvailableNationalRegistries() {
		return _collectionAvailableNationalRegistries;
	}

	@Override
	public boolean isCollectionAvailableNationalRegistries() {
		return _collectionAvailableNationalRegistries;
	}

	@Override
	public void setCollectionAvailableNationalRegistries(
		boolean collectionAvailableNationalRegistries) {
		_collectionAvailableNationalRegistries = collectionAvailableNationalRegistries;
	}

	@Override
	public boolean getCollectionAvailableGenealogicalRecords() {
		return _collectionAvailableGenealogicalRecords;
	}

	@Override
	public boolean isCollectionAvailableGenealogicalRecords() {
		return _collectionAvailableGenealogicalRecords;
	}

	@Override
	public void setCollectionAvailableGenealogicalRecords(
		boolean collectionAvailableGenealogicalRecords) {
		_collectionAvailableGenealogicalRecords = collectionAvailableGenealogicalRecords;
	}

	@Override
	public boolean getCollectionAvailablePhysioBiochemMeasurements() {
		return _collectionAvailablePhysioBiochemMeasurements;
	}

	@Override
	public boolean isCollectionAvailablePhysioBiochemMeasurements() {
		return _collectionAvailablePhysioBiochemMeasurements;
	}

	@Override
	public void setCollectionAvailablePhysioBiochemMeasurements(
		boolean collectionAvailablePhysioBiochemMeasurements) {
		_collectionAvailablePhysioBiochemMeasurements = collectionAvailablePhysioBiochemMeasurements;
	}

	@Override
	public String getCollectionAvailableOther() {
		if (_collectionAvailableOther == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionAvailableOther;
		}
	}

	@Override
	public void setCollectionAvailableOther(String collectionAvailableOther) {
		_collectionAvailableOther = collectionAvailableOther;
	}

	@Override
	public boolean getTemperatureRoom() {
		return _temperatureRoom;
	}

	@Override
	public boolean isTemperatureRoom() {
		return _temperatureRoom;
	}

	@Override
	public void setTemperatureRoom(boolean temperatureRoom) {
		_temperatureRoom = temperatureRoom;
	}

	@Override
	public boolean getTemperature2to10() {
		return _temperature2to10;
	}

	@Override
	public boolean isTemperature2to10() {
		return _temperature2to10;
	}

	@Override
	public void setTemperature2to10(boolean temperature2to10) {
		_temperature2to10 = temperature2to10;
	}

	@Override
	public boolean getTemperature18to35() {
		return _temperature18to35;
	}

	@Override
	public boolean isTemperature18to35() {
		return _temperature18to35;
	}

	@Override
	public void setTemperature18to35(boolean temperature18to35) {
		_temperature18to35 = temperature18to35;
	}

	@Override
	public boolean getTemperature60to85() {
		return _temperature60to85;
	}

	@Override
	public boolean isTemperature60to85() {
		return _temperature60to85;
	}

	@Override
	public void setTemperature60to85(boolean temperature60to85) {
		_temperature60to85 = temperature60to85;
	}

	@Override
	public boolean getTemperatureLN() {
		return _temperatureLN;
	}

	@Override
	public boolean isTemperatureLN() {
		return _temperatureLN;
	}

	@Override
	public void setTemperatureLN(boolean temperatureLN) {
		_temperatureLN = temperatureLN;
	}

	@Override
	public String getTemperatureOther() {
		if (_temperatureOther == null) {
			return StringPool.BLANK;
		}
		else {
			return _temperatureOther;
		}
	}

	@Override
	public void setTemperatureOther(String temperatureOther) {
		_temperatureOther = temperatureOther;
	}

	@Override
	public String getDiagnosisAvailable() {
		if (_diagnosisAvailable == null) {
			return StringPool.BLANK;
		}
		else {
			return _diagnosisAvailable;
		}
	}

	@Override
	public void setDiagnosisAvailable(String diagnosisAvailable) {
		_diagnosisAvailable = diagnosisAvailable;
	}

	@Override
	public String getCollectionHeadFirstName() {
		if (_collectionHeadFirstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionHeadFirstName;
		}
	}

	@Override
	public void setCollectionHeadFirstName(String collectionHeadFirstName) {
		_collectionHeadFirstName = collectionHeadFirstName;
	}

	@Override
	public String getCollectionHeadLastName() {
		if (_collectionHeadLastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionHeadLastName;
		}
	}

	@Override
	public void setCollectionHeadLastName(String collectionHeadLastName) {
		_collectionHeadLastName = collectionHeadLastName;
	}

	@Override
	public String getCollectionHeadRole() {
		if (_collectionHeadRole == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionHeadRole;
		}
	}

	@Override
	public void setCollectionHeadRole(String collectionHeadRole) {
		_collectionHeadRole = collectionHeadRole;
	}

	@Override
	public boolean getCollectionSampleAccessFee() {
		return _collectionSampleAccessFee;
	}

	@Override
	public boolean isCollectionSampleAccessFee() {
		return _collectionSampleAccessFee;
	}

	@Override
	public void setCollectionSampleAccessFee(boolean collectionSampleAccessFee) {
		_collectionSampleAccessFee = collectionSampleAccessFee;
	}

	@Override
	public boolean getCollectionSampleAccessJointProjects() {
		return _collectionSampleAccessJointProjects;
	}

	@Override
	public boolean isCollectionSampleAccessJointProjects() {
		return _collectionSampleAccessJointProjects;
	}

	@Override
	public void setCollectionSampleAccessJointProjects(
		boolean collectionSampleAccessJointProjects) {
		_collectionSampleAccessJointProjects = collectionSampleAccessJointProjects;
	}

	@Override
	public String getCollectionSampleAccessDescription() {
		if (_collectionSampleAccessDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionSampleAccessDescription;
		}
	}

	@Override
	public void setCollectionSampleAccessDescription(
		String collectionSampleAccessDescription) {
		_collectionSampleAccessDescription = collectionSampleAccessDescription;
	}

	@Override
	public String getCollectionSampleAccessURI() {
		if (_collectionSampleAccessURI == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionSampleAccessURI;
		}
	}

	@Override
	public void setCollectionSampleAccessURI(String collectionSampleAccessURI) {
		_collectionSampleAccessURI = collectionSampleAccessURI;
	}

	@Override
	public boolean getCollectionDataAccessFee() {
		return _collectionDataAccessFee;
	}

	@Override
	public boolean isCollectionDataAccessFee() {
		return _collectionDataAccessFee;
	}

	@Override
	public void setCollectionDataAccessFee(boolean collectionDataAccessFee) {
		_collectionDataAccessFee = collectionDataAccessFee;
	}

	@Override
	public boolean getCollectionDataAccessJointProjects() {
		return _collectionDataAccessJointProjects;
	}

	@Override
	public boolean isCollectionDataAccessJointProjects() {
		return _collectionDataAccessJointProjects;
	}

	@Override
	public void setCollectionDataAccessJointProjects(
		boolean collectionDataAccessJointProjects) {
		_collectionDataAccessJointProjects = collectionDataAccessJointProjects;
	}

	@Override
	public String getCollectionDataAccessDescription() {
		if (_collectionDataAccessDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionDataAccessDescription;
		}
	}

	@Override
	public void setCollectionDataAccessDescription(
		String collectionDataAccessDescription) {
		_collectionDataAccessDescription = collectionDataAccessDescription;
	}

	@Override
	public String getCollectionDataAccessURI() {
		if (_collectionDataAccessURI == null) {
			return StringPool.BLANK;
		}
		else {
			return _collectionDataAccessURI;
		}
	}

	@Override
	public void setCollectionDataAccessURI(String collectionDataAccessURI) {
		_collectionDataAccessURI = collectionDataAccessURI;
	}

	@Override
	public long getCollectionSize() {
		return _collectionSize;
	}

	@Override
	public void setCollectionSize(long collectionSize) {
		_collectionSize = collectionSize;
	}

	@Override
	public long getCollectionSizeTimestamp() {
		return _collectionSizeTimestamp;
	}

	@Override
	public void setCollectionSizeTimestamp(long collectionSizeTimestamp) {
		_collectionSizeTimestamp = collectionSizeTimestamp;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				D2Collection.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			D2Collection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public D2Collection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (D2Collection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		D2CollectionImpl d2CollectionImpl = new D2CollectionImpl();

		d2CollectionImpl.setUuid(getUuid());
		d2CollectionImpl.setD2collectionId(getD2collectionId());
		d2CollectionImpl.setBiobankId(getBiobankId());
		d2CollectionImpl.setParentd2collectionId(getParentd2collectionId());
		d2CollectionImpl.setCompanyId(getCompanyId());
		d2CollectionImpl.setGroupId(getGroupId());
		d2CollectionImpl.setUserId(getUserId());
		d2CollectionImpl.setUserName(getUserName());
		d2CollectionImpl.setCreateDate(getCreateDate());
		d2CollectionImpl.setModifiedDate(getModifiedDate());
		d2CollectionImpl.setUpdateuuid(getUpdateuuid());
		d2CollectionImpl.setBbmricollectionID(getBbmricollectionID());
		d2CollectionImpl.setBbmriparentcollectionID(getBbmriparentcollectionID());
		d2CollectionImpl.setBbmribiobankID(getBbmribiobankID());
		d2CollectionImpl.setCollectionName(getCollectionName());
		d2CollectionImpl.setMaterialStoredDNA(getMaterialStoredDNA());
		d2CollectionImpl.setMaterialStoredPlasma(getMaterialStoredPlasma());
		d2CollectionImpl.setMaterialStoredSerum(getMaterialStoredSerum());
		d2CollectionImpl.setMaterialStoredUrine(getMaterialStoredUrine());
		d2CollectionImpl.setMaterialStoredSaliva(getMaterialStoredSaliva());
		d2CollectionImpl.setMaterialStoredFaeces(getMaterialStoredFaeces());
		d2CollectionImpl.setMaterialStoredRNA(getMaterialStoredRNA());
		d2CollectionImpl.setMaterialStoredBlood(getMaterialStoredBlood());
		d2CollectionImpl.setMaterialStoredTissueFrozen(getMaterialStoredTissueFrozen());
		d2CollectionImpl.setMaterialStoredTissueFFPE(getMaterialStoredTissueFFPE());
		d2CollectionImpl.setMaterialStoredImmortalizedCellLines(getMaterialStoredImmortalizedCellLines());
		d2CollectionImpl.setMaterialStoredIsolatedPathogen(getMaterialStoredIsolatedPathogen());
		d2CollectionImpl.setMaterialStoredOther(getMaterialStoredOther());
		d2CollectionImpl.setCollectionTypeCaseControl(getCollectionTypeCaseControl());
		d2CollectionImpl.setCollectionTypeCohort(getCollectionTypeCohort());
		d2CollectionImpl.setCollectionTypeCrossSectional(getCollectionTypeCrossSectional());
		d2CollectionImpl.setCollectionTypeLongitudinal(getCollectionTypeLongitudinal());
		d2CollectionImpl.setCollectionTypeTwinStudy(getCollectionTypeTwinStudy());
		d2CollectionImpl.setCollectionTypeQualityControl(getCollectionTypeQualityControl());
		d2CollectionImpl.setCollectionTypePopulationBased(getCollectionTypePopulationBased());
		d2CollectionImpl.setCollectionTypeDiseaseSpecific(getCollectionTypeDiseaseSpecific());
		d2CollectionImpl.setCollectionTypeBirthCohort(getCollectionTypeBirthCohort());
		d2CollectionImpl.setCollectionTypeOther(getCollectionTypeOther());
		d2CollectionImpl.setCollectionOrderOfMagnitude(getCollectionOrderOfMagnitude());
		d2CollectionImpl.setBioresourceReference(getBioresourceReference());
		d2CollectionImpl.setContactIDRef(getContactIDRef());
		d2CollectionImpl.setContactPriority(getContactPriority());
		d2CollectionImpl.setBiobankNetworkIDRef(getBiobankNetworkIDRef());
		d2CollectionImpl.setGeoLatitude(getGeoLatitude());
		d2CollectionImpl.setGeoLongitude(getGeoLongitude());
		d2CollectionImpl.setCollaborationPartnersCommercial(getCollaborationPartnersCommercial());
		d2CollectionImpl.setCollaborationPartnersNonforprofit(getCollaborationPartnersNonforprofit());
		d2CollectionImpl.setCollectionAcronym(getCollectionAcronym());
		d2CollectionImpl.setCollectionDescription(getCollectionDescription());
		d2CollectionImpl.setCollectionSexMale(getCollectionSexMale());
		d2CollectionImpl.setCollectionSexFemale(getCollectionSexFemale());
		d2CollectionImpl.setCollectionSexUnknown(getCollectionSexUnknown());
		d2CollectionImpl.setCollectionSexUndiferrentiated(getCollectionSexUndiferrentiated());
		d2CollectionImpl.setCollectionAgeLow(getCollectionAgeLow());
		d2CollectionImpl.setCollectionAgeHigh(getCollectionAgeHigh());
		d2CollectionImpl.setCollectionAgeUnit(getCollectionAgeUnit());
		d2CollectionImpl.setCollectionAvailableBiologicalSamples(getCollectionAvailableBiologicalSamples());
		d2CollectionImpl.setCollectionAvailableSurveyData(getCollectionAvailableSurveyData());
		d2CollectionImpl.setCollectionAvailableImagingData(getCollectionAvailableImagingData());
		d2CollectionImpl.setCollectionAvailableMedicalRecords(getCollectionAvailableMedicalRecords());
		d2CollectionImpl.setCollectionAvailableNationalRegistries(getCollectionAvailableNationalRegistries());
		d2CollectionImpl.setCollectionAvailableGenealogicalRecords(getCollectionAvailableGenealogicalRecords());
		d2CollectionImpl.setCollectionAvailablePhysioBiochemMeasurements(getCollectionAvailablePhysioBiochemMeasurements());
		d2CollectionImpl.setCollectionAvailableOther(getCollectionAvailableOther());
		d2CollectionImpl.setTemperatureRoom(getTemperatureRoom());
		d2CollectionImpl.setTemperature2to10(getTemperature2to10());
		d2CollectionImpl.setTemperature18to35(getTemperature18to35());
		d2CollectionImpl.setTemperature60to85(getTemperature60to85());
		d2CollectionImpl.setTemperatureLN(getTemperatureLN());
		d2CollectionImpl.setTemperatureOther(getTemperatureOther());
		d2CollectionImpl.setDiagnosisAvailable(getDiagnosisAvailable());
		d2CollectionImpl.setCollectionHeadFirstName(getCollectionHeadFirstName());
		d2CollectionImpl.setCollectionHeadLastName(getCollectionHeadLastName());
		d2CollectionImpl.setCollectionHeadRole(getCollectionHeadRole());
		d2CollectionImpl.setCollectionSampleAccessFee(getCollectionSampleAccessFee());
		d2CollectionImpl.setCollectionSampleAccessJointProjects(getCollectionSampleAccessJointProjects());
		d2CollectionImpl.setCollectionSampleAccessDescription(getCollectionSampleAccessDescription());
		d2CollectionImpl.setCollectionSampleAccessURI(getCollectionSampleAccessURI());
		d2CollectionImpl.setCollectionDataAccessFee(getCollectionDataAccessFee());
		d2CollectionImpl.setCollectionDataAccessJointProjects(getCollectionDataAccessJointProjects());
		d2CollectionImpl.setCollectionDataAccessDescription(getCollectionDataAccessDescription());
		d2CollectionImpl.setCollectionDataAccessURI(getCollectionDataAccessURI());
		d2CollectionImpl.setCollectionSize(getCollectionSize());
		d2CollectionImpl.setCollectionSizeTimestamp(getCollectionSizeTimestamp());

		d2CollectionImpl.resetOriginalValues();

		return d2CollectionImpl;
	}

	@Override
	public int compareTo(D2Collection d2Collection) {
		long primaryKey = d2Collection.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof D2Collection)) {
			return false;
		}

		D2Collection d2Collection = (D2Collection)obj;

		long primaryKey = d2Collection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		D2CollectionModelImpl d2CollectionModelImpl = this;

		d2CollectionModelImpl._originalUuid = d2CollectionModelImpl._uuid;

		d2CollectionModelImpl._originalD2collectionId = d2CollectionModelImpl._d2collectionId;

		d2CollectionModelImpl._setOriginalD2collectionId = false;

		d2CollectionModelImpl._originalBiobankId = d2CollectionModelImpl._biobankId;

		d2CollectionModelImpl._setOriginalBiobankId = false;

		d2CollectionModelImpl._originalParentd2collectionId = d2CollectionModelImpl._parentd2collectionId;

		d2CollectionModelImpl._setOriginalParentd2collectionId = false;

		d2CollectionModelImpl._originalCompanyId = d2CollectionModelImpl._companyId;

		d2CollectionModelImpl._setOriginalCompanyId = false;

		d2CollectionModelImpl._originalGroupId = d2CollectionModelImpl._groupId;

		d2CollectionModelImpl._setOriginalGroupId = false;

		d2CollectionModelImpl._originalUpdateuuid = d2CollectionModelImpl._updateuuid;

		d2CollectionModelImpl._originalBbmricollectionID = d2CollectionModelImpl._bbmricollectionID;

		d2CollectionModelImpl._originalBbmribiobankID = d2CollectionModelImpl._bbmribiobankID;

		d2CollectionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<D2Collection> toCacheModel() {
		D2CollectionCacheModel d2CollectionCacheModel = new D2CollectionCacheModel();

		d2CollectionCacheModel.uuid = getUuid();

		String uuid = d2CollectionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			d2CollectionCacheModel.uuid = null;
		}

		d2CollectionCacheModel.d2collectionId = getD2collectionId();

		d2CollectionCacheModel.biobankId = getBiobankId();

		d2CollectionCacheModel.parentd2collectionId = getParentd2collectionId();

		d2CollectionCacheModel.companyId = getCompanyId();

		d2CollectionCacheModel.groupId = getGroupId();

		d2CollectionCacheModel.userId = getUserId();

		d2CollectionCacheModel.userName = getUserName();

		String userName = d2CollectionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			d2CollectionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			d2CollectionCacheModel.createDate = createDate.getTime();
		}
		else {
			d2CollectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			d2CollectionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			d2CollectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		d2CollectionCacheModel.updateuuid = getUpdateuuid();

		String updateuuid = d2CollectionCacheModel.updateuuid;

		if ((updateuuid != null) && (updateuuid.length() == 0)) {
			d2CollectionCacheModel.updateuuid = null;
		}

		d2CollectionCacheModel.bbmricollectionID = getBbmricollectionID();

		String bbmricollectionID = d2CollectionCacheModel.bbmricollectionID;

		if ((bbmricollectionID != null) && (bbmricollectionID.length() == 0)) {
			d2CollectionCacheModel.bbmricollectionID = null;
		}

		d2CollectionCacheModel.bbmriparentcollectionID = getBbmriparentcollectionID();

		String bbmriparentcollectionID = d2CollectionCacheModel.bbmriparentcollectionID;

		if ((bbmriparentcollectionID != null) &&
				(bbmriparentcollectionID.length() == 0)) {
			d2CollectionCacheModel.bbmriparentcollectionID = null;
		}

		d2CollectionCacheModel.bbmribiobankID = getBbmribiobankID();

		String bbmribiobankID = d2CollectionCacheModel.bbmribiobankID;

		if ((bbmribiobankID != null) && (bbmribiobankID.length() == 0)) {
			d2CollectionCacheModel.bbmribiobankID = null;
		}

		d2CollectionCacheModel.collectionName = getCollectionName();

		String collectionName = d2CollectionCacheModel.collectionName;

		if ((collectionName != null) && (collectionName.length() == 0)) {
			d2CollectionCacheModel.collectionName = null;
		}

		d2CollectionCacheModel.materialStoredDNA = getMaterialStoredDNA();

		d2CollectionCacheModel.materialStoredPlasma = getMaterialStoredPlasma();

		d2CollectionCacheModel.materialStoredSerum = getMaterialStoredSerum();

		d2CollectionCacheModel.materialStoredUrine = getMaterialStoredUrine();

		d2CollectionCacheModel.materialStoredSaliva = getMaterialStoredSaliva();

		d2CollectionCacheModel.materialStoredFaeces = getMaterialStoredFaeces();

		d2CollectionCacheModel.materialStoredRNA = getMaterialStoredRNA();

		d2CollectionCacheModel.materialStoredBlood = getMaterialStoredBlood();

		d2CollectionCacheModel.materialStoredTissueFrozen = getMaterialStoredTissueFrozen();

		d2CollectionCacheModel.materialStoredTissueFFPE = getMaterialStoredTissueFFPE();

		d2CollectionCacheModel.materialStoredImmortalizedCellLines = getMaterialStoredImmortalizedCellLines();

		d2CollectionCacheModel.materialStoredIsolatedPathogen = getMaterialStoredIsolatedPathogen();

		d2CollectionCacheModel.materialStoredOther = getMaterialStoredOther();

		String materialStoredOther = d2CollectionCacheModel.materialStoredOther;

		if ((materialStoredOther != null) &&
				(materialStoredOther.length() == 0)) {
			d2CollectionCacheModel.materialStoredOther = null;
		}

		d2CollectionCacheModel.collectionTypeCaseControl = getCollectionTypeCaseControl();

		d2CollectionCacheModel.collectionTypeCohort = getCollectionTypeCohort();

		d2CollectionCacheModel.collectionTypeCrossSectional = getCollectionTypeCrossSectional();

		d2CollectionCacheModel.collectionTypeLongitudinal = getCollectionTypeLongitudinal();

		d2CollectionCacheModel.collectionTypeTwinStudy = getCollectionTypeTwinStudy();

		d2CollectionCacheModel.collectionTypeQualityControl = getCollectionTypeQualityControl();

		d2CollectionCacheModel.collectionTypePopulationBased = getCollectionTypePopulationBased();

		d2CollectionCacheModel.collectionTypeDiseaseSpecific = getCollectionTypeDiseaseSpecific();

		d2CollectionCacheModel.collectionTypeBirthCohort = getCollectionTypeBirthCohort();

		d2CollectionCacheModel.collectionTypeOther = getCollectionTypeOther();

		String collectionTypeOther = d2CollectionCacheModel.collectionTypeOther;

		if ((collectionTypeOther != null) &&
				(collectionTypeOther.length() == 0)) {
			d2CollectionCacheModel.collectionTypeOther = null;
		}

		d2CollectionCacheModel.collectionOrderOfMagnitude = getCollectionOrderOfMagnitude();

		d2CollectionCacheModel.bioresourceReference = getBioresourceReference();

		String bioresourceReference = d2CollectionCacheModel.bioresourceReference;

		if ((bioresourceReference != null) &&
				(bioresourceReference.length() == 0)) {
			d2CollectionCacheModel.bioresourceReference = null;
		}

		d2CollectionCacheModel.contactIDRef = getContactIDRef();

		String contactIDRef = d2CollectionCacheModel.contactIDRef;

		if ((contactIDRef != null) && (contactIDRef.length() == 0)) {
			d2CollectionCacheModel.contactIDRef = null;
		}

		d2CollectionCacheModel.contactPriority = getContactPriority();

		d2CollectionCacheModel.biobankNetworkIDRef = getBiobankNetworkIDRef();

		String biobankNetworkIDRef = d2CollectionCacheModel.biobankNetworkIDRef;

		if ((biobankNetworkIDRef != null) &&
				(biobankNetworkIDRef.length() == 0)) {
			d2CollectionCacheModel.biobankNetworkIDRef = null;
		}

		d2CollectionCacheModel.geoLatitude = getGeoLatitude();

		String geoLatitude = d2CollectionCacheModel.geoLatitude;

		if ((geoLatitude != null) && (geoLatitude.length() == 0)) {
			d2CollectionCacheModel.geoLatitude = null;
		}

		d2CollectionCacheModel.geoLongitude = getGeoLongitude();

		String geoLongitude = d2CollectionCacheModel.geoLongitude;

		if ((geoLongitude != null) && (geoLongitude.length() == 0)) {
			d2CollectionCacheModel.geoLongitude = null;
		}

		d2CollectionCacheModel.collaborationPartnersCommercial = getCollaborationPartnersCommercial();

		d2CollectionCacheModel.collaborationPartnersNonforprofit = getCollaborationPartnersNonforprofit();

		d2CollectionCacheModel.collectionAcronym = getCollectionAcronym();

		String collectionAcronym = d2CollectionCacheModel.collectionAcronym;

		if ((collectionAcronym != null) && (collectionAcronym.length() == 0)) {
			d2CollectionCacheModel.collectionAcronym = null;
		}

		d2CollectionCacheModel.collectionDescription = getCollectionDescription();

		String collectionDescription = d2CollectionCacheModel.collectionDescription;

		if ((collectionDescription != null) &&
				(collectionDescription.length() == 0)) {
			d2CollectionCacheModel.collectionDescription = null;
		}

		d2CollectionCacheModel.collectionSexMale = getCollectionSexMale();

		d2CollectionCacheModel.collectionSexFemale = getCollectionSexFemale();

		d2CollectionCacheModel.collectionSexUnknown = getCollectionSexUnknown();

		d2CollectionCacheModel.collectionSexUndiferrentiated = getCollectionSexUndiferrentiated();

		d2CollectionCacheModel.collectionAgeLow = getCollectionAgeLow();

		d2CollectionCacheModel.collectionAgeHigh = getCollectionAgeHigh();

		d2CollectionCacheModel.collectionAgeUnit = getCollectionAgeUnit();

		String collectionAgeUnit = d2CollectionCacheModel.collectionAgeUnit;

		if ((collectionAgeUnit != null) && (collectionAgeUnit.length() == 0)) {
			d2CollectionCacheModel.collectionAgeUnit = null;
		}

		d2CollectionCacheModel.collectionAvailableBiologicalSamples = getCollectionAvailableBiologicalSamples();

		d2CollectionCacheModel.collectionAvailableSurveyData = getCollectionAvailableSurveyData();

		d2CollectionCacheModel.collectionAvailableImagingData = getCollectionAvailableImagingData();

		d2CollectionCacheModel.collectionAvailableMedicalRecords = getCollectionAvailableMedicalRecords();

		d2CollectionCacheModel.collectionAvailableNationalRegistries = getCollectionAvailableNationalRegistries();

		d2CollectionCacheModel.collectionAvailableGenealogicalRecords = getCollectionAvailableGenealogicalRecords();

		d2CollectionCacheModel.collectionAvailablePhysioBiochemMeasurements = getCollectionAvailablePhysioBiochemMeasurements();

		d2CollectionCacheModel.collectionAvailableOther = getCollectionAvailableOther();

		String collectionAvailableOther = d2CollectionCacheModel.collectionAvailableOther;

		if ((collectionAvailableOther != null) &&
				(collectionAvailableOther.length() == 0)) {
			d2CollectionCacheModel.collectionAvailableOther = null;
		}

		d2CollectionCacheModel.temperatureRoom = getTemperatureRoom();

		d2CollectionCacheModel.temperature2to10 = getTemperature2to10();

		d2CollectionCacheModel.temperature18to35 = getTemperature18to35();

		d2CollectionCacheModel.temperature60to85 = getTemperature60to85();

		d2CollectionCacheModel.temperatureLN = getTemperatureLN();

		d2CollectionCacheModel.temperatureOther = getTemperatureOther();

		String temperatureOther = d2CollectionCacheModel.temperatureOther;

		if ((temperatureOther != null) && (temperatureOther.length() == 0)) {
			d2CollectionCacheModel.temperatureOther = null;
		}

		d2CollectionCacheModel.diagnosisAvailable = getDiagnosisAvailable();

		String diagnosisAvailable = d2CollectionCacheModel.diagnosisAvailable;

		if ((diagnosisAvailable != null) && (diagnosisAvailable.length() == 0)) {
			d2CollectionCacheModel.diagnosisAvailable = null;
		}

		d2CollectionCacheModel.collectionHeadFirstName = getCollectionHeadFirstName();

		String collectionHeadFirstName = d2CollectionCacheModel.collectionHeadFirstName;

		if ((collectionHeadFirstName != null) &&
				(collectionHeadFirstName.length() == 0)) {
			d2CollectionCacheModel.collectionHeadFirstName = null;
		}

		d2CollectionCacheModel.collectionHeadLastName = getCollectionHeadLastName();

		String collectionHeadLastName = d2CollectionCacheModel.collectionHeadLastName;

		if ((collectionHeadLastName != null) &&
				(collectionHeadLastName.length() == 0)) {
			d2CollectionCacheModel.collectionHeadLastName = null;
		}

		d2CollectionCacheModel.collectionHeadRole = getCollectionHeadRole();

		String collectionHeadRole = d2CollectionCacheModel.collectionHeadRole;

		if ((collectionHeadRole != null) && (collectionHeadRole.length() == 0)) {
			d2CollectionCacheModel.collectionHeadRole = null;
		}

		d2CollectionCacheModel.collectionSampleAccessFee = getCollectionSampleAccessFee();

		d2CollectionCacheModel.collectionSampleAccessJointProjects = getCollectionSampleAccessJointProjects();

		d2CollectionCacheModel.collectionSampleAccessDescription = getCollectionSampleAccessDescription();

		String collectionSampleAccessDescription = d2CollectionCacheModel.collectionSampleAccessDescription;

		if ((collectionSampleAccessDescription != null) &&
				(collectionSampleAccessDescription.length() == 0)) {
			d2CollectionCacheModel.collectionSampleAccessDescription = null;
		}

		d2CollectionCacheModel.collectionSampleAccessURI = getCollectionSampleAccessURI();

		String collectionSampleAccessURI = d2CollectionCacheModel.collectionSampleAccessURI;

		if ((collectionSampleAccessURI != null) &&
				(collectionSampleAccessURI.length() == 0)) {
			d2CollectionCacheModel.collectionSampleAccessURI = null;
		}

		d2CollectionCacheModel.collectionDataAccessFee = getCollectionDataAccessFee();

		d2CollectionCacheModel.collectionDataAccessJointProjects = getCollectionDataAccessJointProjects();

		d2CollectionCacheModel.collectionDataAccessDescription = getCollectionDataAccessDescription();

		String collectionDataAccessDescription = d2CollectionCacheModel.collectionDataAccessDescription;

		if ((collectionDataAccessDescription != null) &&
				(collectionDataAccessDescription.length() == 0)) {
			d2CollectionCacheModel.collectionDataAccessDescription = null;
		}

		d2CollectionCacheModel.collectionDataAccessURI = getCollectionDataAccessURI();

		String collectionDataAccessURI = d2CollectionCacheModel.collectionDataAccessURI;

		if ((collectionDataAccessURI != null) &&
				(collectionDataAccessURI.length() == 0)) {
			d2CollectionCacheModel.collectionDataAccessURI = null;
		}

		d2CollectionCacheModel.collectionSize = getCollectionSize();

		d2CollectionCacheModel.collectionSizeTimestamp = getCollectionSizeTimestamp();

		return d2CollectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(169);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", d2collectionId=");
		sb.append(getD2collectionId());
		sb.append(", biobankId=");
		sb.append(getBiobankId());
		sb.append(", parentd2collectionId=");
		sb.append(getParentd2collectionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", updateuuid=");
		sb.append(getUpdateuuid());
		sb.append(", bbmricollectionID=");
		sb.append(getBbmricollectionID());
		sb.append(", bbmriparentcollectionID=");
		sb.append(getBbmriparentcollectionID());
		sb.append(", bbmribiobankID=");
		sb.append(getBbmribiobankID());
		sb.append(", collectionName=");
		sb.append(getCollectionName());
		sb.append(", materialStoredDNA=");
		sb.append(getMaterialStoredDNA());
		sb.append(", materialStoredPlasma=");
		sb.append(getMaterialStoredPlasma());
		sb.append(", materialStoredSerum=");
		sb.append(getMaterialStoredSerum());
		sb.append(", materialStoredUrine=");
		sb.append(getMaterialStoredUrine());
		sb.append(", materialStoredSaliva=");
		sb.append(getMaterialStoredSaliva());
		sb.append(", materialStoredFaeces=");
		sb.append(getMaterialStoredFaeces());
		sb.append(", materialStoredRNA=");
		sb.append(getMaterialStoredRNA());
		sb.append(", materialStoredBlood=");
		sb.append(getMaterialStoredBlood());
		sb.append(", materialStoredTissueFrozen=");
		sb.append(getMaterialStoredTissueFrozen());
		sb.append(", materialStoredTissueFFPE=");
		sb.append(getMaterialStoredTissueFFPE());
		sb.append(", materialStoredImmortalizedCellLines=");
		sb.append(getMaterialStoredImmortalizedCellLines());
		sb.append(", materialStoredIsolatedPathogen=");
		sb.append(getMaterialStoredIsolatedPathogen());
		sb.append(", materialStoredOther=");
		sb.append(getMaterialStoredOther());
		sb.append(", collectionTypeCaseControl=");
		sb.append(getCollectionTypeCaseControl());
		sb.append(", collectionTypeCohort=");
		sb.append(getCollectionTypeCohort());
		sb.append(", collectionTypeCrossSectional=");
		sb.append(getCollectionTypeCrossSectional());
		sb.append(", collectionTypeLongitudinal=");
		sb.append(getCollectionTypeLongitudinal());
		sb.append(", collectionTypeTwinStudy=");
		sb.append(getCollectionTypeTwinStudy());
		sb.append(", collectionTypeQualityControl=");
		sb.append(getCollectionTypeQualityControl());
		sb.append(", collectionTypePopulationBased=");
		sb.append(getCollectionTypePopulationBased());
		sb.append(", collectionTypeDiseaseSpecific=");
		sb.append(getCollectionTypeDiseaseSpecific());
		sb.append(", collectionTypeBirthCohort=");
		sb.append(getCollectionTypeBirthCohort());
		sb.append(", collectionTypeOther=");
		sb.append(getCollectionTypeOther());
		sb.append(", collectionOrderOfMagnitude=");
		sb.append(getCollectionOrderOfMagnitude());
		sb.append(", bioresourceReference=");
		sb.append(getBioresourceReference());
		sb.append(", contactIDRef=");
		sb.append(getContactIDRef());
		sb.append(", contactPriority=");
		sb.append(getContactPriority());
		sb.append(", biobankNetworkIDRef=");
		sb.append(getBiobankNetworkIDRef());
		sb.append(", geoLatitude=");
		sb.append(getGeoLatitude());
		sb.append(", geoLongitude=");
		sb.append(getGeoLongitude());
		sb.append(", collaborationPartnersCommercial=");
		sb.append(getCollaborationPartnersCommercial());
		sb.append(", collaborationPartnersNonforprofit=");
		sb.append(getCollaborationPartnersNonforprofit());
		sb.append(", collectionAcronym=");
		sb.append(getCollectionAcronym());
		sb.append(", collectionDescription=");
		sb.append(getCollectionDescription());
		sb.append(", collectionSexMale=");
		sb.append(getCollectionSexMale());
		sb.append(", collectionSexFemale=");
		sb.append(getCollectionSexFemale());
		sb.append(", collectionSexUnknown=");
		sb.append(getCollectionSexUnknown());
		sb.append(", collectionSexUndiferrentiated=");
		sb.append(getCollectionSexUndiferrentiated());
		sb.append(", collectionAgeLow=");
		sb.append(getCollectionAgeLow());
		sb.append(", collectionAgeHigh=");
		sb.append(getCollectionAgeHigh());
		sb.append(", collectionAgeUnit=");
		sb.append(getCollectionAgeUnit());
		sb.append(", collectionAvailableBiologicalSamples=");
		sb.append(getCollectionAvailableBiologicalSamples());
		sb.append(", collectionAvailableSurveyData=");
		sb.append(getCollectionAvailableSurveyData());
		sb.append(", collectionAvailableImagingData=");
		sb.append(getCollectionAvailableImagingData());
		sb.append(", collectionAvailableMedicalRecords=");
		sb.append(getCollectionAvailableMedicalRecords());
		sb.append(", collectionAvailableNationalRegistries=");
		sb.append(getCollectionAvailableNationalRegistries());
		sb.append(", collectionAvailableGenealogicalRecords=");
		sb.append(getCollectionAvailableGenealogicalRecords());
		sb.append(", collectionAvailablePhysioBiochemMeasurements=");
		sb.append(getCollectionAvailablePhysioBiochemMeasurements());
		sb.append(", collectionAvailableOther=");
		sb.append(getCollectionAvailableOther());
		sb.append(", temperatureRoom=");
		sb.append(getTemperatureRoom());
		sb.append(", temperature2to10=");
		sb.append(getTemperature2to10());
		sb.append(", temperature18to35=");
		sb.append(getTemperature18to35());
		sb.append(", temperature60to85=");
		sb.append(getTemperature60to85());
		sb.append(", temperatureLN=");
		sb.append(getTemperatureLN());
		sb.append(", temperatureOther=");
		sb.append(getTemperatureOther());
		sb.append(", diagnosisAvailable=");
		sb.append(getDiagnosisAvailable());
		sb.append(", collectionHeadFirstName=");
		sb.append(getCollectionHeadFirstName());
		sb.append(", collectionHeadLastName=");
		sb.append(getCollectionHeadLastName());
		sb.append(", collectionHeadRole=");
		sb.append(getCollectionHeadRole());
		sb.append(", collectionSampleAccessFee=");
		sb.append(getCollectionSampleAccessFee());
		sb.append(", collectionSampleAccessJointProjects=");
		sb.append(getCollectionSampleAccessJointProjects());
		sb.append(", collectionSampleAccessDescription=");
		sb.append(getCollectionSampleAccessDescription());
		sb.append(", collectionSampleAccessURI=");
		sb.append(getCollectionSampleAccessURI());
		sb.append(", collectionDataAccessFee=");
		sb.append(getCollectionDataAccessFee());
		sb.append(", collectionDataAccessJointProjects=");
		sb.append(getCollectionDataAccessJointProjects());
		sb.append(", collectionDataAccessDescription=");
		sb.append(getCollectionDataAccessDescription());
		sb.append(", collectionDataAccessURI=");
		sb.append(getCollectionDataAccessURI());
		sb.append(", collectionSize=");
		sb.append(getCollectionSize());
		sb.append(", collectionSizeTimestamp=");
		sb.append(getCollectionSizeTimestamp());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(256);

		sb.append("<model><model-name>");
		sb.append("at.meduni.liferay.portlet.bbmrieric.model.D2Collection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>d2collectionId</column-name><column-value><![CDATA[");
		sb.append(getD2collectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankId</column-name><column-value><![CDATA[");
		sb.append(getBiobankId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentd2collectionId</column-name><column-value><![CDATA[");
		sb.append(getParentd2collectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateuuid</column-name><column-value><![CDATA[");
		sb.append(getUpdateuuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bbmricollectionID</column-name><column-value><![CDATA[");
		sb.append(getBbmricollectionID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bbmriparentcollectionID</column-name><column-value><![CDATA[");
		sb.append(getBbmriparentcollectionID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bbmribiobankID</column-name><column-value><![CDATA[");
		sb.append(getBbmribiobankID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionName</column-name><column-value><![CDATA[");
		sb.append(getCollectionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredDNA</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredDNA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredPlasma</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredPlasma());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredSerum</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredSerum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredUrine</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredUrine());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredSaliva</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredSaliva());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredFaeces</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredFaeces());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredRNA</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredRNA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredBlood</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredBlood());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredTissueFrozen</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredTissueFrozen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredTissueFFPE</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredTissueFFPE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredImmortalizedCellLines</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredImmortalizedCellLines());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredIsolatedPathogen</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredIsolatedPathogen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>materialStoredOther</column-name><column-value><![CDATA[");
		sb.append(getMaterialStoredOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypeCaseControl</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypeCaseControl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypeCohort</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypeCohort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypeCrossSectional</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypeCrossSectional());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypeLongitudinal</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypeLongitudinal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypeTwinStudy</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypeTwinStudy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypeQualityControl</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypeQualityControl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypePopulationBased</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypePopulationBased());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypeDiseaseSpecific</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypeDiseaseSpecific());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypeBirthCohort</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypeBirthCohort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionTypeOther</column-name><column-value><![CDATA[");
		sb.append(getCollectionTypeOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionOrderOfMagnitude</column-name><column-value><![CDATA[");
		sb.append(getCollectionOrderOfMagnitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bioresourceReference</column-name><column-value><![CDATA[");
		sb.append(getBioresourceReference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactIDRef</column-name><column-value><![CDATA[");
		sb.append(getContactIDRef());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPriority</column-name><column-value><![CDATA[");
		sb.append(getContactPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankNetworkIDRef</column-name><column-value><![CDATA[");
		sb.append(getBiobankNetworkIDRef());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geoLatitude</column-name><column-value><![CDATA[");
		sb.append(getGeoLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geoLongitude</column-name><column-value><![CDATA[");
		sb.append(getGeoLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collaborationPartnersCommercial</column-name><column-value><![CDATA[");
		sb.append(getCollaborationPartnersCommercial());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collaborationPartnersNonforprofit</column-name><column-value><![CDATA[");
		sb.append(getCollaborationPartnersNonforprofit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAcronym</column-name><column-value><![CDATA[");
		sb.append(getCollectionAcronym());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionDescription</column-name><column-value><![CDATA[");
		sb.append(getCollectionDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSexMale</column-name><column-value><![CDATA[");
		sb.append(getCollectionSexMale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSexFemale</column-name><column-value><![CDATA[");
		sb.append(getCollectionSexFemale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSexUnknown</column-name><column-value><![CDATA[");
		sb.append(getCollectionSexUnknown());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSexUndiferrentiated</column-name><column-value><![CDATA[");
		sb.append(getCollectionSexUndiferrentiated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAgeLow</column-name><column-value><![CDATA[");
		sb.append(getCollectionAgeLow());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAgeHigh</column-name><column-value><![CDATA[");
		sb.append(getCollectionAgeHigh());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAgeUnit</column-name><column-value><![CDATA[");
		sb.append(getCollectionAgeUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAvailableBiologicalSamples</column-name><column-value><![CDATA[");
		sb.append(getCollectionAvailableBiologicalSamples());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAvailableSurveyData</column-name><column-value><![CDATA[");
		sb.append(getCollectionAvailableSurveyData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAvailableImagingData</column-name><column-value><![CDATA[");
		sb.append(getCollectionAvailableImagingData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAvailableMedicalRecords</column-name><column-value><![CDATA[");
		sb.append(getCollectionAvailableMedicalRecords());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAvailableNationalRegistries</column-name><column-value><![CDATA[");
		sb.append(getCollectionAvailableNationalRegistries());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAvailableGenealogicalRecords</column-name><column-value><![CDATA[");
		sb.append(getCollectionAvailableGenealogicalRecords());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAvailablePhysioBiochemMeasurements</column-name><column-value><![CDATA[");
		sb.append(getCollectionAvailablePhysioBiochemMeasurements());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionAvailableOther</column-name><column-value><![CDATA[");
		sb.append(getCollectionAvailableOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>temperatureRoom</column-name><column-value><![CDATA[");
		sb.append(getTemperatureRoom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>temperature2to10</column-name><column-value><![CDATA[");
		sb.append(getTemperature2to10());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>temperature18to35</column-name><column-value><![CDATA[");
		sb.append(getTemperature18to35());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>temperature60to85</column-name><column-value><![CDATA[");
		sb.append(getTemperature60to85());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>temperatureLN</column-name><column-value><![CDATA[");
		sb.append(getTemperatureLN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>temperatureOther</column-name><column-value><![CDATA[");
		sb.append(getTemperatureOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diagnosisAvailable</column-name><column-value><![CDATA[");
		sb.append(getDiagnosisAvailable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionHeadFirstName</column-name><column-value><![CDATA[");
		sb.append(getCollectionHeadFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionHeadLastName</column-name><column-value><![CDATA[");
		sb.append(getCollectionHeadLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionHeadRole</column-name><column-value><![CDATA[");
		sb.append(getCollectionHeadRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSampleAccessFee</column-name><column-value><![CDATA[");
		sb.append(getCollectionSampleAccessFee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSampleAccessJointProjects</column-name><column-value><![CDATA[");
		sb.append(getCollectionSampleAccessJointProjects());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSampleAccessDescription</column-name><column-value><![CDATA[");
		sb.append(getCollectionSampleAccessDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSampleAccessURI</column-name><column-value><![CDATA[");
		sb.append(getCollectionSampleAccessURI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionDataAccessFee</column-name><column-value><![CDATA[");
		sb.append(getCollectionDataAccessFee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionDataAccessJointProjects</column-name><column-value><![CDATA[");
		sb.append(getCollectionDataAccessJointProjects());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionDataAccessDescription</column-name><column-value><![CDATA[");
		sb.append(getCollectionDataAccessDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionDataAccessURI</column-name><column-value><![CDATA[");
		sb.append(getCollectionDataAccessURI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSize</column-name><column-value><![CDATA[");
		sb.append(getCollectionSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collectionSizeTimestamp</column-name><column-value><![CDATA[");
		sb.append(getCollectionSizeTimestamp());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = D2Collection.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			D2Collection.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _d2collectionId;
	private long _originalD2collectionId;
	private boolean _setOriginalD2collectionId;
	private long _biobankId;
	private long _originalBiobankId;
	private boolean _setOriginalBiobankId;
	private long _parentd2collectionId;
	private long _originalParentd2collectionId;
	private boolean _setOriginalParentd2collectionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _updateuuid;
	private String _originalUpdateuuid;
	private String _bbmricollectionID;
	private String _originalBbmricollectionID;
	private String _bbmriparentcollectionID;
	private String _bbmribiobankID;
	private String _originalBbmribiobankID;
	private String _collectionName;
	private boolean _materialStoredDNA;
	private boolean _materialStoredPlasma;
	private boolean _materialStoredSerum;
	private boolean _materialStoredUrine;
	private boolean _materialStoredSaliva;
	private boolean _materialStoredFaeces;
	private boolean _materialStoredRNA;
	private boolean _materialStoredBlood;
	private boolean _materialStoredTissueFrozen;
	private boolean _materialStoredTissueFFPE;
	private boolean _materialStoredImmortalizedCellLines;
	private boolean _materialStoredIsolatedPathogen;
	private String _materialStoredOther;
	private boolean _collectionTypeCaseControl;
	private boolean _collectionTypeCohort;
	private boolean _collectionTypeCrossSectional;
	private boolean _collectionTypeLongitudinal;
	private boolean _collectionTypeTwinStudy;
	private boolean _collectionTypeQualityControl;
	private boolean _collectionTypePopulationBased;
	private boolean _collectionTypeDiseaseSpecific;
	private boolean _collectionTypeBirthCohort;
	private String _collectionTypeOther;
	private long _collectionOrderOfMagnitude;
	private String _bioresourceReference;
	private String _contactIDRef;
	private long _contactPriority;
	private String _biobankNetworkIDRef;
	private String _geoLatitude;
	private String _geoLongitude;
	private boolean _collaborationPartnersCommercial;
	private boolean _collaborationPartnersNonforprofit;
	private String _collectionAcronym;
	private String _collectionDescription;
	private boolean _collectionSexMale;
	private boolean _collectionSexFemale;
	private boolean _collectionSexUnknown;
	private boolean _collectionSexUndiferrentiated;
	private long _collectionAgeLow;
	private long _collectionAgeHigh;
	private String _collectionAgeUnit;
	private boolean _collectionAvailableBiologicalSamples;
	private boolean _collectionAvailableSurveyData;
	private boolean _collectionAvailableImagingData;
	private boolean _collectionAvailableMedicalRecords;
	private boolean _collectionAvailableNationalRegistries;
	private boolean _collectionAvailableGenealogicalRecords;
	private boolean _collectionAvailablePhysioBiochemMeasurements;
	private String _collectionAvailableOther;
	private boolean _temperatureRoom;
	private boolean _temperature2to10;
	private boolean _temperature18to35;
	private boolean _temperature60to85;
	private boolean _temperatureLN;
	private String _temperatureOther;
	private String _diagnosisAvailable;
	private String _collectionHeadFirstName;
	private String _collectionHeadLastName;
	private String _collectionHeadRole;
	private boolean _collectionSampleAccessFee;
	private boolean _collectionSampleAccessJointProjects;
	private String _collectionSampleAccessDescription;
	private String _collectionSampleAccessURI;
	private boolean _collectionDataAccessFee;
	private boolean _collectionDataAccessJointProjects;
	private String _collectionDataAccessDescription;
	private String _collectionDataAccessURI;
	private long _collectionSize;
	private long _collectionSizeTimestamp;
	private long _columnBitmask;
	private D2Collection _escapedModel;
}