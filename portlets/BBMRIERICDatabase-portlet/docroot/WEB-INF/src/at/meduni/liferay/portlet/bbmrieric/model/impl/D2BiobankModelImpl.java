/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.meduni.liferay.portlet.bbmrieric.model.impl;

import at.meduni.liferay.portlet.bbmrieric.model.D2Biobank;
import at.meduni.liferay.portlet.bbmrieric.model.D2BiobankModel;
import at.meduni.liferay.portlet.bbmrieric.model.D2BiobankSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the D2Biobank service. Represents a row in the &quot;bbmrieric.d2biobank&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.meduni.liferay.portlet.bbmrieric.model.D2BiobankModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link D2BiobankImpl}.
 * </p>
 *
 * @author reihsr
 * @see D2BiobankImpl
 * @see at.meduni.liferay.portlet.bbmrieric.model.D2Biobank
 * @see at.meduni.liferay.portlet.bbmrieric.model.D2BiobankModel
 * @generated
 */
@JSON(strict = true)
public class D2BiobankModelImpl extends BaseModelImpl<D2Biobank>
	implements D2BiobankModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a d2 biobank model instance should use the {@link at.meduni.liferay.portlet.bbmrieric.model.D2Biobank} interface instead.
	 */
	public static final String TABLE_NAME = "bbmrieric.d2biobank";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "biobankId", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "updateuuid", Types.VARCHAR },
			{ "contactIDRef", Types.VARCHAR },
			{ "contactPriority", Types.BIGINT },
			{ "bbmribiobankID", Types.VARCHAR },
			{ "biobankName", Types.VARCHAR },
			{ "biobankJurisdicalPerson", Types.VARCHAR },
			{ "biobankCountry", Types.VARCHAR },
			{ "biobankPartnerCharterSigned", Types.BOOLEAN },
			{ "bioresourceReference", Types.VARCHAR },
			{ "biobankNetworkIDRef", Types.VARCHAR },
			{ "geoLatitude", Types.VARCHAR },
			{ "geoLongitude", Types.VARCHAR },
			{ "collaborationPartnersCommercial", Types.BOOLEAN },
			{ "collaborationPartnersNonforprofit", Types.BOOLEAN },
			{ "biobankITSupportAvailable", Types.BOOLEAN },
			{ "biobankITStaffSize", Types.BIGINT },
			{ "biobankISAvailable", Types.BOOLEAN },
			{ "biobankHISAvailable", Types.BOOLEAN },
			{ "biobankAcronym", Types.VARCHAR },
			{ "biobankDescription", Types.VARCHAR },
			{ "biobankURL", Types.VARCHAR },
			{ "biobankHeadFirstName", Types.VARCHAR },
			{ "biobankHeadLastName", Types.VARCHAR },
			{ "biobankHeadRole", Types.VARCHAR },
			{ "biobankClinical", Types.BOOLEAN },
			{ "biobankPopulation", Types.BOOLEAN },
			{ "biobankResearchStudy", Types.BOOLEAN },
			{ "biobankNonHuman", Types.BOOLEAN },
			{ "biobankCollection", Types.BOOLEAN },
			{ "biobankType", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table bbmrieric.d2biobank (uuid_ VARCHAR(75) null,biobankId LONG not null primary key,status INTEGER,statusByUserId LONG,statusByUserName TEXT null,statusDate DATE null,companyId LONG,groupId LONG,userId LONG,userName TEXT null,createDate DATE null,modifiedDate DATE null,updateuuid TEXT null,contactIDRef TEXT null,contactPriority LONG,bbmribiobankID TEXT null,biobankName TEXT null,biobankJurisdicalPerson TEXT null,biobankCountry TEXT null,biobankPartnerCharterSigned BOOLEAN,bioresourceReference TEXT null,biobankNetworkIDRef TEXT null,geoLatitude TEXT null,geoLongitude TEXT null,collaborationPartnersCommercial BOOLEAN,collaborationPartnersNonforprofit BOOLEAN,biobankITSupportAvailable BOOLEAN,biobankITStaffSize LONG,biobankISAvailable BOOLEAN,biobankHISAvailable BOOLEAN,biobankAcronym TEXT null,biobankDescription TEXT null,biobankURL VARCHAR(500) null,biobankHeadFirstName TEXT null,biobankHeadLastName TEXT null,biobankHeadRole VARCHAR(500) null,biobankClinical BOOLEAN,biobankPopulation BOOLEAN,biobankResearchStudy BOOLEAN,biobankNonHuman BOOLEAN,biobankCollection BOOLEAN,biobankType TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table bbmrieric.d2biobank";
	public static final String ORDER_BY_JPQL = " ORDER BY d2Biobank.biobankId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bbmrieric.d2biobank.biobankId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.meduni.liferay.portlet.bbmrieric.model.D2Biobank"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.meduni.liferay.portlet.bbmrieric.model.D2Biobank"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.meduni.liferay.portlet.bbmrieric.model.D2Biobank"),
			true);
	public static long BBMRIBIOBANKID_COLUMN_BITMASK = 1L;
	public static long BIOBANKID_COLUMN_BITMASK = 2L;
	public static long BIOBANKNAME_COLUMN_BITMASK = 4L;
	public static long COMPANYID_COLUMN_BITMASK = 8L;
	public static long GROUPID_COLUMN_BITMASK = 16L;
	public static long STATUS_COLUMN_BITMASK = 32L;
	public static long UPDATEUUID_COLUMN_BITMASK = 64L;
	public static long UUID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static D2Biobank toModel(D2BiobankSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		D2Biobank model = new D2BiobankImpl();

		model.setUuid(soapModel.getUuid());
		model.setBiobankId(soapModel.getBiobankId());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUpdateuuid(soapModel.getUpdateuuid());
		model.setContactIDRef(soapModel.getContactIDRef());
		model.setContactPriority(soapModel.getContactPriority());
		model.setBbmribiobankID(soapModel.getBbmribiobankID());
		model.setBiobankName(soapModel.getBiobankName());
		model.setBiobankJurisdicalPerson(soapModel.getBiobankJurisdicalPerson());
		model.setBiobankCountry(soapModel.getBiobankCountry());
		model.setBiobankPartnerCharterSigned(soapModel.getBiobankPartnerCharterSigned());
		model.setBioresourceReference(soapModel.getBioresourceReference());
		model.setBiobankNetworkIDRef(soapModel.getBiobankNetworkIDRef());
		model.setGeoLatitude(soapModel.getGeoLatitude());
		model.setGeoLongitude(soapModel.getGeoLongitude());
		model.setCollaborationPartnersCommercial(soapModel.getCollaborationPartnersCommercial());
		model.setCollaborationPartnersNonforprofit(soapModel.getCollaborationPartnersNonforprofit());
		model.setBiobankITSupportAvailable(soapModel.getBiobankITSupportAvailable());
		model.setBiobankITStaffSize(soapModel.getBiobankITStaffSize());
		model.setBiobankISAvailable(soapModel.getBiobankISAvailable());
		model.setBiobankHISAvailable(soapModel.getBiobankHISAvailable());
		model.setBiobankAcronym(soapModel.getBiobankAcronym());
		model.setBiobankDescription(soapModel.getBiobankDescription());
		model.setBiobankURL(soapModel.getBiobankURL());
		model.setBiobankHeadFirstName(soapModel.getBiobankHeadFirstName());
		model.setBiobankHeadLastName(soapModel.getBiobankHeadLastName());
		model.setBiobankHeadRole(soapModel.getBiobankHeadRole());
		model.setBiobankClinical(soapModel.getBiobankClinical());
		model.setBiobankPopulation(soapModel.getBiobankPopulation());
		model.setBiobankResearchStudy(soapModel.getBiobankResearchStudy());
		model.setBiobankNonHuman(soapModel.getBiobankNonHuman());
		model.setBiobankCollection(soapModel.getBiobankCollection());
		model.setBiobankType(soapModel.getBiobankType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<D2Biobank> toModels(D2BiobankSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<D2Biobank> models = new ArrayList<D2Biobank>(soapModels.length);

		for (D2BiobankSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.meduni.liferay.portlet.bbmrieric.model.D2Biobank"));

	public D2BiobankModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _biobankId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBiobankId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _biobankId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return D2Biobank.class;
	}

	@Override
	public String getModelClassName() {
		return D2Biobank.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("biobankId", getBiobankId());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("updateuuid", getUpdateuuid());
		attributes.put("contactIDRef", getContactIDRef());
		attributes.put("contactPriority", getContactPriority());
		attributes.put("bbmribiobankID", getBbmribiobankID());
		attributes.put("biobankName", getBiobankName());
		attributes.put("biobankJurisdicalPerson", getBiobankJurisdicalPerson());
		attributes.put("biobankCountry", getBiobankCountry());
		attributes.put("biobankPartnerCharterSigned",
			getBiobankPartnerCharterSigned());
		attributes.put("bioresourceReference", getBioresourceReference());
		attributes.put("biobankNetworkIDRef", getBiobankNetworkIDRef());
		attributes.put("geoLatitude", getGeoLatitude());
		attributes.put("geoLongitude", getGeoLongitude());
		attributes.put("collaborationPartnersCommercial",
			getCollaborationPartnersCommercial());
		attributes.put("collaborationPartnersNonforprofit",
			getCollaborationPartnersNonforprofit());
		attributes.put("biobankITSupportAvailable",
			getBiobankITSupportAvailable());
		attributes.put("biobankITStaffSize", getBiobankITStaffSize());
		attributes.put("biobankISAvailable", getBiobankISAvailable());
		attributes.put("biobankHISAvailable", getBiobankHISAvailable());
		attributes.put("biobankAcronym", getBiobankAcronym());
		attributes.put("biobankDescription", getBiobankDescription());
		attributes.put("biobankURL", getBiobankURL());
		attributes.put("biobankHeadFirstName", getBiobankHeadFirstName());
		attributes.put("biobankHeadLastName", getBiobankHeadLastName());
		attributes.put("biobankHeadRole", getBiobankHeadRole());
		attributes.put("biobankClinical", getBiobankClinical());
		attributes.put("biobankPopulation", getBiobankPopulation());
		attributes.put("biobankResearchStudy", getBiobankResearchStudy());
		attributes.put("biobankNonHuman", getBiobankNonHuman());
		attributes.put("biobankCollection", getBiobankCollection());
		attributes.put("biobankType", getBiobankType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long biobankId = (Long)attributes.get("biobankId");

		if (biobankId != null) {
			setBiobankId(biobankId);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String updateuuid = (String)attributes.get("updateuuid");

		if (updateuuid != null) {
			setUpdateuuid(updateuuid);
		}

		String contactIDRef = (String)attributes.get("contactIDRef");

		if (contactIDRef != null) {
			setContactIDRef(contactIDRef);
		}

		Long contactPriority = (Long)attributes.get("contactPriority");

		if (contactPriority != null) {
			setContactPriority(contactPriority);
		}

		String bbmribiobankID = (String)attributes.get("bbmribiobankID");

		if (bbmribiobankID != null) {
			setBbmribiobankID(bbmribiobankID);
		}

		String biobankName = (String)attributes.get("biobankName");

		if (biobankName != null) {
			setBiobankName(biobankName);
		}

		String biobankJurisdicalPerson = (String)attributes.get(
				"biobankJurisdicalPerson");

		if (biobankJurisdicalPerson != null) {
			setBiobankJurisdicalPerson(biobankJurisdicalPerson);
		}

		String biobankCountry = (String)attributes.get("biobankCountry");

		if (biobankCountry != null) {
			setBiobankCountry(biobankCountry);
		}

		Boolean biobankPartnerCharterSigned = (Boolean)attributes.get(
				"biobankPartnerCharterSigned");

		if (biobankPartnerCharterSigned != null) {
			setBiobankPartnerCharterSigned(biobankPartnerCharterSigned);
		}

		String bioresourceReference = (String)attributes.get(
				"bioresourceReference");

		if (bioresourceReference != null) {
			setBioresourceReference(bioresourceReference);
		}

		String biobankNetworkIDRef = (String)attributes.get(
				"biobankNetworkIDRef");

		if (biobankNetworkIDRef != null) {
			setBiobankNetworkIDRef(biobankNetworkIDRef);
		}

		String geoLatitude = (String)attributes.get("geoLatitude");

		if (geoLatitude != null) {
			setGeoLatitude(geoLatitude);
		}

		String geoLongitude = (String)attributes.get("geoLongitude");

		if (geoLongitude != null) {
			setGeoLongitude(geoLongitude);
		}

		Boolean collaborationPartnersCommercial = (Boolean)attributes.get(
				"collaborationPartnersCommercial");

		if (collaborationPartnersCommercial != null) {
			setCollaborationPartnersCommercial(collaborationPartnersCommercial);
		}

		Boolean collaborationPartnersNonforprofit = (Boolean)attributes.get(
				"collaborationPartnersNonforprofit");

		if (collaborationPartnersNonforprofit != null) {
			setCollaborationPartnersNonforprofit(collaborationPartnersNonforprofit);
		}

		Boolean biobankITSupportAvailable = (Boolean)attributes.get(
				"biobankITSupportAvailable");

		if (biobankITSupportAvailable != null) {
			setBiobankITSupportAvailable(biobankITSupportAvailable);
		}

		Long biobankITStaffSize = (Long)attributes.get("biobankITStaffSize");

		if (biobankITStaffSize != null) {
			setBiobankITStaffSize(biobankITStaffSize);
		}

		Boolean biobankISAvailable = (Boolean)attributes.get(
				"biobankISAvailable");

		if (biobankISAvailable != null) {
			setBiobankISAvailable(biobankISAvailable);
		}

		Boolean biobankHISAvailable = (Boolean)attributes.get(
				"biobankHISAvailable");

		if (biobankHISAvailable != null) {
			setBiobankHISAvailable(biobankHISAvailable);
		}

		String biobankAcronym = (String)attributes.get("biobankAcronym");

		if (biobankAcronym != null) {
			setBiobankAcronym(biobankAcronym);
		}

		String biobankDescription = (String)attributes.get("biobankDescription");

		if (biobankDescription != null) {
			setBiobankDescription(biobankDescription);
		}

		String biobankURL = (String)attributes.get("biobankURL");

		if (biobankURL != null) {
			setBiobankURL(biobankURL);
		}

		String biobankHeadFirstName = (String)attributes.get(
				"biobankHeadFirstName");

		if (biobankHeadFirstName != null) {
			setBiobankHeadFirstName(biobankHeadFirstName);
		}

		String biobankHeadLastName = (String)attributes.get(
				"biobankHeadLastName");

		if (biobankHeadLastName != null) {
			setBiobankHeadLastName(biobankHeadLastName);
		}

		String biobankHeadRole = (String)attributes.get("biobankHeadRole");

		if (biobankHeadRole != null) {
			setBiobankHeadRole(biobankHeadRole);
		}

		Boolean biobankClinical = (Boolean)attributes.get("biobankClinical");

		if (biobankClinical != null) {
			setBiobankClinical(biobankClinical);
		}

		Boolean biobankPopulation = (Boolean)attributes.get("biobankPopulation");

		if (biobankPopulation != null) {
			setBiobankPopulation(biobankPopulation);
		}

		Boolean biobankResearchStudy = (Boolean)attributes.get(
				"biobankResearchStudy");

		if (biobankResearchStudy != null) {
			setBiobankResearchStudy(biobankResearchStudy);
		}

		Boolean biobankNonHuman = (Boolean)attributes.get("biobankNonHuman");

		if (biobankNonHuman != null) {
			setBiobankNonHuman(biobankNonHuman);
		}

		Boolean biobankCollection = (Boolean)attributes.get("biobankCollection");

		if (biobankCollection != null) {
			setBiobankCollection(biobankCollection);
		}

		String biobankType = (String)attributes.get("biobankType");

		if (biobankType != null) {
			setBiobankType(biobankType);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getBiobankId() {
		return _biobankId;
	}

	@Override
	public void setBiobankId(long biobankId) {
		_columnBitmask |= BIOBANKID_COLUMN_BITMASK;

		if (!_setOriginalBiobankId) {
			_setOriginalBiobankId = true;

			_originalBiobankId = _biobankId;
		}

		_biobankId = biobankId;
	}

	public long getOriginalBiobankId() {
		return _originalBiobankId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getUpdateuuid() {
		if (_updateuuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _updateuuid;
		}
	}

	@Override
	public void setUpdateuuid(String updateuuid) {
		_columnBitmask |= UPDATEUUID_COLUMN_BITMASK;

		if (_originalUpdateuuid == null) {
			_originalUpdateuuid = _updateuuid;
		}

		_updateuuid = updateuuid;
	}

	public String getOriginalUpdateuuid() {
		return GetterUtil.getString(_originalUpdateuuid);
	}

	@JSON
	@Override
	public String getContactIDRef() {
		if (_contactIDRef == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactIDRef;
		}
	}

	@Override
	public void setContactIDRef(String contactIDRef) {
		_contactIDRef = contactIDRef;
	}

	@JSON
	@Override
	public long getContactPriority() {
		return _contactPriority;
	}

	@Override
	public void setContactPriority(long contactPriority) {
		_contactPriority = contactPriority;
	}

	@JSON
	@Override
	public String getBbmribiobankID() {
		if (_bbmribiobankID == null) {
			return StringPool.BLANK;
		}
		else {
			return _bbmribiobankID;
		}
	}

	@Override
	public void setBbmribiobankID(String bbmribiobankID) {
		_columnBitmask |= BBMRIBIOBANKID_COLUMN_BITMASK;

		if (_originalBbmribiobankID == null) {
			_originalBbmribiobankID = _bbmribiobankID;
		}

		_bbmribiobankID = bbmribiobankID;
	}

	public String getOriginalBbmribiobankID() {
		return GetterUtil.getString(_originalBbmribiobankID);
	}

	@JSON
	@Override
	public String getBiobankName() {
		if (_biobankName == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankName;
		}
	}

	@Override
	public void setBiobankName(String biobankName) {
		_columnBitmask |= BIOBANKNAME_COLUMN_BITMASK;

		if (_originalBiobankName == null) {
			_originalBiobankName = _biobankName;
		}

		_biobankName = biobankName;
	}

	public String getOriginalBiobankName() {
		return GetterUtil.getString(_originalBiobankName);
	}

	@JSON
	@Override
	public String getBiobankJurisdicalPerson() {
		if (_biobankJurisdicalPerson == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankJurisdicalPerson;
		}
	}

	@Override
	public void setBiobankJurisdicalPerson(String biobankJurisdicalPerson) {
		_biobankJurisdicalPerson = biobankJurisdicalPerson;
	}

	@JSON
	@Override
	public String getBiobankCountry() {
		if (_biobankCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankCountry;
		}
	}

	@Override
	public void setBiobankCountry(String biobankCountry) {
		_biobankCountry = biobankCountry;
	}

	@JSON
	@Override
	public boolean getBiobankPartnerCharterSigned() {
		return _biobankPartnerCharterSigned;
	}

	@Override
	public boolean isBiobankPartnerCharterSigned() {
		return _biobankPartnerCharterSigned;
	}

	@Override
	public void setBiobankPartnerCharterSigned(
		boolean biobankPartnerCharterSigned) {
		_biobankPartnerCharterSigned = biobankPartnerCharterSigned;
	}

	@JSON
	@Override
	public String getBioresourceReference() {
		if (_bioresourceReference == null) {
			return StringPool.BLANK;
		}
		else {
			return _bioresourceReference;
		}
	}

	@Override
	public void setBioresourceReference(String bioresourceReference) {
		_bioresourceReference = bioresourceReference;
	}

	@JSON
	@Override
	public String getBiobankNetworkIDRef() {
		if (_biobankNetworkIDRef == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankNetworkIDRef;
		}
	}

	@Override
	public void setBiobankNetworkIDRef(String biobankNetworkIDRef) {
		_biobankNetworkIDRef = biobankNetworkIDRef;
	}

	@JSON
	@Override
	public String getGeoLatitude() {
		if (_geoLatitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _geoLatitude;
		}
	}

	@Override
	public void setGeoLatitude(String geoLatitude) {
		_geoLatitude = geoLatitude;
	}

	@JSON
	@Override
	public String getGeoLongitude() {
		if (_geoLongitude == null) {
			return StringPool.BLANK;
		}
		else {
			return _geoLongitude;
		}
	}

	@Override
	public void setGeoLongitude(String geoLongitude) {
		_geoLongitude = geoLongitude;
	}

	@JSON
	@Override
	public boolean getCollaborationPartnersCommercial() {
		return _collaborationPartnersCommercial;
	}

	@Override
	public boolean isCollaborationPartnersCommercial() {
		return _collaborationPartnersCommercial;
	}

	@Override
	public void setCollaborationPartnersCommercial(
		boolean collaborationPartnersCommercial) {
		_collaborationPartnersCommercial = collaborationPartnersCommercial;
	}

	@JSON
	@Override
	public boolean getCollaborationPartnersNonforprofit() {
		return _collaborationPartnersNonforprofit;
	}

	@Override
	public boolean isCollaborationPartnersNonforprofit() {
		return _collaborationPartnersNonforprofit;
	}

	@Override
	public void setCollaborationPartnersNonforprofit(
		boolean collaborationPartnersNonforprofit) {
		_collaborationPartnersNonforprofit = collaborationPartnersNonforprofit;
	}

	@JSON
	@Override
	public boolean getBiobankITSupportAvailable() {
		return _biobankITSupportAvailable;
	}

	@Override
	public boolean isBiobankITSupportAvailable() {
		return _biobankITSupportAvailable;
	}

	@Override
	public void setBiobankITSupportAvailable(boolean biobankITSupportAvailable) {
		_biobankITSupportAvailable = biobankITSupportAvailable;
	}

	@JSON
	@Override
	public long getBiobankITStaffSize() {
		return _biobankITStaffSize;
	}

	@Override
	public void setBiobankITStaffSize(long biobankITStaffSize) {
		_biobankITStaffSize = biobankITStaffSize;
	}

	@JSON
	@Override
	public boolean getBiobankISAvailable() {
		return _biobankISAvailable;
	}

	@Override
	public boolean isBiobankISAvailable() {
		return _biobankISAvailable;
	}

	@Override
	public void setBiobankISAvailable(boolean biobankISAvailable) {
		_biobankISAvailable = biobankISAvailable;
	}

	@JSON
	@Override
	public boolean getBiobankHISAvailable() {
		return _biobankHISAvailable;
	}

	@Override
	public boolean isBiobankHISAvailable() {
		return _biobankHISAvailable;
	}

	@Override
	public void setBiobankHISAvailable(boolean biobankHISAvailable) {
		_biobankHISAvailable = biobankHISAvailable;
	}

	@JSON
	@Override
	public String getBiobankAcronym() {
		if (_biobankAcronym == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankAcronym;
		}
	}

	@Override
	public void setBiobankAcronym(String biobankAcronym) {
		_biobankAcronym = biobankAcronym;
	}

	@JSON
	@Override
	public String getBiobankDescription() {
		if (_biobankDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankDescription;
		}
	}

	@Override
	public void setBiobankDescription(String biobankDescription) {
		_biobankDescription = biobankDescription;
	}

	@JSON
	@Override
	public String getBiobankURL() {
		if (_biobankURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankURL;
		}
	}

	@Override
	public void setBiobankURL(String biobankURL) {
		_biobankURL = biobankURL;
	}

	@JSON
	@Override
	public String getBiobankHeadFirstName() {
		if (_biobankHeadFirstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankHeadFirstName;
		}
	}

	@Override
	public void setBiobankHeadFirstName(String biobankHeadFirstName) {
		_biobankHeadFirstName = biobankHeadFirstName;
	}

	@JSON
	@Override
	public String getBiobankHeadLastName() {
		if (_biobankHeadLastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankHeadLastName;
		}
	}

	@Override
	public void setBiobankHeadLastName(String biobankHeadLastName) {
		_biobankHeadLastName = biobankHeadLastName;
	}

	@JSON
	@Override
	public String getBiobankHeadRole() {
		if (_biobankHeadRole == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankHeadRole;
		}
	}

	@Override
	public void setBiobankHeadRole(String biobankHeadRole) {
		_biobankHeadRole = biobankHeadRole;
	}

	@JSON
	@Override
	public boolean getBiobankClinical() {
		return _biobankClinical;
	}

	@Override
	public boolean isBiobankClinical() {
		return _biobankClinical;
	}

	@Override
	public void setBiobankClinical(boolean biobankClinical) {
		_biobankClinical = biobankClinical;
	}

	@JSON
	@Override
	public boolean getBiobankPopulation() {
		return _biobankPopulation;
	}

	@Override
	public boolean isBiobankPopulation() {
		return _biobankPopulation;
	}

	@Override
	public void setBiobankPopulation(boolean biobankPopulation) {
		_biobankPopulation = biobankPopulation;
	}

	@JSON
	@Override
	public boolean getBiobankResearchStudy() {
		return _biobankResearchStudy;
	}

	@Override
	public boolean isBiobankResearchStudy() {
		return _biobankResearchStudy;
	}

	@Override
	public void setBiobankResearchStudy(boolean biobankResearchStudy) {
		_biobankResearchStudy = biobankResearchStudy;
	}

	@JSON
	@Override
	public boolean getBiobankNonHuman() {
		return _biobankNonHuman;
	}

	@Override
	public boolean isBiobankNonHuman() {
		return _biobankNonHuman;
	}

	@Override
	public void setBiobankNonHuman(boolean biobankNonHuman) {
		_biobankNonHuman = biobankNonHuman;
	}

	@JSON
	@Override
	public boolean getBiobankCollection() {
		return _biobankCollection;
	}

	@Override
	public boolean isBiobankCollection() {
		return _biobankCollection;
	}

	@Override
	public void setBiobankCollection(boolean biobankCollection) {
		_biobankCollection = biobankCollection;
	}

	@JSON
	@Override
	public String getBiobankType() {
		if (_biobankType == null) {
			return StringPool.BLANK;
		}
		else {
			return _biobankType;
		}
	}

	@Override
	public void setBiobankType(String biobankType) {
		_biobankType = biobankType;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				D2Biobank.class.getName()));
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			D2Biobank.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public D2Biobank toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (D2Biobank)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		D2BiobankImpl d2BiobankImpl = new D2BiobankImpl();

		d2BiobankImpl.setUuid(getUuid());
		d2BiobankImpl.setBiobankId(getBiobankId());
		d2BiobankImpl.setStatus(getStatus());
		d2BiobankImpl.setStatusByUserId(getStatusByUserId());
		d2BiobankImpl.setStatusByUserName(getStatusByUserName());
		d2BiobankImpl.setStatusDate(getStatusDate());
		d2BiobankImpl.setCompanyId(getCompanyId());
		d2BiobankImpl.setGroupId(getGroupId());
		d2BiobankImpl.setUserId(getUserId());
		d2BiobankImpl.setUserName(getUserName());
		d2BiobankImpl.setCreateDate(getCreateDate());
		d2BiobankImpl.setModifiedDate(getModifiedDate());
		d2BiobankImpl.setUpdateuuid(getUpdateuuid());
		d2BiobankImpl.setContactIDRef(getContactIDRef());
		d2BiobankImpl.setContactPriority(getContactPriority());
		d2BiobankImpl.setBbmribiobankID(getBbmribiobankID());
		d2BiobankImpl.setBiobankName(getBiobankName());
		d2BiobankImpl.setBiobankJurisdicalPerson(getBiobankJurisdicalPerson());
		d2BiobankImpl.setBiobankCountry(getBiobankCountry());
		d2BiobankImpl.setBiobankPartnerCharterSigned(getBiobankPartnerCharterSigned());
		d2BiobankImpl.setBioresourceReference(getBioresourceReference());
		d2BiobankImpl.setBiobankNetworkIDRef(getBiobankNetworkIDRef());
		d2BiobankImpl.setGeoLatitude(getGeoLatitude());
		d2BiobankImpl.setGeoLongitude(getGeoLongitude());
		d2BiobankImpl.setCollaborationPartnersCommercial(getCollaborationPartnersCommercial());
		d2BiobankImpl.setCollaborationPartnersNonforprofit(getCollaborationPartnersNonforprofit());
		d2BiobankImpl.setBiobankITSupportAvailable(getBiobankITSupportAvailable());
		d2BiobankImpl.setBiobankITStaffSize(getBiobankITStaffSize());
		d2BiobankImpl.setBiobankISAvailable(getBiobankISAvailable());
		d2BiobankImpl.setBiobankHISAvailable(getBiobankHISAvailable());
		d2BiobankImpl.setBiobankAcronym(getBiobankAcronym());
		d2BiobankImpl.setBiobankDescription(getBiobankDescription());
		d2BiobankImpl.setBiobankURL(getBiobankURL());
		d2BiobankImpl.setBiobankHeadFirstName(getBiobankHeadFirstName());
		d2BiobankImpl.setBiobankHeadLastName(getBiobankHeadLastName());
		d2BiobankImpl.setBiobankHeadRole(getBiobankHeadRole());
		d2BiobankImpl.setBiobankClinical(getBiobankClinical());
		d2BiobankImpl.setBiobankPopulation(getBiobankPopulation());
		d2BiobankImpl.setBiobankResearchStudy(getBiobankResearchStudy());
		d2BiobankImpl.setBiobankNonHuman(getBiobankNonHuman());
		d2BiobankImpl.setBiobankCollection(getBiobankCollection());
		d2BiobankImpl.setBiobankType(getBiobankType());

		d2BiobankImpl.resetOriginalValues();

		return d2BiobankImpl;
	}

	@Override
	public int compareTo(D2Biobank d2Biobank) {
		long primaryKey = d2Biobank.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof D2Biobank)) {
			return false;
		}

		D2Biobank d2Biobank = (D2Biobank)obj;

		long primaryKey = d2Biobank.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		D2BiobankModelImpl d2BiobankModelImpl = this;

		d2BiobankModelImpl._originalUuid = d2BiobankModelImpl._uuid;

		d2BiobankModelImpl._originalBiobankId = d2BiobankModelImpl._biobankId;

		d2BiobankModelImpl._setOriginalBiobankId = false;

		d2BiobankModelImpl._originalStatus = d2BiobankModelImpl._status;

		d2BiobankModelImpl._setOriginalStatus = false;

		d2BiobankModelImpl._originalCompanyId = d2BiobankModelImpl._companyId;

		d2BiobankModelImpl._setOriginalCompanyId = false;

		d2BiobankModelImpl._originalGroupId = d2BiobankModelImpl._groupId;

		d2BiobankModelImpl._setOriginalGroupId = false;

		d2BiobankModelImpl._originalUpdateuuid = d2BiobankModelImpl._updateuuid;

		d2BiobankModelImpl._originalBbmribiobankID = d2BiobankModelImpl._bbmribiobankID;

		d2BiobankModelImpl._originalBiobankName = d2BiobankModelImpl._biobankName;

		d2BiobankModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<D2Biobank> toCacheModel() {
		D2BiobankCacheModel d2BiobankCacheModel = new D2BiobankCacheModel();

		d2BiobankCacheModel.uuid = getUuid();

		String uuid = d2BiobankCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			d2BiobankCacheModel.uuid = null;
		}

		d2BiobankCacheModel.biobankId = getBiobankId();

		d2BiobankCacheModel.status = getStatus();

		d2BiobankCacheModel.statusByUserId = getStatusByUserId();

		d2BiobankCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = d2BiobankCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			d2BiobankCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			d2BiobankCacheModel.statusDate = statusDate.getTime();
		}
		else {
			d2BiobankCacheModel.statusDate = Long.MIN_VALUE;
		}

		d2BiobankCacheModel.companyId = getCompanyId();

		d2BiobankCacheModel.groupId = getGroupId();

		d2BiobankCacheModel.userId = getUserId();

		d2BiobankCacheModel.userName = getUserName();

		String userName = d2BiobankCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			d2BiobankCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			d2BiobankCacheModel.createDate = createDate.getTime();
		}
		else {
			d2BiobankCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			d2BiobankCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			d2BiobankCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		d2BiobankCacheModel.updateuuid = getUpdateuuid();

		String updateuuid = d2BiobankCacheModel.updateuuid;

		if ((updateuuid != null) && (updateuuid.length() == 0)) {
			d2BiobankCacheModel.updateuuid = null;
		}

		d2BiobankCacheModel.contactIDRef = getContactIDRef();

		String contactIDRef = d2BiobankCacheModel.contactIDRef;

		if ((contactIDRef != null) && (contactIDRef.length() == 0)) {
			d2BiobankCacheModel.contactIDRef = null;
		}

		d2BiobankCacheModel.contactPriority = getContactPriority();

		d2BiobankCacheModel.bbmribiobankID = getBbmribiobankID();

		String bbmribiobankID = d2BiobankCacheModel.bbmribiobankID;

		if ((bbmribiobankID != null) && (bbmribiobankID.length() == 0)) {
			d2BiobankCacheModel.bbmribiobankID = null;
		}

		d2BiobankCacheModel.biobankName = getBiobankName();

		String biobankName = d2BiobankCacheModel.biobankName;

		if ((biobankName != null) && (biobankName.length() == 0)) {
			d2BiobankCacheModel.biobankName = null;
		}

		d2BiobankCacheModel.biobankJurisdicalPerson = getBiobankJurisdicalPerson();

		String biobankJurisdicalPerson = d2BiobankCacheModel.biobankJurisdicalPerson;

		if ((biobankJurisdicalPerson != null) &&
				(biobankJurisdicalPerson.length() == 0)) {
			d2BiobankCacheModel.biobankJurisdicalPerson = null;
		}

		d2BiobankCacheModel.biobankCountry = getBiobankCountry();

		String biobankCountry = d2BiobankCacheModel.biobankCountry;

		if ((biobankCountry != null) && (biobankCountry.length() == 0)) {
			d2BiobankCacheModel.biobankCountry = null;
		}

		d2BiobankCacheModel.biobankPartnerCharterSigned = getBiobankPartnerCharterSigned();

		d2BiobankCacheModel.bioresourceReference = getBioresourceReference();

		String bioresourceReference = d2BiobankCacheModel.bioresourceReference;

		if ((bioresourceReference != null) &&
				(bioresourceReference.length() == 0)) {
			d2BiobankCacheModel.bioresourceReference = null;
		}

		d2BiobankCacheModel.biobankNetworkIDRef = getBiobankNetworkIDRef();

		String biobankNetworkIDRef = d2BiobankCacheModel.biobankNetworkIDRef;

		if ((biobankNetworkIDRef != null) &&
				(biobankNetworkIDRef.length() == 0)) {
			d2BiobankCacheModel.biobankNetworkIDRef = null;
		}

		d2BiobankCacheModel.geoLatitude = getGeoLatitude();

		String geoLatitude = d2BiobankCacheModel.geoLatitude;

		if ((geoLatitude != null) && (geoLatitude.length() == 0)) {
			d2BiobankCacheModel.geoLatitude = null;
		}

		d2BiobankCacheModel.geoLongitude = getGeoLongitude();

		String geoLongitude = d2BiobankCacheModel.geoLongitude;

		if ((geoLongitude != null) && (geoLongitude.length() == 0)) {
			d2BiobankCacheModel.geoLongitude = null;
		}

		d2BiobankCacheModel.collaborationPartnersCommercial = getCollaborationPartnersCommercial();

		d2BiobankCacheModel.collaborationPartnersNonforprofit = getCollaborationPartnersNonforprofit();

		d2BiobankCacheModel.biobankITSupportAvailable = getBiobankITSupportAvailable();

		d2BiobankCacheModel.biobankITStaffSize = getBiobankITStaffSize();

		d2BiobankCacheModel.biobankISAvailable = getBiobankISAvailable();

		d2BiobankCacheModel.biobankHISAvailable = getBiobankHISAvailable();

		d2BiobankCacheModel.biobankAcronym = getBiobankAcronym();

		String biobankAcronym = d2BiobankCacheModel.biobankAcronym;

		if ((biobankAcronym != null) && (biobankAcronym.length() == 0)) {
			d2BiobankCacheModel.biobankAcronym = null;
		}

		d2BiobankCacheModel.biobankDescription = getBiobankDescription();

		String biobankDescription = d2BiobankCacheModel.biobankDescription;

		if ((biobankDescription != null) && (biobankDescription.length() == 0)) {
			d2BiobankCacheModel.biobankDescription = null;
		}

		d2BiobankCacheModel.biobankURL = getBiobankURL();

		String biobankURL = d2BiobankCacheModel.biobankURL;

		if ((biobankURL != null) && (biobankURL.length() == 0)) {
			d2BiobankCacheModel.biobankURL = null;
		}

		d2BiobankCacheModel.biobankHeadFirstName = getBiobankHeadFirstName();

		String biobankHeadFirstName = d2BiobankCacheModel.biobankHeadFirstName;

		if ((biobankHeadFirstName != null) &&
				(biobankHeadFirstName.length() == 0)) {
			d2BiobankCacheModel.biobankHeadFirstName = null;
		}

		d2BiobankCacheModel.biobankHeadLastName = getBiobankHeadLastName();

		String biobankHeadLastName = d2BiobankCacheModel.biobankHeadLastName;

		if ((biobankHeadLastName != null) &&
				(biobankHeadLastName.length() == 0)) {
			d2BiobankCacheModel.biobankHeadLastName = null;
		}

		d2BiobankCacheModel.biobankHeadRole = getBiobankHeadRole();

		String biobankHeadRole = d2BiobankCacheModel.biobankHeadRole;

		if ((biobankHeadRole != null) && (biobankHeadRole.length() == 0)) {
			d2BiobankCacheModel.biobankHeadRole = null;
		}

		d2BiobankCacheModel.biobankClinical = getBiobankClinical();

		d2BiobankCacheModel.biobankPopulation = getBiobankPopulation();

		d2BiobankCacheModel.biobankResearchStudy = getBiobankResearchStudy();

		d2BiobankCacheModel.biobankNonHuman = getBiobankNonHuman();

		d2BiobankCacheModel.biobankCollection = getBiobankCollection();

		d2BiobankCacheModel.biobankType = getBiobankType();

		String biobankType = d2BiobankCacheModel.biobankType;

		if ((biobankType != null) && (biobankType.length() == 0)) {
			d2BiobankCacheModel.biobankType = null;
		}

		return d2BiobankCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(85);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", biobankId=");
		sb.append(getBiobankId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", updateuuid=");
		sb.append(getUpdateuuid());
		sb.append(", contactIDRef=");
		sb.append(getContactIDRef());
		sb.append(", contactPriority=");
		sb.append(getContactPriority());
		sb.append(", bbmribiobankID=");
		sb.append(getBbmribiobankID());
		sb.append(", biobankName=");
		sb.append(getBiobankName());
		sb.append(", biobankJurisdicalPerson=");
		sb.append(getBiobankJurisdicalPerson());
		sb.append(", biobankCountry=");
		sb.append(getBiobankCountry());
		sb.append(", biobankPartnerCharterSigned=");
		sb.append(getBiobankPartnerCharterSigned());
		sb.append(", bioresourceReference=");
		sb.append(getBioresourceReference());
		sb.append(", biobankNetworkIDRef=");
		sb.append(getBiobankNetworkIDRef());
		sb.append(", geoLatitude=");
		sb.append(getGeoLatitude());
		sb.append(", geoLongitude=");
		sb.append(getGeoLongitude());
		sb.append(", collaborationPartnersCommercial=");
		sb.append(getCollaborationPartnersCommercial());
		sb.append(", collaborationPartnersNonforprofit=");
		sb.append(getCollaborationPartnersNonforprofit());
		sb.append(", biobankITSupportAvailable=");
		sb.append(getBiobankITSupportAvailable());
		sb.append(", biobankITStaffSize=");
		sb.append(getBiobankITStaffSize());
		sb.append(", biobankISAvailable=");
		sb.append(getBiobankISAvailable());
		sb.append(", biobankHISAvailable=");
		sb.append(getBiobankHISAvailable());
		sb.append(", biobankAcronym=");
		sb.append(getBiobankAcronym());
		sb.append(", biobankDescription=");
		sb.append(getBiobankDescription());
		sb.append(", biobankURL=");
		sb.append(getBiobankURL());
		sb.append(", biobankHeadFirstName=");
		sb.append(getBiobankHeadFirstName());
		sb.append(", biobankHeadLastName=");
		sb.append(getBiobankHeadLastName());
		sb.append(", biobankHeadRole=");
		sb.append(getBiobankHeadRole());
		sb.append(", biobankClinical=");
		sb.append(getBiobankClinical());
		sb.append(", biobankPopulation=");
		sb.append(getBiobankPopulation());
		sb.append(", biobankResearchStudy=");
		sb.append(getBiobankResearchStudy());
		sb.append(", biobankNonHuman=");
		sb.append(getBiobankNonHuman());
		sb.append(", biobankCollection=");
		sb.append(getBiobankCollection());
		sb.append(", biobankType=");
		sb.append(getBiobankType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(130);

		sb.append("<model><model-name>");
		sb.append("at.meduni.liferay.portlet.bbmrieric.model.D2Biobank");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankId</column-name><column-value><![CDATA[");
		sb.append(getBiobankId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateuuid</column-name><column-value><![CDATA[");
		sb.append(getUpdateuuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactIDRef</column-name><column-value><![CDATA[");
		sb.append(getContactIDRef());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactPriority</column-name><column-value><![CDATA[");
		sb.append(getContactPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bbmribiobankID</column-name><column-value><![CDATA[");
		sb.append(getBbmribiobankID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankName</column-name><column-value><![CDATA[");
		sb.append(getBiobankName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankJurisdicalPerson</column-name><column-value><![CDATA[");
		sb.append(getBiobankJurisdicalPerson());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankCountry</column-name><column-value><![CDATA[");
		sb.append(getBiobankCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankPartnerCharterSigned</column-name><column-value><![CDATA[");
		sb.append(getBiobankPartnerCharterSigned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bioresourceReference</column-name><column-value><![CDATA[");
		sb.append(getBioresourceReference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankNetworkIDRef</column-name><column-value><![CDATA[");
		sb.append(getBiobankNetworkIDRef());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geoLatitude</column-name><column-value><![CDATA[");
		sb.append(getGeoLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geoLongitude</column-name><column-value><![CDATA[");
		sb.append(getGeoLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collaborationPartnersCommercial</column-name><column-value><![CDATA[");
		sb.append(getCollaborationPartnersCommercial());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collaborationPartnersNonforprofit</column-name><column-value><![CDATA[");
		sb.append(getCollaborationPartnersNonforprofit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankITSupportAvailable</column-name><column-value><![CDATA[");
		sb.append(getBiobankITSupportAvailable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankITStaffSize</column-name><column-value><![CDATA[");
		sb.append(getBiobankITStaffSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankISAvailable</column-name><column-value><![CDATA[");
		sb.append(getBiobankISAvailable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankHISAvailable</column-name><column-value><![CDATA[");
		sb.append(getBiobankHISAvailable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankAcronym</column-name><column-value><![CDATA[");
		sb.append(getBiobankAcronym());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankDescription</column-name><column-value><![CDATA[");
		sb.append(getBiobankDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankURL</column-name><column-value><![CDATA[");
		sb.append(getBiobankURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankHeadFirstName</column-name><column-value><![CDATA[");
		sb.append(getBiobankHeadFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankHeadLastName</column-name><column-value><![CDATA[");
		sb.append(getBiobankHeadLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankHeadRole</column-name><column-value><![CDATA[");
		sb.append(getBiobankHeadRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankClinical</column-name><column-value><![CDATA[");
		sb.append(getBiobankClinical());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankPopulation</column-name><column-value><![CDATA[");
		sb.append(getBiobankPopulation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankResearchStudy</column-name><column-value><![CDATA[");
		sb.append(getBiobankResearchStudy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankNonHuman</column-name><column-value><![CDATA[");
		sb.append(getBiobankNonHuman());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankCollection</column-name><column-value><![CDATA[");
		sb.append(getBiobankCollection());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>biobankType</column-name><column-value><![CDATA[");
		sb.append(getBiobankType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = D2Biobank.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			D2Biobank.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _biobankId;
	private long _originalBiobankId;
	private boolean _setOriginalBiobankId;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _updateuuid;
	private String _originalUpdateuuid;
	private String _contactIDRef;
	private long _contactPriority;
	private String _bbmribiobankID;
	private String _originalBbmribiobankID;
	private String _biobankName;
	private String _originalBiobankName;
	private String _biobankJurisdicalPerson;
	private String _biobankCountry;
	private boolean _biobankPartnerCharterSigned;
	private String _bioresourceReference;
	private String _biobankNetworkIDRef;
	private String _geoLatitude;
	private String _geoLongitude;
	private boolean _collaborationPartnersCommercial;
	private boolean _collaborationPartnersNonforprofit;
	private boolean _biobankITSupportAvailable;
	private long _biobankITStaffSize;
	private boolean _biobankISAvailable;
	private boolean _biobankHISAvailable;
	private String _biobankAcronym;
	private String _biobankDescription;
	private String _biobankURL;
	private String _biobankHeadFirstName;
	private String _biobankHeadLastName;
	private String _biobankHeadRole;
	private boolean _biobankClinical;
	private boolean _biobankPopulation;
	private boolean _biobankResearchStudy;
	private boolean _biobankNonHuman;
	private boolean _biobankCollection;
	private String _biobankType;
	private long _columnBitmask;
	private D2Biobank _escapedModel;
}