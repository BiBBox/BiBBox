/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.meduni.liferay.portlet.rdconnect.model.impl;

import at.meduni.liferay.portlet.rdconnect.model.Candidate;
import at.meduni.liferay.portlet.rdconnect.model.CandidateModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Candidate service. Represents a row in the &quot;rdconnect.candidate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.meduni.liferay.portlet.rdconnect.model.CandidateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see CandidateImpl
 * @see at.meduni.liferay.portlet.rdconnect.model.Candidate
 * @see at.meduni.liferay.portlet.rdconnect.model.CandidateModel
 * @generated
 */
public class CandidateModelImpl extends BaseModelImpl<Candidate>
	implements CandidateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate model instance should use the {@link at.meduni.liferay.portlet.rdconnect.model.Candidate} interface instead.
	 */
	public static final String TABLE_NAME = "rdconnect.candidate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "candidateId", Types.BIGINT },
			{ "source", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "contactperson", Types.VARCHAR },
			{ "candidatetype", Types.VARCHAR },
			{ "subunitof", Types.VARCHAR },
			{ "country", Types.VARCHAR },
			{ "diseasescodes", Types.VARCHAR },
			{ "diseasesfreetext", Types.VARCHAR },
			{ "comment_", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "date_", Types.TIMESTAMP },
			{ "searchurl", Types.VARCHAR },
			{ "sourceId", Types.VARCHAR },
			{ "mail", Types.VARCHAR },
			{ "head", Types.VARCHAR },
			{ "coverage", Types.VARCHAR },
			{ "network", Types.VARCHAR },
			{ "submittername", Types.VARCHAR },
			{ "submitteremail", Types.VARCHAR },
			{ "validated", Types.BOOLEAN },
			{ "accepted", Types.BOOLEAN },
			{ "masterId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table rdconnect.candidate (candidateId LONG not null primary key,source VARCHAR(75) null,name VARCHAR(255) null,url TEXT null,contactperson TEXT null,candidatetype VARCHAR(75) null,subunitof VARCHAR(75) null,country VARCHAR(75) null,diseasescodes TEXT null,diseasesfreetext TEXT null,comment_ TEXT null,address TEXT null,date_ DATE null,searchurl TEXT null,sourceId VARCHAR(75) null,mail VARCHAR(255) null,head TEXT null,coverage VARCHAR(75) null,network VARCHAR(255) null,submittername VARCHAR(75) null,submitteremail VARCHAR(255) null,validated BOOLEAN,accepted BOOLEAN,masterId LONG)";
	public static final String TABLE_SQL_DROP = "drop table rdconnect.candidate";
	public static final String ORDER_BY_JPQL = " ORDER BY candidate.candidateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rdconnect.candidate.candidateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.meduni.liferay.portlet.rdconnect.model.Candidate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.meduni.liferay.portlet.rdconnect.model.Candidate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.meduni.liferay.portlet.rdconnect.model.Candidate"),
			true);
	public static long CANDIDATETYPE_COLUMN_BITMASK = 1L;
	public static long COUNTRY_COLUMN_BITMASK = 2L;
	public static long DISEASESCODES_COLUMN_BITMASK = 4L;
	public static long DISEASESFREETEXT_COLUMN_BITMASK = 8L;
	public static long NAME_COLUMN_BITMASK = 16L;
	public static long SOURCE_COLUMN_BITMASK = 32L;
	public static long SUBUNITOF_COLUMN_BITMASK = 64L;
	public static long CANDIDATEID_COLUMN_BITMASK = 128L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.meduni.liferay.portlet.rdconnect.model.Candidate"));

	public CandidateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCandidateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Candidate.class;
	}

	@Override
	public String getModelClassName() {
		return Candidate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("candidateId", getCandidateId());
		attributes.put("source", getSource());
		attributes.put("name", getName());
		attributes.put("url", getUrl());
		attributes.put("contactperson", getContactperson());
		attributes.put("candidatetype", getCandidatetype());
		attributes.put("subunitof", getSubunitof());
		attributes.put("country", getCountry());
		attributes.put("diseasescodes", getDiseasescodes());
		attributes.put("diseasesfreetext", getDiseasesfreetext());
		attributes.put("comment", getComment());
		attributes.put("address", getAddress());
		attributes.put("date", getDate());
		attributes.put("searchurl", getSearchurl());
		attributes.put("sourceId", getSourceId());
		attributes.put("mail", getMail());
		attributes.put("head", getHead());
		attributes.put("coverage", getCoverage());
		attributes.put("network", getNetwork());
		attributes.put("submittername", getSubmittername());
		attributes.put("submitteremail", getSubmitteremail());
		attributes.put("validated", getValidated());
		attributes.put("accepted", getAccepted());
		attributes.put("masterId", getMasterId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long candidateId = (Long)attributes.get("candidateId");

		if (candidateId != null) {
			setCandidateId(candidateId);
		}

		String source = (String)attributes.get("source");

		if (source != null) {
			setSource(source);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String contactperson = (String)attributes.get("contactperson");

		if (contactperson != null) {
			setContactperson(contactperson);
		}

		String candidatetype = (String)attributes.get("candidatetype");

		if (candidatetype != null) {
			setCandidatetype(candidatetype);
		}

		String subunitof = (String)attributes.get("subunitof");

		if (subunitof != null) {
			setSubunitof(subunitof);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String diseasescodes = (String)attributes.get("diseasescodes");

		if (diseasescodes != null) {
			setDiseasescodes(diseasescodes);
		}

		String diseasesfreetext = (String)attributes.get("diseasesfreetext");

		if (diseasesfreetext != null) {
			setDiseasesfreetext(diseasesfreetext);
		}

		String comment = (String)attributes.get("comment");

		if (comment != null) {
			setComment(comment);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}

		String searchurl = (String)attributes.get("searchurl");

		if (searchurl != null) {
			setSearchurl(searchurl);
		}

		String sourceId = (String)attributes.get("sourceId");

		if (sourceId != null) {
			setSourceId(sourceId);
		}

		String mail = (String)attributes.get("mail");

		if (mail != null) {
			setMail(mail);
		}

		String head = (String)attributes.get("head");

		if (head != null) {
			setHead(head);
		}

		String coverage = (String)attributes.get("coverage");

		if (coverage != null) {
			setCoverage(coverage);
		}

		String network = (String)attributes.get("network");

		if (network != null) {
			setNetwork(network);
		}

		String submittername = (String)attributes.get("submittername");

		if (submittername != null) {
			setSubmittername(submittername);
		}

		String submitteremail = (String)attributes.get("submitteremail");

		if (submitteremail != null) {
			setSubmitteremail(submitteremail);
		}

		Boolean validated = (Boolean)attributes.get("validated");

		if (validated != null) {
			setValidated(validated);
		}

		Boolean accepted = (Boolean)attributes.get("accepted");

		if (accepted != null) {
			setAccepted(accepted);
		}

		Long masterId = (Long)attributes.get("masterId");

		if (masterId != null) {
			setMasterId(masterId);
		}
	}

	@Override
	public long getCandidateId() {
		return _candidateId;
	}

	@Override
	public void setCandidateId(long candidateId) {
		_columnBitmask = -1L;

		_candidateId = candidateId;
	}

	@Override
	public String getSource() {
		if (_source == null) {
			return StringPool.BLANK;
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_columnBitmask |= SOURCE_COLUMN_BITMASK;

		if (_originalSource == null) {
			_originalSource = _source;
		}

		_source = source;
	}

	public String getOriginalSource() {
		return GetterUtil.getString(_originalSource);
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public String getContactperson() {
		if (_contactperson == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactperson;
		}
	}

	@Override
	public void setContactperson(String contactperson) {
		_contactperson = contactperson;
	}

	@Override
	public String getCandidatetype() {
		if (_candidatetype == null) {
			return StringPool.BLANK;
		}
		else {
			return _candidatetype;
		}
	}

	@Override
	public void setCandidatetype(String candidatetype) {
		_columnBitmask |= CANDIDATETYPE_COLUMN_BITMASK;

		if (_originalCandidatetype == null) {
			_originalCandidatetype = _candidatetype;
		}

		_candidatetype = candidatetype;
	}

	public String getOriginalCandidatetype() {
		return GetterUtil.getString(_originalCandidatetype);
	}

	@Override
	public String getSubunitof() {
		if (_subunitof == null) {
			return StringPool.BLANK;
		}
		else {
			return _subunitof;
		}
	}

	@Override
	public void setSubunitof(String subunitof) {
		_columnBitmask |= SUBUNITOF_COLUMN_BITMASK;

		if (_originalSubunitof == null) {
			_originalSubunitof = _subunitof;
		}

		_subunitof = subunitof;
	}

	public String getOriginalSubunitof() {
		return GetterUtil.getString(_originalSubunitof);
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_columnBitmask |= COUNTRY_COLUMN_BITMASK;

		if (_originalCountry == null) {
			_originalCountry = _country;
		}

		_country = country;
	}

	public String getOriginalCountry() {
		return GetterUtil.getString(_originalCountry);
	}

	@Override
	public String getDiseasescodes() {
		if (_diseasescodes == null) {
			return StringPool.BLANK;
		}
		else {
			return _diseasescodes;
		}
	}

	@Override
	public void setDiseasescodes(String diseasescodes) {
		_columnBitmask |= DISEASESCODES_COLUMN_BITMASK;

		if (_originalDiseasescodes == null) {
			_originalDiseasescodes = _diseasescodes;
		}

		_diseasescodes = diseasescodes;
	}

	public String getOriginalDiseasescodes() {
		return GetterUtil.getString(_originalDiseasescodes);
	}

	@Override
	public String getDiseasesfreetext() {
		if (_diseasesfreetext == null) {
			return StringPool.BLANK;
		}
		else {
			return _diseasesfreetext;
		}
	}

	@Override
	public void setDiseasesfreetext(String diseasesfreetext) {
		_columnBitmask |= DISEASESFREETEXT_COLUMN_BITMASK;

		if (_originalDiseasesfreetext == null) {
			_originalDiseasesfreetext = _diseasesfreetext;
		}

		_diseasesfreetext = diseasesfreetext;
	}

	public String getOriginalDiseasesfreetext() {
		return GetterUtil.getString(_originalDiseasesfreetext);
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return StringPool.BLANK;
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@Override
	public String getSearchurl() {
		if (_searchurl == null) {
			return StringPool.BLANK;
		}
		else {
			return _searchurl;
		}
	}

	@Override
	public void setSearchurl(String searchurl) {
		_searchurl = searchurl;
	}

	@Override
	public String getSourceId() {
		if (_sourceId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sourceId;
		}
	}

	@Override
	public void setSourceId(String sourceId) {
		_sourceId = sourceId;
	}

	@Override
	public String getMail() {
		if (_mail == null) {
			return StringPool.BLANK;
		}
		else {
			return _mail;
		}
	}

	@Override
	public void setMail(String mail) {
		_mail = mail;
	}

	@Override
	public String getHead() {
		if (_head == null) {
			return StringPool.BLANK;
		}
		else {
			return _head;
		}
	}

	@Override
	public void setHead(String head) {
		_head = head;
	}

	@Override
	public String getCoverage() {
		if (_coverage == null) {
			return StringPool.BLANK;
		}
		else {
			return _coverage;
		}
	}

	@Override
	public void setCoverage(String coverage) {
		_coverage = coverage;
	}

	@Override
	public String getNetwork() {
		if (_network == null) {
			return StringPool.BLANK;
		}
		else {
			return _network;
		}
	}

	@Override
	public void setNetwork(String network) {
		_network = network;
	}

	@Override
	public String getSubmittername() {
		if (_submittername == null) {
			return StringPool.BLANK;
		}
		else {
			return _submittername;
		}
	}

	@Override
	public void setSubmittername(String submittername) {
		_submittername = submittername;
	}

	@Override
	public String getSubmitteremail() {
		if (_submitteremail == null) {
			return StringPool.BLANK;
		}
		else {
			return _submitteremail;
		}
	}

	@Override
	public void setSubmitteremail(String submitteremail) {
		_submitteremail = submitteremail;
	}

	@Override
	public boolean getValidated() {
		return _validated;
	}

	@Override
	public boolean isValidated() {
		return _validated;
	}

	@Override
	public void setValidated(boolean validated) {
		_validated = validated;
	}

	@Override
	public boolean getAccepted() {
		return _accepted;
	}

	@Override
	public boolean isAccepted() {
		return _accepted;
	}

	@Override
	public void setAccepted(boolean accepted) {
		_accepted = accepted;
	}

	@Override
	public long getMasterId() {
		return _masterId;
	}

	@Override
	public void setMasterId(long masterId) {
		_masterId = masterId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Candidate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Candidate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Candidate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidateImpl candidateImpl = new CandidateImpl();

		candidateImpl.setCandidateId(getCandidateId());
		candidateImpl.setSource(getSource());
		candidateImpl.setName(getName());
		candidateImpl.setUrl(getUrl());
		candidateImpl.setContactperson(getContactperson());
		candidateImpl.setCandidatetype(getCandidatetype());
		candidateImpl.setSubunitof(getSubunitof());
		candidateImpl.setCountry(getCountry());
		candidateImpl.setDiseasescodes(getDiseasescodes());
		candidateImpl.setDiseasesfreetext(getDiseasesfreetext());
		candidateImpl.setComment(getComment());
		candidateImpl.setAddress(getAddress());
		candidateImpl.setDate(getDate());
		candidateImpl.setSearchurl(getSearchurl());
		candidateImpl.setSourceId(getSourceId());
		candidateImpl.setMail(getMail());
		candidateImpl.setHead(getHead());
		candidateImpl.setCoverage(getCoverage());
		candidateImpl.setNetwork(getNetwork());
		candidateImpl.setSubmittername(getSubmittername());
		candidateImpl.setSubmitteremail(getSubmitteremail());
		candidateImpl.setValidated(getValidated());
		candidateImpl.setAccepted(getAccepted());
		candidateImpl.setMasterId(getMasterId());

		candidateImpl.resetOriginalValues();

		return candidateImpl;
	}

	@Override
	public int compareTo(Candidate candidate) {
		int value = 0;

		if (getCandidateId() < candidate.getCandidateId()) {
			value = -1;
		}
		else if (getCandidateId() > candidate.getCandidateId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Candidate)) {
			return false;
		}

		Candidate candidate = (Candidate)obj;

		long primaryKey = candidate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CandidateModelImpl candidateModelImpl = this;

		candidateModelImpl._originalSource = candidateModelImpl._source;

		candidateModelImpl._originalName = candidateModelImpl._name;

		candidateModelImpl._originalCandidatetype = candidateModelImpl._candidatetype;

		candidateModelImpl._originalSubunitof = candidateModelImpl._subunitof;

		candidateModelImpl._originalCountry = candidateModelImpl._country;

		candidateModelImpl._originalDiseasescodes = candidateModelImpl._diseasescodes;

		candidateModelImpl._originalDiseasesfreetext = candidateModelImpl._diseasesfreetext;

		candidateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Candidate> toCacheModel() {
		CandidateCacheModel candidateCacheModel = new CandidateCacheModel();

		candidateCacheModel.candidateId = getCandidateId();

		candidateCacheModel.source = getSource();

		String source = candidateCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			candidateCacheModel.source = null;
		}

		candidateCacheModel.name = getName();

		String name = candidateCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			candidateCacheModel.name = null;
		}

		candidateCacheModel.url = getUrl();

		String url = candidateCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			candidateCacheModel.url = null;
		}

		candidateCacheModel.contactperson = getContactperson();

		String contactperson = candidateCacheModel.contactperson;

		if ((contactperson != null) && (contactperson.length() == 0)) {
			candidateCacheModel.contactperson = null;
		}

		candidateCacheModel.candidatetype = getCandidatetype();

		String candidatetype = candidateCacheModel.candidatetype;

		if ((candidatetype != null) && (candidatetype.length() == 0)) {
			candidateCacheModel.candidatetype = null;
		}

		candidateCacheModel.subunitof = getSubunitof();

		String subunitof = candidateCacheModel.subunitof;

		if ((subunitof != null) && (subunitof.length() == 0)) {
			candidateCacheModel.subunitof = null;
		}

		candidateCacheModel.country = getCountry();

		String country = candidateCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			candidateCacheModel.country = null;
		}

		candidateCacheModel.diseasescodes = getDiseasescodes();

		String diseasescodes = candidateCacheModel.diseasescodes;

		if ((diseasescodes != null) && (diseasescodes.length() == 0)) {
			candidateCacheModel.diseasescodes = null;
		}

		candidateCacheModel.diseasesfreetext = getDiseasesfreetext();

		String diseasesfreetext = candidateCacheModel.diseasesfreetext;

		if ((diseasesfreetext != null) && (diseasesfreetext.length() == 0)) {
			candidateCacheModel.diseasesfreetext = null;
		}

		candidateCacheModel.comment = getComment();

		String comment = candidateCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			candidateCacheModel.comment = null;
		}

		candidateCacheModel.address = getAddress();

		String address = candidateCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			candidateCacheModel.address = null;
		}

		Date date = getDate();

		if (date != null) {
			candidateCacheModel.date = date.getTime();
		}
		else {
			candidateCacheModel.date = Long.MIN_VALUE;
		}

		candidateCacheModel.searchurl = getSearchurl();

		String searchurl = candidateCacheModel.searchurl;

		if ((searchurl != null) && (searchurl.length() == 0)) {
			candidateCacheModel.searchurl = null;
		}

		candidateCacheModel.sourceId = getSourceId();

		String sourceId = candidateCacheModel.sourceId;

		if ((sourceId != null) && (sourceId.length() == 0)) {
			candidateCacheModel.sourceId = null;
		}

		candidateCacheModel.mail = getMail();

		String mail = candidateCacheModel.mail;

		if ((mail != null) && (mail.length() == 0)) {
			candidateCacheModel.mail = null;
		}

		candidateCacheModel.head = getHead();

		String head = candidateCacheModel.head;

		if ((head != null) && (head.length() == 0)) {
			candidateCacheModel.head = null;
		}

		candidateCacheModel.coverage = getCoverage();

		String coverage = candidateCacheModel.coverage;

		if ((coverage != null) && (coverage.length() == 0)) {
			candidateCacheModel.coverage = null;
		}

		candidateCacheModel.network = getNetwork();

		String network = candidateCacheModel.network;

		if ((network != null) && (network.length() == 0)) {
			candidateCacheModel.network = null;
		}

		candidateCacheModel.submittername = getSubmittername();

		String submittername = candidateCacheModel.submittername;

		if ((submittername != null) && (submittername.length() == 0)) {
			candidateCacheModel.submittername = null;
		}

		candidateCacheModel.submitteremail = getSubmitteremail();

		String submitteremail = candidateCacheModel.submitteremail;

		if ((submitteremail != null) && (submitteremail.length() == 0)) {
			candidateCacheModel.submitteremail = null;
		}

		candidateCacheModel.validated = getValidated();

		candidateCacheModel.accepted = getAccepted();

		candidateCacheModel.masterId = getMasterId();

		return candidateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{candidateId=");
		sb.append(getCandidateId());
		sb.append(", source=");
		sb.append(getSource());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", contactperson=");
		sb.append(getContactperson());
		sb.append(", candidatetype=");
		sb.append(getCandidatetype());
		sb.append(", subunitof=");
		sb.append(getSubunitof());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", diseasescodes=");
		sb.append(getDiseasescodes());
		sb.append(", diseasesfreetext=");
		sb.append(getDiseasesfreetext());
		sb.append(", comment=");
		sb.append(getComment());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", date=");
		sb.append(getDate());
		sb.append(", searchurl=");
		sb.append(getSearchurl());
		sb.append(", sourceId=");
		sb.append(getSourceId());
		sb.append(", mail=");
		sb.append(getMail());
		sb.append(", head=");
		sb.append(getHead());
		sb.append(", coverage=");
		sb.append(getCoverage());
		sb.append(", network=");
		sb.append(getNetwork());
		sb.append(", submittername=");
		sb.append(getSubmittername());
		sb.append(", submitteremail=");
		sb.append(getSubmitteremail());
		sb.append(", validated=");
		sb.append(getValidated());
		sb.append(", accepted=");
		sb.append(getAccepted());
		sb.append(", masterId=");
		sb.append(getMasterId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("at.meduni.liferay.portlet.rdconnect.model.Candidate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>candidateId</column-name><column-value><![CDATA[");
		sb.append(getCandidateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>source</column-name><column-value><![CDATA[");
		sb.append(getSource());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactperson</column-name><column-value><![CDATA[");
		sb.append(getContactperson());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>candidatetype</column-name><column-value><![CDATA[");
		sb.append(getCandidatetype());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subunitof</column-name><column-value><![CDATA[");
		sb.append(getSubunitof());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diseasescodes</column-name><column-value><![CDATA[");
		sb.append(getDiseasescodes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diseasesfreetext</column-name><column-value><![CDATA[");
		sb.append(getDiseasesfreetext());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comment</column-name><column-value><![CDATA[");
		sb.append(getComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>searchurl</column-name><column-value><![CDATA[");
		sb.append(getSearchurl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sourceId</column-name><column-value><![CDATA[");
		sb.append(getSourceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mail</column-name><column-value><![CDATA[");
		sb.append(getMail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>head</column-name><column-value><![CDATA[");
		sb.append(getHead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coverage</column-name><column-value><![CDATA[");
		sb.append(getCoverage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>network</column-name><column-value><![CDATA[");
		sb.append(getNetwork());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submittername</column-name><column-value><![CDATA[");
		sb.append(getSubmittername());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submitteremail</column-name><column-value><![CDATA[");
		sb.append(getSubmitteremail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validated</column-name><column-value><![CDATA[");
		sb.append(getValidated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accepted</column-name><column-value><![CDATA[");
		sb.append(getAccepted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterId</column-name><column-value><![CDATA[");
		sb.append(getMasterId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Candidate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Candidate.class
		};
	private long _candidateId;
	private String _source;
	private String _originalSource;
	private String _name;
	private String _originalName;
	private String _url;
	private String _contactperson;
	private String _candidatetype;
	private String _originalCandidatetype;
	private String _subunitof;
	private String _originalSubunitof;
	private String _country;
	private String _originalCountry;
	private String _diseasescodes;
	private String _originalDiseasescodes;
	private String _diseasesfreetext;
	private String _originalDiseasesfreetext;
	private String _comment;
	private String _address;
	private Date _date;
	private String _searchurl;
	private String _sourceId;
	private String _mail;
	private String _head;
	private String _coverage;
	private String _network;
	private String _submittername;
	private String _submitteremail;
	private boolean _validated;
	private boolean _accepted;
	private long _masterId;
	private long _columnBitmask;
	private Candidate _escapedModel;
}