/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.meduni.liferay.portlet.rdconnect.model.impl;

import at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidate;
import at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidateModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MasterCandidateLinkCandidate service. Represents a row in the &quot;rdconnect.master_candidate_link_candidate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MasterCandidateLinkCandidateImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see MasterCandidateLinkCandidateImpl
 * @see at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidate
 * @see at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidateModel
 * @generated
 */
public class MasterCandidateLinkCandidateModelImpl extends BaseModelImpl<MasterCandidateLinkCandidate>
	implements MasterCandidateLinkCandidateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a master candidate link candidate model instance should use the {@link at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidate} interface instead.
	 */
	public static final String TABLE_NAME = "rdconnect.master_candidate_link_candidate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "linkId", Types.BIGINT },
			{ "candidateId", Types.BIGINT },
			{ "masterCandidateId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table rdconnect.master_candidate_link_candidate (linkId LONG not null primary key,candidateId LONG,masterCandidateId LONG)";
	public static final String TABLE_SQL_DROP = "drop table rdconnect.master_candidate_link_candidate";
	public static final String ORDER_BY_JPQL = " ORDER BY masterCandidateLinkCandidate.linkId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rdconnect.master_candidate_link_candidate.linkId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidate"));

	public MasterCandidateLinkCandidateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _linkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLinkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _linkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MasterCandidateLinkCandidate.class;
	}

	@Override
	public String getModelClassName() {
		return MasterCandidateLinkCandidate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("linkId", getLinkId());
		attributes.put("candidateId", getCandidateId());
		attributes.put("masterCandidateId", getMasterCandidateId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long linkId = (Long)attributes.get("linkId");

		if (linkId != null) {
			setLinkId(linkId);
		}

		Long candidateId = (Long)attributes.get("candidateId");

		if (candidateId != null) {
			setCandidateId(candidateId);
		}

		Long masterCandidateId = (Long)attributes.get("masterCandidateId");

		if (masterCandidateId != null) {
			setMasterCandidateId(masterCandidateId);
		}
	}

	@Override
	public long getLinkId() {
		return _linkId;
	}

	@Override
	public void setLinkId(long linkId) {
		_linkId = linkId;
	}

	@Override
	public long getCandidateId() {
		return _candidateId;
	}

	@Override
	public void setCandidateId(long candidateId) {
		_candidateId = candidateId;
	}

	@Override
	public long getMasterCandidateId() {
		return _masterCandidateId;
	}

	@Override
	public void setMasterCandidateId(long masterCandidateId) {
		_masterCandidateId = masterCandidateId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MasterCandidateLinkCandidate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MasterCandidateLinkCandidate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MasterCandidateLinkCandidate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MasterCandidateLinkCandidateImpl masterCandidateLinkCandidateImpl = new MasterCandidateLinkCandidateImpl();

		masterCandidateLinkCandidateImpl.setLinkId(getLinkId());
		masterCandidateLinkCandidateImpl.setCandidateId(getCandidateId());
		masterCandidateLinkCandidateImpl.setMasterCandidateId(getMasterCandidateId());

		masterCandidateLinkCandidateImpl.resetOriginalValues();

		return masterCandidateLinkCandidateImpl;
	}

	@Override
	public int compareTo(
		MasterCandidateLinkCandidate masterCandidateLinkCandidate) {
		long primaryKey = masterCandidateLinkCandidate.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MasterCandidateLinkCandidate)) {
			return false;
		}

		MasterCandidateLinkCandidate masterCandidateLinkCandidate = (MasterCandidateLinkCandidate)obj;

		long primaryKey = masterCandidateLinkCandidate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MasterCandidateLinkCandidate> toCacheModel() {
		MasterCandidateLinkCandidateCacheModel masterCandidateLinkCandidateCacheModel =
			new MasterCandidateLinkCandidateCacheModel();

		masterCandidateLinkCandidateCacheModel.linkId = getLinkId();

		masterCandidateLinkCandidateCacheModel.candidateId = getCandidateId();

		masterCandidateLinkCandidateCacheModel.masterCandidateId = getMasterCandidateId();

		return masterCandidateLinkCandidateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{linkId=");
		sb.append(getLinkId());
		sb.append(", candidateId=");
		sb.append(getCandidateId());
		sb.append(", masterCandidateId=");
		sb.append(getMasterCandidateId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append(
			"at.meduni.liferay.portlet.rdconnect.model.MasterCandidateLinkCandidate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>linkId</column-name><column-value><![CDATA[");
		sb.append(getLinkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>candidateId</column-name><column-value><![CDATA[");
		sb.append(getCandidateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterCandidateId</column-name><column-value><![CDATA[");
		sb.append(getMasterCandidateId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MasterCandidateLinkCandidate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MasterCandidateLinkCandidate.class
		};
	private long _linkId;
	private long _candidateId;
	private long _masterCandidateId;
	private MasterCandidateLinkCandidate _escapedModel;
}