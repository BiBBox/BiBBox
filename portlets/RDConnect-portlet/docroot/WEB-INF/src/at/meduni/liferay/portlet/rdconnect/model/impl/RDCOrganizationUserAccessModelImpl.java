/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.meduni.liferay.portlet.rdconnect.model.impl;

import at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccess;
import at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccessModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RDCOrganizationUserAccess service. Represents a row in the &quot;rdconnect.rdcorganizationuseraccess&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccessModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RDCOrganizationUserAccessImpl}.
 * </p>
 *
 * @author Robert Reihs
 * @see RDCOrganizationUserAccessImpl
 * @see at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccess
 * @see at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccessModel
 * @generated
 */
public class RDCOrganizationUserAccessModelImpl extends BaseModelImpl<RDCOrganizationUserAccess>
	implements RDCOrganizationUserAccessModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a r d c organization user access model instance should use the {@link at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccess} interface instead.
	 */
	public static final String TABLE_NAME = "rdconnect.rdcorganizationuseraccess";
	public static final Object[][] TABLE_COLUMNS = {
			{ "rdcorganizationuseraccessId", Types.BIGINT },
			{ "organisationId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "ipaddress", Types.BIGINT },
			{ "lastaccess", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table rdconnect.rdcorganizationuseraccess (rdcorganizationuseraccessId LONG not null primary key,organisationId LONG,userId LONG,ipaddress LONG,lastaccess DATE null)";
	public static final String TABLE_SQL_DROP = "drop table rdconnect.rdcorganizationuseraccess";
	public static final String ORDER_BY_JPQL = " ORDER BY rdcOrganizationUserAccess.rdcorganizationuseraccessId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rdconnect.rdcorganizationuseraccess.rdcorganizationuseraccessId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccess"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccess"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccess"),
			true);
	public static long ORGANISATIONID_COLUMN_BITMASK = 1L;
	public static long RDCORGANIZATIONUSERACCESSID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccess"));

	public RDCOrganizationUserAccessModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rdcorganizationuseraccessId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRdcorganizationuseraccessId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rdcorganizationuseraccessId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RDCOrganizationUserAccess.class;
	}

	@Override
	public String getModelClassName() {
		return RDCOrganizationUserAccess.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("rdcorganizationuseraccessId",
			getRdcorganizationuseraccessId());
		attributes.put("organisationId", getOrganisationId());
		attributes.put("userId", getUserId());
		attributes.put("ipaddress", getIpaddress());
		attributes.put("lastaccess", getLastaccess());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long rdcorganizationuseraccessId = (Long)attributes.get(
				"rdcorganizationuseraccessId");

		if (rdcorganizationuseraccessId != null) {
			setRdcorganizationuseraccessId(rdcorganizationuseraccessId);
		}

		Long organisationId = (Long)attributes.get("organisationId");

		if (organisationId != null) {
			setOrganisationId(organisationId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long ipaddress = (Long)attributes.get("ipaddress");

		if (ipaddress != null) {
			setIpaddress(ipaddress);
		}

		Date lastaccess = (Date)attributes.get("lastaccess");

		if (lastaccess != null) {
			setLastaccess(lastaccess);
		}
	}

	@Override
	public long getRdcorganizationuseraccessId() {
		return _rdcorganizationuseraccessId;
	}

	@Override
	public void setRdcorganizationuseraccessId(long rdcorganizationuseraccessId) {
		_rdcorganizationuseraccessId = rdcorganizationuseraccessId;
	}

	@Override
	public long getOrganisationId() {
		return _organisationId;
	}

	@Override
	public void setOrganisationId(long organisationId) {
		_columnBitmask |= ORGANISATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganisationId) {
			_setOriginalOrganisationId = true;

			_originalOrganisationId = _organisationId;
		}

		_organisationId = organisationId;
	}

	public long getOriginalOrganisationId() {
		return _originalOrganisationId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public long getIpaddress() {
		return _ipaddress;
	}

	@Override
	public void setIpaddress(long ipaddress) {
		_ipaddress = ipaddress;
	}

	@Override
	public Date getLastaccess() {
		return _lastaccess;
	}

	@Override
	public void setLastaccess(Date lastaccess) {
		_lastaccess = lastaccess;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RDCOrganizationUserAccess.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RDCOrganizationUserAccess toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RDCOrganizationUserAccess)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RDCOrganizationUserAccessImpl rdcOrganizationUserAccessImpl = new RDCOrganizationUserAccessImpl();

		rdcOrganizationUserAccessImpl.setRdcorganizationuseraccessId(getRdcorganizationuseraccessId());
		rdcOrganizationUserAccessImpl.setOrganisationId(getOrganisationId());
		rdcOrganizationUserAccessImpl.setUserId(getUserId());
		rdcOrganizationUserAccessImpl.setIpaddress(getIpaddress());
		rdcOrganizationUserAccessImpl.setLastaccess(getLastaccess());

		rdcOrganizationUserAccessImpl.resetOriginalValues();

		return rdcOrganizationUserAccessImpl;
	}

	@Override
	public int compareTo(RDCOrganizationUserAccess rdcOrganizationUserAccess) {
		long primaryKey = rdcOrganizationUserAccess.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RDCOrganizationUserAccess)) {
			return false;
		}

		RDCOrganizationUserAccess rdcOrganizationUserAccess = (RDCOrganizationUserAccess)obj;

		long primaryKey = rdcOrganizationUserAccess.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RDCOrganizationUserAccessModelImpl rdcOrganizationUserAccessModelImpl = this;

		rdcOrganizationUserAccessModelImpl._originalOrganisationId = rdcOrganizationUserAccessModelImpl._organisationId;

		rdcOrganizationUserAccessModelImpl._setOriginalOrganisationId = false;

		rdcOrganizationUserAccessModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RDCOrganizationUserAccess> toCacheModel() {
		RDCOrganizationUserAccessCacheModel rdcOrganizationUserAccessCacheModel = new RDCOrganizationUserAccessCacheModel();

		rdcOrganizationUserAccessCacheModel.rdcorganizationuseraccessId = getRdcorganizationuseraccessId();

		rdcOrganizationUserAccessCacheModel.organisationId = getOrganisationId();

		rdcOrganizationUserAccessCacheModel.userId = getUserId();

		rdcOrganizationUserAccessCacheModel.ipaddress = getIpaddress();

		Date lastaccess = getLastaccess();

		if (lastaccess != null) {
			rdcOrganizationUserAccessCacheModel.lastaccess = lastaccess.getTime();
		}
		else {
			rdcOrganizationUserAccessCacheModel.lastaccess = Long.MIN_VALUE;
		}

		return rdcOrganizationUserAccessCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{rdcorganizationuseraccessId=");
		sb.append(getRdcorganizationuseraccessId());
		sb.append(", organisationId=");
		sb.append(getOrganisationId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", ipaddress=");
		sb.append(getIpaddress());
		sb.append(", lastaccess=");
		sb.append(getLastaccess());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append(
			"at.meduni.liferay.portlet.rdconnect.model.RDCOrganizationUserAccess");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>rdcorganizationuseraccessId</column-name><column-value><![CDATA[");
		sb.append(getRdcorganizationuseraccessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organisationId</column-name><column-value><![CDATA[");
		sb.append(getOrganisationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipaddress</column-name><column-value><![CDATA[");
		sb.append(getIpaddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastaccess</column-name><column-value><![CDATA[");
		sb.append(getLastaccess());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RDCOrganizationUserAccess.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RDCOrganizationUserAccess.class
		};
	private long _rdcorganizationuseraccessId;
	private long _organisationId;
	private long _originalOrganisationId;
	private boolean _setOriginalOrganisationId;
	private long _userId;
	private String _userUuid;
	private long _ipaddress;
	private Date _lastaccess;
	private long _columnBitmask;
	private RDCOrganizationUserAccess _escapedModel;
}