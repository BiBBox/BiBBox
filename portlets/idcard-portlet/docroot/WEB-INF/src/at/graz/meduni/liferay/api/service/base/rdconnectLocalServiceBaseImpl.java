/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.meduni.liferay.api.service.base;

import at.graz.meduni.liferay.api.model.rdconnect;
import at.graz.meduni.liferay.api.service.persistence.rdconnectPersistence;
import at.graz.meduni.liferay.api.service.rdconnectLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the rdconnect local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link at.graz.meduni.liferay.api.service.impl.rdconnectLocalServiceImpl}.
 * </p>
 *
 * @author reihsr
 * @see at.graz.meduni.liferay.api.service.impl.rdconnectLocalServiceImpl
 * @see at.graz.meduni.liferay.api.service.rdconnectLocalServiceUtil
 * @generated
 */
public abstract class rdconnectLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements rdconnectLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link at.graz.meduni.liferay.api.service.rdconnectLocalServiceUtil} to access the rdconnect local service.
	 */

	/**
	 * Adds the rdconnect to the database. Also notifies the appropriate model listeners.
	 *
	 * @param rdconnect the rdconnect
	 * @return the rdconnect that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public rdconnect addrdconnect(rdconnect rdconnect)
		throws SystemException {
		rdconnect.setNew(true);

		return rdconnectPersistence.update(rdconnect);
	}

	/**
	 * Creates a new rdconnect with the primary key. Does not add the rdconnect to the database.
	 *
	 * @param idcardapilogId the primary key for the new rdconnect
	 * @return the new rdconnect
	 */
	@Override
	public rdconnect createrdconnect(long idcardapilogId) {
		return rdconnectPersistence.create(idcardapilogId);
	}

	/**
	 * Deletes the rdconnect with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param idcardapilogId the primary key of the rdconnect
	 * @return the rdconnect that was removed
	 * @throws PortalException if a rdconnect with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public rdconnect deleterdconnect(long idcardapilogId)
		throws PortalException, SystemException {
		return rdconnectPersistence.remove(idcardapilogId);
	}

	/**
	 * Deletes the rdconnect from the database. Also notifies the appropriate model listeners.
	 *
	 * @param rdconnect the rdconnect
	 * @return the rdconnect that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public rdconnect deleterdconnect(rdconnect rdconnect)
		throws SystemException {
		return rdconnectPersistence.remove(rdconnect);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(rdconnect.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return rdconnectPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link at.graz.meduni.liferay.api.model.impl.rdconnectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return rdconnectPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link at.graz.meduni.liferay.api.model.impl.rdconnectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return rdconnectPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return rdconnectPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return rdconnectPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public rdconnect fetchrdconnect(long idcardapilogId)
		throws SystemException {
		return rdconnectPersistence.fetchByPrimaryKey(idcardapilogId);
	}

	/**
	 * Returns the rdconnect with the primary key.
	 *
	 * @param idcardapilogId the primary key of the rdconnect
	 * @return the rdconnect
	 * @throws PortalException if a rdconnect with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public rdconnect getrdconnect(long idcardapilogId)
		throws PortalException, SystemException {
		return rdconnectPersistence.findByPrimaryKey(idcardapilogId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return rdconnectPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the rdconnects.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link at.graz.meduni.liferay.api.model.impl.rdconnectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of rdconnects
	 * @param end the upper bound of the range of rdconnects (not inclusive)
	 * @return the range of rdconnects
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<rdconnect> getrdconnects(int start, int end)
		throws SystemException {
		return rdconnectPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of rdconnects.
	 *
	 * @return the number of rdconnects
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getrdconnectsCount() throws SystemException {
		return rdconnectPersistence.countAll();
	}

	/**
	 * Updates the rdconnect in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param rdconnect the rdconnect
	 * @return the rdconnect that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public rdconnect updaterdconnect(rdconnect rdconnect)
		throws SystemException {
		return rdconnectPersistence.update(rdconnect);
	}

	/**
	 * Returns the rdconnect local service.
	 *
	 * @return the rdconnect local service
	 */
	public at.graz.meduni.liferay.api.service.rdconnectLocalService getrdconnectLocalService() {
		return rdconnectLocalService;
	}

	/**
	 * Sets the rdconnect local service.
	 *
	 * @param rdconnectLocalService the rdconnect local service
	 */
	public void setrdconnectLocalService(
		at.graz.meduni.liferay.api.service.rdconnectLocalService rdconnectLocalService) {
		this.rdconnectLocalService = rdconnectLocalService;
	}

	/**
	 * Returns the rdconnect remote service.
	 *
	 * @return the rdconnect remote service
	 */
	public at.graz.meduni.liferay.api.service.rdconnectService getrdconnectService() {
		return rdconnectService;
	}

	/**
	 * Sets the rdconnect remote service.
	 *
	 * @param rdconnectService the rdconnect remote service
	 */
	public void setrdconnectService(
		at.graz.meduni.liferay.api.service.rdconnectService rdconnectService) {
		this.rdconnectService = rdconnectService;
	}

	/**
	 * Returns the rdconnect persistence.
	 *
	 * @return the rdconnect persistence
	 */
	public rdconnectPersistence getrdconnectPersistence() {
		return rdconnectPersistence;
	}

	/**
	 * Sets the rdconnect persistence.
	 *
	 * @param rdconnectPersistence the rdconnect persistence
	 */
	public void setrdconnectPersistence(
		rdconnectPersistence rdconnectPersistence) {
		this.rdconnectPersistence = rdconnectPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("at.graz.meduni.liferay.api.model.rdconnect",
			rdconnectLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"at.graz.meduni.liferay.api.model.rdconnect");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return rdconnect.class;
	}

	protected String getModelClassName() {
		return rdconnect.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = rdconnectPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = at.graz.meduni.liferay.api.service.rdconnectLocalService.class)
	protected at.graz.meduni.liferay.api.service.rdconnectLocalService rdconnectLocalService;
	@BeanReference(type = at.graz.meduni.liferay.api.service.rdconnectService.class)
	protected at.graz.meduni.liferay.api.service.rdconnectService rdconnectService;
	@BeanReference(type = rdconnectPersistence.class)
	protected rdconnectPersistence rdconnectPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private rdconnectLocalServiceClpInvoker _clpInvoker = new rdconnectLocalServiceClpInvoker();
}