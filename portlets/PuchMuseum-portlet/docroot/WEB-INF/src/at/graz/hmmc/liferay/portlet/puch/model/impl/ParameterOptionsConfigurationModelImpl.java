/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.hmmc.liferay.portlet.puch.model.impl;

import at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfiguration;
import at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfigurationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ParameterOptionsConfiguration service. Represents a row in the &quot;puchmuseum.parameteroptionsconfiguration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfigurationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ParameterOptionsConfigurationImpl}.
 * </p>
 *
 * @author reihsr
 * @see ParameterOptionsConfigurationImpl
 * @see at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfiguration
 * @see at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfigurationModel
 * @generated
 */
public class ParameterOptionsConfigurationModelImpl extends BaseModelImpl<ParameterOptionsConfiguration>
	implements ParameterOptionsConfigurationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a parameter options configuration model instance should use the {@link at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfiguration} interface instead.
	 */
	public static final String TABLE_NAME = "puchmuseum.parameteroptionsconfiguration";
	public static final Object[][] TABLE_COLUMNS = {
			{ "parameteroptionsconfigurationId", Types.BIGINT },
			{ "parameterconfigurationId", Types.BIGINT },
			{ "optionkey", Types.VARCHAR },
			{ "optionvalue", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table puchmuseum.parameteroptionsconfiguration (parameteroptionsconfigurationId LONG not null primary key,parameterconfigurationId LONG,optionkey TEXT null,optionvalue TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table puchmuseum.parameteroptionsconfiguration";
	public static final String ORDER_BY_JPQL = " ORDER BY parameterOptionsConfiguration.parameteroptionsconfigurationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY puchmuseum.parameteroptionsconfiguration.parameteroptionsconfigurationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfiguration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfiguration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfiguration"),
			true);
	public static long PARAMETERCONFIGURATIONID_COLUMN_BITMASK = 1L;
	public static long PARAMETEROPTIONSCONFIGURATIONID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfiguration"));

	public ParameterOptionsConfigurationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _parameteroptionsconfigurationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setParameteroptionsconfigurationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _parameteroptionsconfigurationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ParameterOptionsConfiguration.class;
	}

	@Override
	public String getModelClassName() {
		return ParameterOptionsConfiguration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("parameteroptionsconfigurationId",
			getParameteroptionsconfigurationId());
		attributes.put("parameterconfigurationId", getParameterconfigurationId());
		attributes.put("optionkey", getOptionkey());
		attributes.put("optionvalue", getOptionvalue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long parameteroptionsconfigurationId = (Long)attributes.get(
				"parameteroptionsconfigurationId");

		if (parameteroptionsconfigurationId != null) {
			setParameteroptionsconfigurationId(parameteroptionsconfigurationId);
		}

		Long parameterconfigurationId = (Long)attributes.get(
				"parameterconfigurationId");

		if (parameterconfigurationId != null) {
			setParameterconfigurationId(parameterconfigurationId);
		}

		String optionkey = (String)attributes.get("optionkey");

		if (optionkey != null) {
			setOptionkey(optionkey);
		}

		String optionvalue = (String)attributes.get("optionvalue");

		if (optionvalue != null) {
			setOptionvalue(optionvalue);
		}
	}

	@Override
	public long getParameteroptionsconfigurationId() {
		return _parameteroptionsconfigurationId;
	}

	@Override
	public void setParameteroptionsconfigurationId(
		long parameteroptionsconfigurationId) {
		_parameteroptionsconfigurationId = parameteroptionsconfigurationId;
	}

	@Override
	public long getParameterconfigurationId() {
		return _parameterconfigurationId;
	}

	@Override
	public void setParameterconfigurationId(long parameterconfigurationId) {
		_columnBitmask |= PARAMETERCONFIGURATIONID_COLUMN_BITMASK;

		if (!_setOriginalParameterconfigurationId) {
			_setOriginalParameterconfigurationId = true;

			_originalParameterconfigurationId = _parameterconfigurationId;
		}

		_parameterconfigurationId = parameterconfigurationId;
	}

	public long getOriginalParameterconfigurationId() {
		return _originalParameterconfigurationId;
	}

	@Override
	public String getOptionkey() {
		if (_optionkey == null) {
			return StringPool.BLANK;
		}
		else {
			return _optionkey;
		}
	}

	@Override
	public void setOptionkey(String optionkey) {
		_optionkey = optionkey;
	}

	@Override
	public String getOptionvalue() {
		if (_optionvalue == null) {
			return StringPool.BLANK;
		}
		else {
			return _optionvalue;
		}
	}

	@Override
	public void setOptionvalue(String optionvalue) {
		_optionvalue = optionvalue;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ParameterOptionsConfiguration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ParameterOptionsConfiguration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ParameterOptionsConfiguration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ParameterOptionsConfigurationImpl parameterOptionsConfigurationImpl = new ParameterOptionsConfigurationImpl();

		parameterOptionsConfigurationImpl.setParameteroptionsconfigurationId(getParameteroptionsconfigurationId());
		parameterOptionsConfigurationImpl.setParameterconfigurationId(getParameterconfigurationId());
		parameterOptionsConfigurationImpl.setOptionkey(getOptionkey());
		parameterOptionsConfigurationImpl.setOptionvalue(getOptionvalue());

		parameterOptionsConfigurationImpl.resetOriginalValues();

		return parameterOptionsConfigurationImpl;
	}

	@Override
	public int compareTo(
		ParameterOptionsConfiguration parameterOptionsConfiguration) {
		long primaryKey = parameterOptionsConfiguration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ParameterOptionsConfiguration)) {
			return false;
		}

		ParameterOptionsConfiguration parameterOptionsConfiguration = (ParameterOptionsConfiguration)obj;

		long primaryKey = parameterOptionsConfiguration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ParameterOptionsConfigurationModelImpl parameterOptionsConfigurationModelImpl =
			this;

		parameterOptionsConfigurationModelImpl._originalParameterconfigurationId = parameterOptionsConfigurationModelImpl._parameterconfigurationId;

		parameterOptionsConfigurationModelImpl._setOriginalParameterconfigurationId = false;

		parameterOptionsConfigurationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ParameterOptionsConfiguration> toCacheModel() {
		ParameterOptionsConfigurationCacheModel parameterOptionsConfigurationCacheModel =
			new ParameterOptionsConfigurationCacheModel();

		parameterOptionsConfigurationCacheModel.parameteroptionsconfigurationId = getParameteroptionsconfigurationId();

		parameterOptionsConfigurationCacheModel.parameterconfigurationId = getParameterconfigurationId();

		parameterOptionsConfigurationCacheModel.optionkey = getOptionkey();

		String optionkey = parameterOptionsConfigurationCacheModel.optionkey;

		if ((optionkey != null) && (optionkey.length() == 0)) {
			parameterOptionsConfigurationCacheModel.optionkey = null;
		}

		parameterOptionsConfigurationCacheModel.optionvalue = getOptionvalue();

		String optionvalue = parameterOptionsConfigurationCacheModel.optionvalue;

		if ((optionvalue != null) && (optionvalue.length() == 0)) {
			parameterOptionsConfigurationCacheModel.optionvalue = null;
		}

		return parameterOptionsConfigurationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{parameteroptionsconfigurationId=");
		sb.append(getParameteroptionsconfigurationId());
		sb.append(", parameterconfigurationId=");
		sb.append(getParameterconfigurationId());
		sb.append(", optionkey=");
		sb.append(getOptionkey());
		sb.append(", optionvalue=");
		sb.append(getOptionvalue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append(
			"at.graz.hmmc.liferay.portlet.puch.model.ParameterOptionsConfiguration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>parameteroptionsconfigurationId</column-name><column-value><![CDATA[");
		sb.append(getParameteroptionsconfigurationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parameterconfigurationId</column-name><column-value><![CDATA[");
		sb.append(getParameterconfigurationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>optionkey</column-name><column-value><![CDATA[");
		sb.append(getOptionkey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>optionvalue</column-name><column-value><![CDATA[");
		sb.append(getOptionvalue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ParameterOptionsConfiguration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ParameterOptionsConfiguration.class
		};
	private long _parameteroptionsconfigurationId;
	private long _parameterconfigurationId;
	private long _originalParameterconfigurationId;
	private boolean _setOriginalParameterconfigurationId;
	private String _optionkey;
	private String _optionvalue;
	private long _columnBitmask;
	private ParameterOptionsConfiguration _escapedModel;
}