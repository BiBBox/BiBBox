/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package at.graz.hmmc.liferay.portlet.puch.model.impl;

import at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjekt;
import at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjektModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PuchMuseumsObjekt service. Represents a row in the &quot;puchmuseum.puchmuseumsobjekt&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjektModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PuchMuseumsObjektImpl}.
 * </p>
 *
 * @author reihsr
 * @see PuchMuseumsObjektImpl
 * @see at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjekt
 * @see at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjektModel
 * @generated
 */
public class PuchMuseumsObjektModelImpl extends BaseModelImpl<PuchMuseumsObjekt>
	implements PuchMuseumsObjektModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a puch museums objekt model instance should use the {@link at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjekt} interface instead.
	 */
	public static final String TABLE_NAME = "puchmuseum.puchmuseumsobjekt";
	public static final Object[][] TABLE_COLUMNS = {
			{ "puchmuseumsobjectId", Types.BIGINT },
			{ "createrUserId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedUserId", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "objekttyp", Types.VARCHAR },
			{ "objektid", Types.BIGINT },
			{ "folder", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table puchmuseum.puchmuseumsobjekt (puchmuseumsobjectId LONG not null primary key,createrUserId LONG,createDate DATE null,modifiedUserId LONG,modifiedDate DATE null,objekttyp VARCHAR(75) null,objektid LONG,folder LONG)";
	public static final String TABLE_SQL_DROP = "drop table puchmuseum.puchmuseumsobjekt";
	public static final String ORDER_BY_JPQL = " ORDER BY puchMuseumsObjekt.puchmuseumsobjectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY puchmuseum.puchmuseumsobjekt.puchmuseumsobjectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjekt"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjekt"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjekt"));

	public PuchMuseumsObjektModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _puchmuseumsobjectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPuchmuseumsobjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _puchmuseumsobjectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PuchMuseumsObjekt.class;
	}

	@Override
	public String getModelClassName() {
		return PuchMuseumsObjekt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("puchmuseumsobjectId", getPuchmuseumsobjectId());
		attributes.put("createrUserId", getCreaterUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedUserId", getModifiedUserId());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("objekttyp", getObjekttyp());
		attributes.put("objektid", getObjektid());
		attributes.put("folder", getFolder());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long puchmuseumsobjectId = (Long)attributes.get("puchmuseumsobjectId");

		if (puchmuseumsobjectId != null) {
			setPuchmuseumsobjectId(puchmuseumsobjectId);
		}

		Long createrUserId = (Long)attributes.get("createrUserId");

		if (createrUserId != null) {
			setCreaterUserId(createrUserId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long modifiedUserId = (Long)attributes.get("modifiedUserId");

		if (modifiedUserId != null) {
			setModifiedUserId(modifiedUserId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String objekttyp = (String)attributes.get("objekttyp");

		if (objekttyp != null) {
			setObjekttyp(objekttyp);
		}

		Long objektid = (Long)attributes.get("objektid");

		if (objektid != null) {
			setObjektid(objektid);
		}

		Long folder = (Long)attributes.get("folder");

		if (folder != null) {
			setFolder(folder);
		}
	}

	@Override
	public long getPuchmuseumsobjectId() {
		return _puchmuseumsobjectId;
	}

	@Override
	public void setPuchmuseumsobjectId(long puchmuseumsobjectId) {
		_puchmuseumsobjectId = puchmuseumsobjectId;
	}

	@Override
	public long getCreaterUserId() {
		return _createrUserId;
	}

	@Override
	public void setCreaterUserId(long createrUserId) {
		_createrUserId = createrUserId;
	}

	@Override
	public String getCreaterUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreaterUserId(), "uuid",
			_createrUserUuid);
	}

	@Override
	public void setCreaterUserUuid(String createrUserUuid) {
		_createrUserUuid = createrUserUuid;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getModifiedUserId() {
		return _modifiedUserId;
	}

	@Override
	public void setModifiedUserId(long modifiedUserId) {
		_modifiedUserId = modifiedUserId;
	}

	@Override
	public String getModifiedUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getModifiedUserId(), "uuid",
			_modifiedUserUuid);
	}

	@Override
	public void setModifiedUserUuid(String modifiedUserUuid) {
		_modifiedUserUuid = modifiedUserUuid;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getObjekttyp() {
		if (_objekttyp == null) {
			return StringPool.BLANK;
		}
		else {
			return _objekttyp;
		}
	}

	@Override
	public void setObjekttyp(String objekttyp) {
		_objekttyp = objekttyp;
	}

	@Override
	public long getObjektid() {
		return _objektid;
	}

	@Override
	public void setObjektid(long objektid) {
		_objektid = objektid;
	}

	@Override
	public long getFolder() {
		return _folder;
	}

	@Override
	public void setFolder(long folder) {
		_folder = folder;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PuchMuseumsObjekt.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PuchMuseumsObjekt toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PuchMuseumsObjekt)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PuchMuseumsObjektImpl puchMuseumsObjektImpl = new PuchMuseumsObjektImpl();

		puchMuseumsObjektImpl.setPuchmuseumsobjectId(getPuchmuseumsobjectId());
		puchMuseumsObjektImpl.setCreaterUserId(getCreaterUserId());
		puchMuseumsObjektImpl.setCreateDate(getCreateDate());
		puchMuseumsObjektImpl.setModifiedUserId(getModifiedUserId());
		puchMuseumsObjektImpl.setModifiedDate(getModifiedDate());
		puchMuseumsObjektImpl.setObjekttyp(getObjekttyp());
		puchMuseumsObjektImpl.setObjektid(getObjektid());
		puchMuseumsObjektImpl.setFolder(getFolder());

		puchMuseumsObjektImpl.resetOriginalValues();

		return puchMuseumsObjektImpl;
	}

	@Override
	public int compareTo(PuchMuseumsObjekt puchMuseumsObjekt) {
		long primaryKey = puchMuseumsObjekt.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PuchMuseumsObjekt)) {
			return false;
		}

		PuchMuseumsObjekt puchMuseumsObjekt = (PuchMuseumsObjekt)obj;

		long primaryKey = puchMuseumsObjekt.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PuchMuseumsObjekt> toCacheModel() {
		PuchMuseumsObjektCacheModel puchMuseumsObjektCacheModel = new PuchMuseumsObjektCacheModel();

		puchMuseumsObjektCacheModel.puchmuseumsobjectId = getPuchmuseumsobjectId();

		puchMuseumsObjektCacheModel.createrUserId = getCreaterUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			puchMuseumsObjektCacheModel.createDate = createDate.getTime();
		}
		else {
			puchMuseumsObjektCacheModel.createDate = Long.MIN_VALUE;
		}

		puchMuseumsObjektCacheModel.modifiedUserId = getModifiedUserId();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			puchMuseumsObjektCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			puchMuseumsObjektCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		puchMuseumsObjektCacheModel.objekttyp = getObjekttyp();

		String objekttyp = puchMuseumsObjektCacheModel.objekttyp;

		if ((objekttyp != null) && (objekttyp.length() == 0)) {
			puchMuseumsObjektCacheModel.objekttyp = null;
		}

		puchMuseumsObjektCacheModel.objektid = getObjektid();

		puchMuseumsObjektCacheModel.folder = getFolder();

		return puchMuseumsObjektCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{puchmuseumsobjectId=");
		sb.append(getPuchmuseumsobjectId());
		sb.append(", createrUserId=");
		sb.append(getCreaterUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedUserId=");
		sb.append(getModifiedUserId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", objekttyp=");
		sb.append(getObjekttyp());
		sb.append(", objektid=");
		sb.append(getObjektid());
		sb.append(", folder=");
		sb.append(getFolder());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("at.graz.hmmc.liferay.portlet.puch.model.PuchMuseumsObjekt");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>puchmuseumsobjectId</column-name><column-value><![CDATA[");
		sb.append(getPuchmuseumsobjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createrUserId</column-name><column-value><![CDATA[");
		sb.append(getCreaterUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUserId</column-name><column-value><![CDATA[");
		sb.append(getModifiedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objekttyp</column-name><column-value><![CDATA[");
		sb.append(getObjekttyp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objektid</column-name><column-value><![CDATA[");
		sb.append(getObjektid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folder</column-name><column-value><![CDATA[");
		sb.append(getFolder());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PuchMuseumsObjekt.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PuchMuseumsObjekt.class
		};
	private long _puchmuseumsobjectId;
	private long _createrUserId;
	private String _createrUserUuid;
	private Date _createDate;
	private long _modifiedUserId;
	private String _modifiedUserUuid;
	private Date _modifiedDate;
	private String _objekttyp;
	private long _objektid;
	private long _folder;
	private PuchMuseumsObjekt _escapedModel;
}